#line 2 "UpgradeLexer.cpp"

#line 4 "UpgradeLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE Upgraderestart(Upgradein  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (16384*64)
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int Upgradeleng;

extern FILE *Upgradein, *Upgradeout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE Upgradelex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-Upgradelineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < Upgradeleng; ++yyl )\
                    if ( Upgradetext[yyl] == '\n' )\
                        --Upgradelineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up Upgradetext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up Upgradetext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via Upgraderestart()), so that the user can continue scanning by
	 * just pointing Upgradein at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when Upgradetext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int Upgradeleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow Upgradewrap()'s to do buffer switches
 * instead of setting up a fresh Upgradein.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void Upgraderestart (FILE *input_file  );
void Upgrade_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE Upgrade_create_buffer (FILE *file,int size  );
void Upgrade_delete_buffer (YY_BUFFER_STATE b  );
void Upgrade_flush_buffer (YY_BUFFER_STATE b  );
void Upgradepush_buffer_state (YY_BUFFER_STATE new_buffer  );
void Upgradepop_buffer_state (void );

static void Upgradeensure_buffer_stack (void );
static void Upgrade_load_buffer_state (void );
static void Upgrade_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER Upgrade_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE Upgrade_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE Upgrade_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE Upgrade_scan_bytes (yyconst char *bytes,int len  );

void *Upgradealloc (yy_size_t  );
void *Upgraderealloc (void *,yy_size_t  );
void Upgradefree (void *  );

#define yy_new_buffer Upgrade_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        Upgradeensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Upgrade_create_buffer(Upgradein,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        Upgradeensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Upgrade_create_buffer(Upgradein,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Upgradewrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *Upgradein = (FILE *) 0, *Upgradeout = (FILE *) 0;

typedef int yy_state_type;

extern int Upgradelineno;

int Upgradelineno = 1;

extern char *Upgradetext;
#define yytext_ptr Upgradetext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up Upgradetext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	Upgradeleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[620] =
    {   0,
        0,    0,  162,  160,  159,  159,  160,  160,  160,  160,
      160,  160,  152,  152,    1,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,    0,  151,    0,
      149,  148,  148,  155,    0,  153,    0,  157,  152,    0,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      134,    0,   41,    0,    0,    0,    0,    0,    0,    0,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   62,    0,    0,   50,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   95,    0,    0,    0,    0,

        0,    0,    0,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  151,
      148,  148,  157,   20,  157,    0,  158,    0,   68,    0,
        0,   79,    0,    0,   39,    0,   34,    0,    0,    0,
        0,   42,    0,    0,    0,    0,    0,    0,   71,    0,
        0,    3,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   53,   56,   59,    0,    0,    0,
       54,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       70,   25,    0,  104,  109,  107,  108,  106,  105,    0,
      110,  114,    0,    0,   75,  133,    0,    0,    0,    0,
        0,    0,    0,   99,   97,   88,    0,   89,    0,    0,
        0,   98,   96,    0,    0,   69,    0,    0,    0,    0,
        0,    0,    0,    0,  112,  103,  101,    0,    0,  102,
        0,  100,    0,  113,    0,  111,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   81,    0,    0,
      150,  157,    0,    0,    0,  157,    0,    0,    0,   91,
        0,    0,   61,  115,  116,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       93,   74,    0,    0,    0,    0,  141,   78,    0,    0,
       92,    0,    0,    0,    0,    0,    0,    0,    0,  142,
       57,   90,    0,    0,   22,    0,    0,    0,  154,    0,
       73,    0,    0,    0,    0,    0,    0,  119,    0,    0,
        0,    0,   77,    0,    0,   26,    0,    0,    4,    0,
       66,    0,   72,   55,    0,    0,    0,    0,    0,    0,
       76,    0,    0,    0,    0,   60,    0,   11,    0,    0,
      118,  157,   36,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        5,    0,   63,  121,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   65,    0,    0,    0,    0,    0,
        0,    0,   48,    0,    0,   83,   87,   85,   86,   84,
       82,   51,    0,    0,    0,  143,    0,    0,    0,  117,
       49,    0,   58,   21,    0,    0,    0,    0,    0,  131,
        0,    0,    0,    0,    0,  140,    0,    0,   45,    0,
        0,    0,    0,    0,    0,    0,   64,   30,   24,    0,
        0,   44,  123,  122,    0,    0,    7,    0,    0,    0,
        0,  136,    0,   33,  139,   38,   67,    0,    0,    0,
      129,    0,    0,  125,  135,   27,   28,  124,    0,    0,
      137,   52,  132,  130,    0,    0,    0,    0,    0,  128,

        0,   43,    0,    6,   29,    0,    0,    0,    0,    0,
      120,    0,    0,    0,    0,    0,    0,    0,    0,   37,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,   17,    0,    0,    0,    0,    9,
      127,   10,    0,  126,    0,    0,    0,    0,   35,    0,
        0,    0,   12,    0,   14,   13,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
        0,    0,    0,    0,    0,    0,    0,   40,    0,    0,
        0,    0,    0,   15,    0,    0,    0,    0,   31,    0,
        0,  138,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  144,    0,  146,  147,   16,
        0,   46,    0,  145,   18,   47,    0,   19,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   15,   17,   15,   18,   19,    1,
        1,    1,    1,   20,   21,   21,   21,   21,   22,   21,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   23,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,    5,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    5,    3,    6,
        6,    6,    6,    6,    6,    6,    6,    7,    1,    1,
        3,    8,    3,    3,    3,    3,    3,    8,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[630] =
    {   0,
        0,    0, 1336, 1337, 1337, 1337, 1331, 1316,   41,    0,
       49,   59,   69, 1287,    0,  112,   69,   72,   93,  113,
       52,  122,   74,  152,  120,   77,  136,  156,  135,   71,
      187,  186,  224,  118,  115,   56,  153, 1328, 1337, 1313,
     1337,    0,  256,    0, 1321, 1320,   88,  264, 1282,  283,
        0, 1323,  140,  157,  158,  121,  164,  183,  198,   32,
     1308,  190,   95,  175,   54,  165,  217,  162,  117,  182,
      218, 1307,  220,  272,  185,  100,  204,  219,  235,  241,
      264,  232,  273,   57, 1306,  284,  285,  296,  297,  299,
      300,  226,  298,  302,  308, 1305,  303,  309,  307,  316,

      321,  329,  330,  332,  333,  334,  313,  337,  310,  315,
      342,  343,  350,  353,  346,  352,  358,  363,  357,  365,
      366, 1304,  373,  377,  381,  385,  383,  384,  389,  390,
      402,  386,  392,  417,  418,  395,  271,  393,  403, 1303,
        0,    0,  416, 1302,    0,  447,    0, 1315, 1300,  438,
      428, 1299,  448,  427, 1298,  419, 1297,  451,  452,  453,
      406, 1296,  454,  455,  456,  461,  457,  460, 1295,  465,
      464,  470,  462,  477,  474,  480,  481,  482,  483,  485,
      488,  486,  490,  491, 1294, 1293, 1292,  492,  493,  495,
      506,  502,  514,  511,  494,  519,  515,  517,  520,  522,

     1291, 1290,  525, 1289, 1288, 1287, 1286, 1285, 1284,  523,
     1283, 1282,  531,  529, 1281, 1280,  562,  538,  537,  540,
      532,  567,  550, 1279, 1278, 1277,  575, 1276,  534,  533,
      576, 1275, 1274,  535,  578, 1273,  580,  582,  581,  586,
      584,  589,  587,  588, 1272, 1271, 1270,  591,  590, 1269,
      592, 1268,  603, 1267,  601, 1266,  607,  608,  612,  605,
      620,  596,  621,  616,  627,  623,  546, 1265,  628,  630,
     1337,  630,  646,  652,  654,  656,  632,  648,  637, 1264,
      639,  652, 1263, 1262, 1261,  651,  649,  653,  660,  661,
      664,  662,  663,  665,  666,  668,  669,  679,  674,  675,

     1260, 1259,  670,  671,  682,  686, 1258, 1257,  687,  692,
     1256,  689,  693,  696,  697,  702,  704,  700,  706, 1255,
     1254, 1253,  708,  709, 1252,  701,  710,  712,    0,  713,
     1251,  714,  721,  724,  730,  732,  733, 1250,  735,  736,
      738,  739, 1249,  741,  744, 1248,  753,  746, 1247,  749,
     1246,  755, 1245, 1244,  758,  760,  764,  766,  761,  768,
     1243,  770,  771,  773,  774, 1242,  776, 1241,  778,  777,
     1240,    0, 1239,  781,  779, 1238,  782,  790,  797,  796,
      806,  794,  807,  795,  799,  808,  809,  810,  811,  813,
     1237,  817, 1236, 1235,  822,  823,  820,  830,  826,  824,

      828,  831,  833,  835, 1234,  832,  844,  839,  846,  848,
      851,  843, 1233,  855,  859, 1232, 1231, 1230, 1229, 1228,
     1227, 1226,  860,  862,  864, 1225,  865,  863,  867, 1224,
     1223,  866, 1222, 1221,  868,  871,  872,  869,  870, 1220,
      875,  880,  885,  888,  889, 1219,  890,  895, 1218,  896,
      897,  898,  900,  901,  902,  903, 1217, 1216, 1215,  911,
      906, 1214, 1213, 1212,  915,  908, 1211,  918,  926,  929,
      909, 1210,  931, 1209, 1208, 1207, 1206,  920,  932,  934,
     1205,  937,  938, 1204, 1203, 1202, 1201, 1200,  940,  943,
     1199, 1198, 1197, 1192,  941,  944,  946,  945,  948, 1181,

      951, 1178,  953, 1170, 1167,  958,  960,  961,  962,  963,
     1164,  964,  965,  968,  969,  970,  971,  976,  977, 1158,
      979,  986,  987,  989,  990,  991,  994,  997,  998, 1146,
     1003, 1006, 1007, 1004, 1145, 1008, 1009, 1011, 1012, 1144,
     1142, 1141, 1018, 1140, 1013, 1017, 1020, 1019, 1139, 1029,
     1033, 1034, 1137, 1016, 1136, 1133, 1038, 1041, 1042, 1043,
     1045, 1046, 1047, 1050, 1053, 1052, 1054, 1056, 1057, 1131,
     1058, 1061, 1059, 1064, 1065, 1070, 1069, 1128, 1071, 1077,
     1081, 1082, 1083,  913, 1084, 1085, 1086, 1089,  784, 1091,
     1092,  783, 1090, 1095, 1104, 1096, 1105, 1111, 1108, 1112,

     1113, 1115, 1116, 1117, 1119,  737, 1120,  548,  391,  349,
     1121,  312, 1125,  270,  266,  221, 1126,  184, 1337, 1166,
     1172, 1178,  192, 1186, 1192,   70, 1200, 1203, 1208
    } ;

static yyconst flex_int16_t yy_def[630] =
    {   0,
      619,    1,  619,  619,  619,  619,  620,  621,  622,  623,
      621,  621,   11,   13,  624,  622,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  620,  619,  621,
      619,  625,  625,  626,  623,   11,  621,   11,   13,   11,
      624,  627,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  619,
      625,   43,  628,  621,   48,   11,   50,  627,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,   50,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      619,  628,  629,  629,  146,  146,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  217,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  274,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,    0,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619
    } ;

static yyconst flex_int16_t yy_nxt[1386] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,   14,   14,   14,   14,    4,   15,   16,
        8,    8,    8,   17,   18,   19,   20,   21,   22,   23,
        8,   24,    8,   25,   26,   27,   28,   29,    8,   30,
       31,   32,   33,   34,   35,   36,    8,   37,   43,   41,
       44,   44,   44,   44,   44,   44,   44,   44,   46,   46,
       46,   46,   46,   46,   46,   46,   41,   47,  159,   41,
      187,   41,  137,   41,   41,   44,   41,   48,   49,   49,
       49,   49,   49,   49,   49,   49,   41,   71,   41,   41,
       72,   41,  138,  165,   41,   53,  144,   73,  108,   58,

       93,   80,   54,   59,   55,   41,   56,   81,   60,   57,
       41,   61,   41,   94,   50,   52,   62,   41,   63,   95,
      162,  619,  619,  619,  619,  619,  619,  619,  619,   64,
       41,  178,   41,   65,   41,   41,   66,   41,   41,   41,
       67,  134,  136,   89,   68,   74,   69,   75,   76,   70,
      170,   90,   41,   41,  135,   77,   91,   41,  153,   78,
       92,   79,   82,   96,   83,  105,  149,   84,   85,   41,
       41,  106,   97,   41,   41,   41,  107,   86,   98,   41,
      139,   41,   41,   99,  152,  100,   87,   88,  150,  101,
      151,  102,   41,  103,  154,  104,  109,   45,  155,   41,

       41,   41,   41,   41,   41,  169,  166,   41,  163,  121,
      164,  110,  156,  111,  112,   41,  113,  114,  115,  177,
      116,   41,  122,  160,  171,  123,  117,  157,  118,  119,
      161,  120,  124,  109,   41,   41,   41,   41,   41,  158,
      179,   41,  167,   41,  172,  173,  180,  185,  125,   41,
      126,  127,   41,  128,  168,  129,  198,  130,   41,  131,
      181,  174,  182,  132,  133,  142,  142,  142,  142,  142,
      142,  142,  142,  145,  145,  145,  145,  145,  145,  145,
      145,   41,  183,   41,  186,  146,  267,   41,   41,   41,
       41,  146,  147,  147,  147,  147,  147,  147,  147,  147,

      184,   41,   41,  147,  147,  175,  147,  147,  147,  147,
      147,  147,  176,   41,   41,   41,   41,   41,  188,   41,
       41,  193,  189,  196,   41,   41,   41,   41,  200,   41,
       41,  199,   41,   41,  194,  197,  190,  191,   41,  192,
      195,  201,  203,  205,  202,  204,   41,   41,  207,   41,
       41,   41,  214,  210,   41,  217,  209,  206,  211,   41,
       41,  218,  208,   41,  212,  213,   41,   41,  220,   41,
       41,  215,  230,  219,   41,   41,  221,  224,  216,  232,
       41,  236,   41,   41,  222,  234,  226,  231,  223,  227,
       41,  225,  228,  233,   41,  229,  237,  238,   41,  235,

       41,   41,   41,   41,  240,  239,   41,   41,   41,   41,
       41,  246,   41,  259,  242,  241,  244,  250,  266,   41,
       41,  245,  260,   41,  248,  247,  251,  243,  253,  254,
      249,  252,  268,  255,   41,   41,   41,  273,  256,  261,
      262,  257,  269,  273,   41,   41,  258,  285,  270,  264,
      281,  265,  263,  274,  275,   41,  276,  276,  276,  276,
      276,  276,  276,  276,  278,   41,  280,  277,   41,   41,
       41,   41,   41,   41,   41,  279,  282,   41,   41,   41,
      286,   41,   41,  288,  289,  283,  284,   41,  294,  296,
      290,   41,  292,  291,   41,  287,  293,   41,   41,   41,

       41,  295,   41,   41,  297,   41,  303,   41,   41,   41,
       41,   41,   41,  307,  299,  310,  298,  309,  301,   41,
      308,  300,  313,   41,  305,  302,  312,  306,   41,  311,
      304,   41,   41,  314,   41,  319,   41,   41,  316,   41,
       41,  317,   41,  318,  321,  320,   41,  315,   41,   41,
       41,   41,   41,  323,   41,   41,  322,   41,  325,  333,
      341,  326,  340,   41,  324,   41,  327,   41,  369,  343,
      328,  329,  329,  329,  329,  329,  329,  329,  329,  330,
      331,  332,  329,  329,   41,  329,  329,  329,  329,  329,
      329,  338,   41,   41,  334,   41,  335,   41,   41,   41,

      336,   41,  337,   41,   41,   41,   41,   41,   41,   41,
      347,  349,  342,   41,  339,  346,  351,  344,   41,  350,
       41,  345,   41,  348,   41,   41,  355,  356,  352,   41,
      357,  353,  354,   41,  359,  364,  358,   41,   41,  360,
       41,  362,  366,  363,   41,   41,  361,   41,  365,   41,
      367,  273,  274,  274,   41,  368,   41,  273,  619,  619,
      619,   40,  619,   40,  370,   41,   41,  373,   41,   41,
       41,  371,  375,  374,  376,  377,  378,   41,   41,   41,
       41,   41,   41,   41,  382,   41,   41,   41,   41,  387,
      379,   41,   41,  381,  380,  383,   41,  385,  386,   41,

      392,  391,  390,   41,   41,  388,   41,  384,  389,   41,
       41,  393,  394,   41,   41,  399,  400,   41,   41,   41,
      398,   41,  395,   41,  396,   41,   41,   41,  397,   41,
       41,   41,  401,  403,  404,  402,  406,  405,   41,  407,
      413,   41,  409,  410,  408,  414,  415,   41,  412,   41,
       41,  411,   41,   41,   41,   41,   41,  417,   41,  419,
      421,   41,  416,   41,  423,  424,   41,  425,  426,  427,
       41,  418,   41,  420,  430,   41,  422,   41,   41,  429,
      428,   41,  431,   41,  436,   41,  432,   41,   41,  433,
       41,   41,  434,   41,   41,   41,   41,  435,   41,   41,

       41,   41,  440,  437,  446,  447,  443,   41,  445,  438,
      439,   41,   41,   41,   41,  449,   41,  442,  444,  441,
      450,  451,  448,   41,   41,   41,   41,   41,   41,  452,
       41,  454,  455,  453,   41,  457,  456,   41,  461,   41,
       41,   41,  462,   41,  458,   41,  460,   41,   41,   41,
       41,  459,   41,  463,  464,  465,   41,  466,  468,  467,
       41,   41,  472,   41,  475,   41,  470,  473,   41,  469,
      471,  474,   41,  476,  479,  477,   41,   41,  478,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
      483,  480,   41,  482,  487,  485,  490,   41,  491,  493,

      481,  484,   41,  488,  486,   41,   41,   41,  496,  489,
      492,  495,   41,   41,   41,   41,  494,   41,   41,   41,
       41,  499,  502,   41,  498,   41,   41,  504,   41,  497,
       41,  501,   41,  508,  509,   41,  500,   41,  506,  507,
      511,  505,  512,   41,  503,  513,   41,  510,   41,   41,
      516,   41,  515,  514,   41,   41,  517,   41,   41,  518,
       41,   41,   41,   41,  521,   41,  522,  519,   41,  520,
       41,  523,  527,  524,  525,   41,  528,   41,   41,   41,
       41,   41,   41,  529,  526,   41,   41,   41,   41,  531,
      536,  537,  530,   41,   41,  535,   41,  532,  542,  533,

      538,  539,  540,   41,   41,  534,   41,   41,   41,  541,
      547,   41,  548,  546,   41,   41,  543,  549,  544,  551,
       41,   41,  545,   41,   41,   41,   41,  553,   41,   41,
       41,  557,  550,   41,   41,   41,   41,   41,  552,  561,
      563,  558,  564,  566,  559,  554,   41,  555,  556,  562,
       41,   41,  560,  565,  567,   41,  568,  570,   41,   41,
       41,  571,   41,   41,   41,  569,  574,   41,  572,   41,
       41,   41,  577,   41,   41,   41,   41,  581,   41,  575,
      583,   41,   41,  573,  579,  580,   41,   41,   41,  582,
      584,  578,  588,  576,   41,  585,  586,  589,   41,   41,

       41,   41,   41,   41,  592,  587,   41,   41,   41,   41,
      590,  596,   41,   41,  593,  594,  595,  598,  591,  601,
      603,   41,   41,  602,  599,   41,  597,  600,   41,   41,
       41,  605,   41,   41,   41,  604,   41,   41,   41,  610,
      611,  612,   41,   41,  606,   41,  616,  607,   41,  608,
       41,  609,  617,   41,   41,  615,   41,   41,   41,   41,
      614,   41,   41,   41,  613,  618,   38,   38,   38,   38,
       38,   38,   38,   38,   40,   41,   40,   40,   40,   40,
       42,   41,   42,   42,   41,   42,   51,   41,   51,   51,
       51,   51,   51,   51,  141,   41,  141,  141,   41,  141,

      148,  148,  148,  148,  148,  148,  148,  148,  272,   41,
      272,  372,  372,  372,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   39,   41,
      271,   41,   41,   41,   41,   41,   39,   40,   48,  143,
       41,  140,   40,   41,   39,  619,    3,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619
    } ;

static yyconst flex_int16_t yy_chk[1386] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    9,   60,
        9,    9,    9,    9,    9,    9,    9,    9,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   60,   21,
       84,   65,   36,   36,   84,  626,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   17,   21,   30,   18,
       21,   23,   36,   65,   26,   17,   47,   21,   30,   18,

       26,   23,   17,   18,   17,   47,   17,   23,   18,   17,
       19,   18,   63,   26,   13,   16,   19,   76,   19,   26,
       63,   16,   16,   16,   16,   16,   16,   16,   16,   19,
       20,   76,   35,   19,   69,   34,   20,   25,   56,   22,
       20,   34,   35,   25,   20,   22,   20,   22,   22,   20,
       69,   25,   29,   27,   34,   22,   25,   53,   56,   22,
       25,   22,   24,   27,   24,   29,   53,   24,   24,   24,
       37,   29,   27,   28,   54,   55,   29,   24,   27,   68,
       37,   57,   66,   28,   55,   28,   24,   24,   54,   28,
       54,   28,   64,   28,   57,   28,   31,  623,   57,   70,

       58,  618,   75,   32,   31,   68,   66,   62,   64,   32,
       64,   31,   58,   31,   31,   59,   31,   31,   31,   75,
       31,   77,   32,   62,   70,   32,   31,   59,   31,   31,
       62,   31,   32,   33,   67,   71,   78,   73,  616,   59,
       77,   33,   67,   92,   71,   73,   78,   82,   33,   82,
       33,   33,   79,   33,   67,   33,   92,   33,   80,   33,
       78,   73,   79,   33,   33,   43,   43,   43,   43,   43,
       43,   43,   43,   48,   48,   48,   48,   48,   48,   48,
       48,   81,   80,  615,   83,   48,  137,  614,  137,   74,
       83,   48,   50,   50,   50,   50,   50,   50,   50,   50,

       81,   86,   87,   50,   50,   74,   50,   50,   50,   50,
       50,   50,   74,   88,   89,   93,   90,   91,   86,   94,
       97,   89,   87,   91,   99,   95,   98,  109,   94,  612,
      107,   93,  110,  100,   90,   91,   88,   88,  101,   88,
       90,   95,   98,  100,   97,   99,  102,  103,  101,  104,
      105,  106,  107,  103,  108,  109,  102,  100,  104,  111,
      112,  110,  101,  115,  105,  106,  610,  113,  112,  116,
      114,  108,  115,  111,  119,  117,  112,  113,  108,  116,
      118,  119,  120,  121,  112,  117,  114,  115,  112,  114,
      123,  113,  114,  116,  124,  114,  120,  121,  125,  118,

      127,  128,  126,  132,  123,  121,  129,  130,  609,  133,
      138,  128,  136,  132,  124,  123,  126,  130,  136,  131,
      139,  127,  133,  161,  129,  128,  130,  125,  131,  131,
      129,  130,  138,  131,  134,  135,  156,  143,  131,  134,
      134,  131,  139,  143,  154,  151,  131,  161,  139,  135,
      156,  135,  134,  146,  146,  150,  146,  146,  146,  146,
      146,  146,  146,  146,  151,  153,  154,  150,  158,  159,
      160,  163,  164,  165,  167,  153,  158,  168,  166,  173,
      163,  171,  170,  165,  166,  159,  160,  172,  171,  173,
      167,  175,  170,  168,  174,  164,  170,  176,  177,  178,

      179,  172,  180,  182,  174,  181,  179,  183,  184,  188,
      189,  195,  190,  182,  175,  184,  174,  183,  177,  192,
      182,  176,  190,  191,  181,  178,  189,  181,  194,  188,
      180,  193,  197,  191,  198,  195,  196,  199,  192,  200,
      210,  193,  203,  194,  197,  196,  214,  191,  213,  221,
      230,  229,  234,  199,  219,  218,  198,  220,  203,  221,
      230,  210,  229,  267,  200,  608,  213,  223,  267,  234,
      214,  217,  217,  217,  217,  217,  217,  217,  217,  218,
      219,  220,  217,  217,  222,  217,  217,  217,  217,  217,
      217,  223,  227,  231,  222,  235,  222,  237,  239,  238,

      222,  241,  222,  240,  243,  244,  242,  249,  248,  251,
      239,  241,  231,  262,  227,  238,  242,  235,  255,  241,
      253,  237,  260,  240,  257,  258,  249,  251,  243,  259,
      253,  244,  248,  264,  257,  262,  255,  261,  263,  258,
      266,  260,  264,  261,  265,  269,  259,  270,  263,  277,
      265,  272,  273,  273,  279,  266,  281,  272,  274,  274,
      275,  275,  276,  276,  269,  278,  287,  277,  286,  282,
      288,  270,  279,  278,  281,  282,  286,  289,  290,  292,
      293,  291,  294,  295,  290,  296,  297,  303,  304,  295,
      287,  299,  300,  289,  288,  291,  298,  293,  294,  305,

      300,  299,  298,  306,  309,  296,  312,  292,  297,  310,
      313,  303,  304,  314,  315,  310,  312,  318,  326,  316,
      309,  317,  305,  319,  305,  323,  324,  327,  306,  328,
      330,  332,  313,  315,  316,  314,  318,  317,  333,  319,
      330,  334,  324,  326,  323,  332,  333,  335,  328,  336,
      337,  327,  339,  340,  606,  341,  342,  335,  344,  336,
      337,  345,  334,  348,  340,  341,  350,  342,  344,  345,
      347,  335,  352,  336,  350,  355,  339,  356,  359,  348,
      347,  357,  352,  358,  359,  360,  355,  362,  363,  356,
      364,  365,  357,  367,  370,  369,  375,  358,  374,  377,

      592,  589,  364,  360,  374,  375,  369,  378,  370,  362,
      363,  382,  384,  380,  379,  378,  385,  367,  369,  365,
      379,  380,  377,  381,  383,  386,  387,  388,  389,  381,
      390,  383,  384,  382,  392,  386,  385,  397,  390,  395,
      396,  400,  392,  399,  387,  401,  389,  398,  402,  406,
      403,  388,  404,  395,  396,  397,  408,  398,  400,  399,
      412,  407,  404,  409,  408,  410,  402,  406,  411,  401,
      403,  407,  414,  409,  412,  410,  415,  423,  411,  424,
      428,  425,  427,  432,  429,  435,  438,  439,  436,  437,
      424,  414,  441,  423,  429,  427,  436,  442,  437,  439,

      415,  425,  443,  432,  428,  444,  445,  447,  443,  435,
      438,  442,  448,  450,  451,  452,  441,  453,  454,  455,
      456,  447,  451,  461,  445,  466,  471,  453,  460,  444,
      584,  450,  465,  460,  460,  468,  448,  478,  455,  456,
      465,  454,  466,  469,  452,  468,  470,  461,  473,  479,
      471,  480,  470,  469,  482,  483,  473,  489,  495,  478,
      490,  496,  498,  497,  482,  499,  483,  479,  501,  480,
      503,  489,  497,  490,  495,  506,  498,  507,  508,  509,
      510,  512,  513,  499,  496,  514,  515,  516,  517,  503,
      510,  512,  501,  518,  519,  509,  521,  506,  517,  507,

      513,  514,  515,  522,  523,  508,  524,  525,  526,  516,
      523,  527,  524,  522,  528,  529,  518,  525,  519,  527,
      531,  534,  521,  532,  533,  536,  537,  529,  538,  539,
      545,  534,  526,  554,  546,  543,  548,  547,  528,  539,
      545,  536,  546,  548,  537,  531,  550,  532,  533,  543,
      551,  552,  538,  547,  550,  557,  551,  554,  558,  559,
      560,  557,  561,  562,  563,  552,  560,  564,  558,  566,
      565,  567,  563,  568,  569,  571,  573,  567,  572,  561,
      569,  574,  575,  559,  565,  566,  577,  576,  579,  568,
      571,  564,  575,  562,  580,  572,  573,  576,  581,  582,

      583,  585,  586,  587,  580,  574,  588,  593,  590,  591,
      577,  585,  594,  596,  581,  582,  583,  587,  579,  591,
      594,  595,  597,  593,  588,  599,  586,  590,  598,  600,
      601,  596,  602,  603,  604,  595,  605,  607,  611,  601,
      602,  603,  613,  617,  597,  578,  611,  598,  570,  599,
      556,  600,  613,  555,  553,  607,  549,  544,  542,  541,
      605,  540,  535,  530,  604,  617,  620,  620,  620,  620,
      620,  620,  620,  620,  621,  520,  621,  621,  621,  621,
      622,  511,  622,  622,  505,  622,  624,  504,  624,  624,
      624,  624,  624,  624,  625,  502,  625,  625,  500,  625,

      627,  627,  627,  627,  627,  627,  627,  627,  628,  494,
      628,  629,  629,  629,  493,  492,  491,  488,  487,  486,
      485,  484,  481,  477,  476,  475,  474,  472,  467,  464,
      463,  462,  459,  458,  457,  449,  446,  440,  434,  433,
      431,  430,  426,  422,  421,  420,  419,  418,  417,  416,
      413,  405,  394,  393,  391,  376,  373,  371,  368,  366,
      361,  354,  353,  351,  349,  346,  343,  338,  331,  325,
      322,  321,  320,  311,  308,  307,  302,  301,  285,  284,
      283,  280,  268,  256,  254,  252,  250,  247,  246,  245,
      236,  233,  232,  228,  226,  225,  224,  216,  215,  212,

      211,  209,  208,  207,  206,  205,  204,  202,  201,  187,
      186,  185,  169,  162,  157,  155,  152,  149,  148,  144,
      140,  122,   96,   85,   72,   61,   52,   49,   46,   45,
       40,   38,   14,    8,    7,    3,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[162] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int Upgrade_flex_debug;
int Upgrade_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *Upgradetext;
#line 1 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
/*===-- UpgradeLexer.l - Scanner for 1.9 assembly files --------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM 1.9 assembly languages files.
//  This doesn't handle long double constants, since LLVM 1.9 did not have them.
//
//===----------------------------------------------------------------------===*/
#line 29 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
#include "UpgradeInternals.h"
#include "llvm/Module.h"
#include <list>
#include "UpgradeParser.h"
#include <cctype>
#include <cstdlib>

#define YY_INPUT(buf,result,max_size) \
{ \
  if (LexInput->good() && !LexInput->eof()) { \
    LexInput->read(buf,max_size); \
    result = LexInput->gcount(); \
  } else {\
    result = YY_NULL; \
  } \
}

#define YY_NEVER_INTERACTIVE 1

// Construct a token value for a non-obsolete token
#define RET_TOK(type, Enum, sym) \
  Upgradelval.type = Enum; \
  return sym

#define RET_TY(sym,NewTY,sign) \
  Upgradelval.PrimType.T = NewTY; \
  switch (sign) { \
    case 0: Upgradelval.PrimType.S.makeSignless(); break; \
    case 1: Upgradelval.PrimType.S.makeUnsigned(); break; \
    case 2: Upgradelval.PrimType.S.makeSigned(); break; \
    default: assert(0 && "Invalid sign kind"); break; \
  }\
  return sym

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size

// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.  If AllowNull is set to false, a \00 value will cause
// an exception to be thrown.
//
// If AllowNull is set to true, the return value of the function points to the
// last character of the string in memory.
//
char *UnEscapeLexed(char *Buffer, bool AllowNull) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\' && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
      char Tmp = BIn[3]; BIn[3] = 0;     // Terminate string
      *BOut = (char)strtol(BIn+1, 0, 16);  // Convert to number
      if (!AllowNull && !*BOut)
        error("String literal cannot accept \\00 escape!");

      BIn[3] = Tmp;                  // Restore character
      BIn += 3;                      // Skip over handled chars
      ++BOut;
    } else {
      *BOut++ = *BIn++;
    }
  }

  return BOut;
}

// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      error("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      error("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  // Behave nicely in the face of C TBAA rules... see:
  // http://www.nullstone.com/htmls/category/aliastyp.htm
  union {
    uint64_t UI;
    double FP;
  } UIntToFP;
  UIntToFP.UI = HexIntToVal(Buffer);

  assert(sizeof(double) == sizeof(uint64_t) &&
         "Data sizes incompatible on this target!");
  return UIntToFP.FP;   // Cast Hex constant to double
}


} // End llvm namespace

using namespace llvm;

/* Comments start with a ; and go till end of line */
/* Variable(Value) identifiers start with a % sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* [PN]Integer: match positive and negative literal integer values that
 * are preceeded by a '%' character.  These represent unnamed variable slots.
 */
/* E[PN]Integer: match positive and negative literal integer values */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 1146 "UpgradeLexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int Upgradewrap (void );
#else
extern int Upgradewrap (void );
#endif
#endif

    static inline void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( Upgradetext, Upgradeleng, 1, Upgradeout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( Upgradein )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( Upgradein ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, Upgradein))==0 && ferror(Upgradein)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(Upgradein); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int Upgradelex (void);

#define YY_DECL int Upgradelex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after Upgradetext and Upgradeleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 195 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"


#line 1302 "UpgradeLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! Upgradein )
			Upgradein = stdin;

		if ( ! Upgradeout )
			Upgradeout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			Upgradeensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				Upgrade_create_buffer(Upgradein,YY_BUF_SIZE );
		}

		Upgrade_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of Upgradetext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 620 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 619 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < Upgradeleng; ++yyl )
				if ( Upgradetext[yyl] == '\n' )
					   
    Upgradelineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 197 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 199 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 200 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 201 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 202 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 203 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 204 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return GLOBAL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 205 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return CONSTANT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 206 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return INTERNAL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 207 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return LINKONCE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 208 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return WEAK; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 209 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return APPENDING; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 210 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 211 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 212 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 213 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERNAL; }    /* Deprecated, turn into external */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 214 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 215 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return IMPLEMENTATION; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 216 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 217 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 218 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNDEF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 219 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 220 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return TO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 221 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXCEPT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 222 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return NOT; }  /* Deprecated, turned into XOR */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 223 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return TAIL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 224 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return TARGET; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 225 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return TRIPLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 226 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 227 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ENDIAN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 228 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return POINTERSIZE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 229 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return DATALAYOUT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 230 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return LITTLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 231 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return BIG; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 232 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return VOLATILE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 233 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ALIGN;  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 234 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return SECTION; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 235 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return MODULE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 236 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 237 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 239 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return CC_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 240 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 241 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return CSRETCC_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 242 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 243 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 244 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return X86_STDCALLCC_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 245 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return X86_FASTCALLCC_TOK; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 247 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SBYTE,  Type::Int8Ty,  2); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 248 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UBYTE,  Type::Int8Ty,  1); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 249 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UBYTE,  Type::Int8Ty,  1); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 250 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SHORT,  Type::Int16Ty, 2); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 251 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(USHORT, Type::Int16Ty, 1); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 252 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(USHORT, Type::Int16Ty, 1); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 253 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(INT,    Type::Int32Ty, 2); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 254 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UINT,   Type::Int32Ty, 1); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 255 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UINT,   Type::Int32Ty, 1); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 256 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LONG,   Type::Int64Ty, 2); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 257 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(ULONG,  Type::Int64Ty, 1); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 258 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(ULONG,  Type::Int64Ty, 1); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 259 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(VOID,   Type::VoidTy,  0); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 260 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(BOOL,   Type::Int1Ty,  1); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 261 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(BOOL,   Type::Int1Ty,  1); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 262 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(FLOAT,  Type::FloatTy, 0); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 263 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(DOUBLE, Type::DoubleTy,0); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 264 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LABEL,  Type::LabelTy, 0); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 265 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return TYPE;   }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 266 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return OPAQUE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 268 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, AddOp, ADD); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 269 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SubOp, SUB); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 270 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, MulOp, MUL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 271 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, DivOp,  DIV); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 272 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, UDivOp, UDIV); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 273 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SDivOp, SDIV); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 274 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, FDivOp, FDIV); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 275 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, RemOp,  REM); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 276 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, URemOp, UREM); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 277 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SRemOp, SREM); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 278 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, FRemOp, FREM); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 279 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, AndOp, AND); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 280 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, OrOp , OR ); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 281 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, XorOp, XOR); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 282 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetNE, SETNE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 283 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetEQ, SETEQ); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 284 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetLT, SETLT); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 285 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetGT, SETGT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 286 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetLE, SETLE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 287 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetGE, SETGE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 288 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, ShlOp, SHL); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 289 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, ShrOp, SHR); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 290 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, LShrOp, LSHR); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 291 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, AShrOp, ASHR); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 293 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ICmpOp, ICMP); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 294 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, FCmpOp, FCMP); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 296 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return EQ; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 297 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return NE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 298 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return SLT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 299 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return SGT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 300 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return SLE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 301 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return SGE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 302 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ULT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 303 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return UGT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 304 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ULE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 305 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return UGE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 306 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return OEQ; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 307 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ONE; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 308 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return OLT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 309 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return OGT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 310 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return OLE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 311 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return OGE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 312 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return ORD; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 313 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNO; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 314 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return UEQ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 315 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 317 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, PHIOp, PHI_TOK); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 318 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, CallOp, CALL); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 319 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, CastOp, CAST);  }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 320 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, TruncOp, TRUNC); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 321 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, ZExtOp , ZEXT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 322 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, SExtOp, SEXT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 323 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPTruncOp, FPTRUNC); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 324 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPExtOp, FPEXT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 325 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPToUIOp, FPTOUI); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 326 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPToSIOp, FPTOSI); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 327 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, UIToFPOp, UITOFP); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 328 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, SIToFPOp, SITOFP); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 329 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, PtrToIntOp, PTRTOINT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 330 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, IntToPtrOp, INTTOPTR); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 331 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, BitCastOp, BITCAST); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 332 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, SelectOp, SELECT); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 333 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return VANEXT_old; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 334 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return VAARG_old; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 335 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 336 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, RetOp, RET); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 337 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, BrOp, BR); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 338 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, SwitchOp, SWITCH); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 339 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, InvokeOp, INVOKE); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 340 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNWIND; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 341 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, UnreachableOp, UNREACHABLE); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 343 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, MallocOp, MALLOC); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 344 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, AllocaOp, ALLOCA); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 345 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, FreeOp, FREE); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 346 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, LoadOp, LOAD); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 347 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, StoreOp, STORE); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 348 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, GetElementPtrOp, GETELEMENTPTR); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 350 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ExtractElementOp, EXTRACTELEMENT); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 351 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, InsertElementOp, INSERTELEMENT); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 352 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ShuffleVectorOp, SHUFFLEVECTOR); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 355 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{
                  UnEscapeLexed(Upgradetext+1);
                  Upgradelval.StrVal = strdup(Upgradetext+1);             // Skip %
                  return VAR_ID;
                }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 360 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{
                  Upgradetext[strlen(Upgradetext)-1] = 0;  // nuke colon
                  UnEscapeLexed(Upgradetext);
                  Upgradelval.StrVal = strdup(Upgradetext);
                  return LABELSTR;
                }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 366 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{
                  Upgradetext[strlen(Upgradetext)-2] = 0;  // nuke colon, end quote
                  UnEscapeLexed(Upgradetext+1);
                  Upgradelval.StrVal = strdup(Upgradetext+1);
                  return LABELSTR;
                }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 373 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ // Note that we cannot unescape a string constant here!  The
                   // string constant might contain a \00 which would not be
                   // understood by the string stuff.  It is valid to make a
                   // [sbyte] c"Hello World\00" constant, for example.
                   //
                   Upgradetext[strlen(Upgradetext)-1] = 0;           // nuke end quote
                   Upgradelval.StrVal = strdup(Upgradetext+1);  // Nuke start quote
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 384 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.UInt64Val = atoull(Upgradetext); return EUINT64VAL; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 385 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(Upgradetext+1);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT64_MAX+1)
                    error("Constant too large for signed 64 bits!");
                  Upgradelval.SInt64Val = -Val;
                  return ESINT64VAL;
                }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 393 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{
                   Upgradelval.UInt64Val = HexIntToVal(Upgradetext+3);
                   return Upgradetext[0] == 's' ? ESINT64VAL : EUINT64VAL;
                 }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 398 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(Upgradetext+1);
                  if ((unsigned)Val != Val)
                    error("Invalid value number (too large)!");
                  Upgradelval.UIntVal = unsigned(Val);
                  return UINTVAL;
                }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 405 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(Upgradetext+2);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT32_MAX+1)
                    error("Constant too large for signed 32 bits!");
                  Upgradelval.SIntVal = (int)-Val;
                  return SINTVAL;
                }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 414 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.FPVal = new APFloat(atof(Upgradetext)); return FPVAL; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 415 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.FPVal = new APFloat(HexToFP(Upgradetext)); 
                  return FPVAL; 
                }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 419 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  Upgrade_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 427 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 428 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
{ return Upgradetext[0]; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 430 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2256 "UpgradeLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed Upgradein at a new source and called
			 * Upgradelex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = Upgradein;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( Upgradewrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * Upgradetext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of Upgradelex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Upgraderealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			Upgraderestart(Upgradein  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 620 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 620 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 619);

	return yy_is_jam ? 0 : yy_current_state;
}

    static inline void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up Upgradetext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --Upgradelineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					Upgraderestart(Upgradein );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( Upgradewrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve Upgradetext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    Upgradelineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void Upgraderestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        Upgradeensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            Upgrade_create_buffer(Upgradein,YY_BUF_SIZE );
	}

	Upgrade_init_buffer(YY_CURRENT_BUFFER,input_file );
	Upgrade_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void Upgrade_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		Upgradepop_buffer_state();
	 *		Upgradepush_buffer_state(new_buffer);
     */
	Upgradeensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	Upgrade_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (Upgradewrap()) processing, but the only time this flag
	 * is looked at is after Upgradewrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void Upgrade_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	Upgradein = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE Upgrade_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Upgradealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Upgrade_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Upgradealloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in Upgrade_create_buffer()" );

	b->yy_is_our_buffer = 1;

	Upgrade_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with Upgrade_create_buffer()
 * 
 */
    void Upgrade_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Upgradefree((void *) b->yy_ch_buf  );

	Upgradefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a Upgraderestart() or at EOF.
 */
    static void Upgrade_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	Upgrade_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then Upgrade_init_buffer was _probably_
     * called from Upgraderestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void Upgrade_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		Upgrade_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void Upgradepush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	Upgradeensure_buffer_stack();

	/* This block is copied from Upgrade_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from Upgrade_switch_to_buffer. */
	Upgrade_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void Upgradepop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	Upgrade_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		Upgrade_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void Upgradeensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Upgradealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Upgraderealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE Upgrade_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) Upgradealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Upgrade_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	Upgrade_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to Upgradelex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       Upgrade_scan_bytes() instead.
 */
YY_BUFFER_STATE Upgrade_scan_string (yyconst char * yystr )
{
    
	return Upgrade_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to Upgradelex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE Upgrade_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) Upgradealloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in Upgrade_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = Upgrade_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in Upgrade_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up Upgradetext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		Upgradetext[Upgradeleng] = (yy_hold_char); \
		(yy_c_buf_p) = Upgradetext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		Upgradeleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int Upgradeget_lineno  (void)
{
        
    return Upgradelineno;
}

/** Get the input stream.
 * 
 */
FILE *Upgradeget_in  (void)
{
        return Upgradein;
}

/** Get the output stream.
 * 
 */
FILE *Upgradeget_out  (void)
{
        return Upgradeout;
}

/** Get the length of the current token.
 * 
 */
int Upgradeget_leng  (void)
{
        return Upgradeleng;
}

/** Get the current token.
 * 
 */

char *Upgradeget_text  (void)
{
        return Upgradetext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void Upgradeset_lineno (int  line_number )
{
    
    Upgradelineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see Upgrade_switch_to_buffer
 */
void Upgradeset_in (FILE *  in_str )
{
        Upgradein = in_str ;
}

void Upgradeset_out (FILE *  out_str )
{
        Upgradeout = out_str ;
}

int Upgradeget_debug  (void)
{
        return Upgrade_flex_debug;
}

void Upgradeset_debug (int  bdebug )
{
        Upgrade_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from Upgradelex_destroy(), so don't allocate here.
     */

    /* We do not touch Upgradelineno unless the option is enabled. */
    Upgradelineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    Upgradein = stdin;
    Upgradeout = stdout;
#else
    Upgradein = (FILE *) 0;
    Upgradeout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * Upgradelex_init()
     */
    return 0;
}

/* Upgradelex_destroy is for both reentrant and non-reentrant scanners. */
int Upgradelex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		Upgrade_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		Upgradepop_buffer_state();
	}

	/* Destroy the stack itself. */
	Upgradefree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * Upgradelex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Upgradealloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Upgraderealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Upgradefree (void * ptr )
{
	free( (char *) ptr );	/* see Upgraderealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 430 "/Users/sabre/llvm/tools/llvm-upgrade/UpgradeLexer.l"



