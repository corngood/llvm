#define yy_create_buffer Upgrade_create_buffer
#define yy_delete_buffer Upgrade_delete_buffer
#define yy_scan_buffer Upgrade_scan_buffer
#define yy_scan_string Upgrade_scan_string
#define yy_scan_bytes Upgrade_scan_bytes
#define yy_flex_debug Upgrade_flex_debug
#define yy_init_buffer Upgrade_init_buffer
#define yy_flush_buffer Upgrade_flush_buffer
#define yy_load_buffer_state Upgrade_load_buffer_state
#define yy_switch_to_buffer Upgrade_switch_to_buffer
#define yyin Upgradein
#define yyleng Upgradeleng
#define yylex Upgradelex
#define yyout Upgradeout
#define yyrestart Upgraderestart
#define yytext Upgradetext
#define yylineno Upgradelineno

#line 20 "UpgradeLexer.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE (16384*64)

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static inline void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
static yyconst short int yy_acclist[234] =
    {   0,
      157,  155,  156,  154,  155,  156,  154,  156,  155,  156,
      155,  156,  155,  156,  155,  156,  155,  156,  155,  156,
      147,  155,  156,  147,  155,  156,    1,  155,  156,  155,
      156,  155,  156,  155,  156,  155,  156,  155,  156,  155,
      156,  155,  156,  155,  156,  155,  156,  155,  156,  155,
      156,  155,  156,  155,  156,  155,  156,  155,  156,  155,
      156,  155,  156,  155,  156,  155,  156,  155,  156,  155,
      156,  146,  144,  143,  143,  150,  148,  152,  147,    1,
      129,   41,   85,   86,   75,   23,  146,  143,  143,  151,
      152,   20,  152,  153,   63,   74,   39,   34,   42,   66,

        3,   52,   65,   25,   95,  100,   98,   99,   97,   96,
      101,  105,   70,  128,   90,   88,  121,  122,   89,   87,
       64,  103,   94,   92,   93,   91,  104,  102,   76,  145,
      152,  152,  124,   57,  106,  107,   84,   69,  136,   73,
       83,  137,   54,  123,   22,  149,   68,  110,   72,   26,
        4,   61,   67,   53,   71,   56,   11,  109,  152,   36,
        2,    5,   58,  112,   60,   48,   78,   82,   80,   81,
       79,   77,   50,  138,  108,   49,   55,   21,  126,  135,
       45,   59,   30,   24,   44,  114,  113,    7,  131,   33,
      134,   38,   62,  120,  116,  130,   27,   28,  115,  132,

       51,  127,  125,  119,   43,    6,   29,  111,   37,    8,
       17,    9,  118,   10,  117,   35,   12,   14,   13,   32,
       40,   15,   31,  133,  139,  141,  142,   16,   46,  140,
       18,   47,   19
    } ;

static yyconst short int yy_accept[611] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   24,   27,   30,   32,   34,   36,   38,
       40,   42,   44,   46,   48,   50,   52,   54,   56,   58,
       60,   62,   64,   66,   68,   70,   72,   72,   73,   73,
       74,   75,   76,   77,   77,   78,   78,   79,   80,   80,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,
       82,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       85,   85,   85,   85,   85,   85,   85,   85,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   88,   89,   91,   92,   93,   94,
       94,   95,   96,   96,   96,   97,   97,   97,   98,   98,
       99,   99,   99,   99,   99,  100,  100,  100,  100,  100,
      100,  100,  101,  101,  101,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  104,  105,  105,  106,  107,  108,  109,  110,  111,

      111,  112,  113,  113,  113,  114,  115,  115,  115,  115,
      115,  115,  115,  115,  116,  117,  118,  118,  119,  119,
      119,  119,  120,  121,  121,  121,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  123,  124,  125,  125,  125,
      126,  126,  127,  127,  128,  128,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  130,  130,
      130,  131,  132,  132,  132,  132,  133,  133,  133,  133,
      134,  134,  134,  135,  136,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  138,  139,  139,  139,  139,  139,  140,  141,  141,

      141,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      143,  144,  145,  145,  145,  146,  146,  146,  146,  147,
      147,  148,  148,  148,  148,  148,  148,  148,  149,  149,
      149,  149,  149,  150,  150,  150,  151,  151,  151,  152,
      152,  153,  153,  154,  155,  155,  155,  155,  155,  155,
      155,  156,  156,  156,  156,  156,  157,  157,  158,  158,
      158,  159,  160,  161,  161,  161,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  163,  163,  164,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  166,  166,  166,  166,  166,

      166,  166,  166,  167,  167,  167,  168,  169,  170,  171,
      172,  173,  174,  174,  174,  174,  175,  175,  175,  175,
      176,  177,  177,  178,  179,  179,  179,  179,  179,  179,
      180,  180,  180,  180,  180,  180,  181,  181,  181,  182,
      182,  182,  182,  182,  182,  182,  182,  183,  184,  185,
      185,  185,  186,  187,  188,  188,  188,  189,  189,  189,
      189,  189,  190,  190,  191,  192,  193,  194,  194,  194,
      194,  195,  195,  195,  196,  197,  198,  199,  200,  200,
      200,  201,  202,  203,  204,  204,  204,  204,  204,  204,
      205,  205,  206,  206,  207,  208,  208,  208,  208,  208,

      208,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      211,  211,  211,  211,  211,  212,  212,  212,  212,  212,
      213,  214,  215,  215,  216,  216,  216,  216,  216,  217,
      217,  217,  217,  218,  218,  219,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      221,  221,  221,  221,  221,  221,  221,  221,  222,  222,
      222,  222,  222,  222,  223,  223,  223,  223,  223,  224,
      224,  224,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  226,  226,  227,  228,

      229,  229,  230,  230,  231,  232,  233,  233,  234,  234
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,    1,   16,   16,   16,   16,   17,   16,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,    5,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[44] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    3,
        3,    3,    3,    4,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst short int yy_base[615] =
    {   0,
        0,    0, 1308, 1309, 1309, 1309, 1303, 1292,   36,   40,
       44,   50,   56,   62,    0,   63,   66,   81,   89,   47,
      108,   91,  105,   96,  119,  117,  144,  128,   68,  170,
      169,  202,   92,  111,  131,  125, 1301, 1309, 1290, 1309,
        0,  207,  229,  234,  239,   70,  244,  259,  264,    0,
      139,  145,  142,   76,  136,  156,  157,   31, 1289,  162,
      164,  192,   48,  172,  268,  175,  173,  221,  212, 1288,
      276,  278,  138,  186,   72,  279,  277,  280,  289,  249,
      282,  290,  216,  281,  291,  189,  294,  284,  295, 1287,
      297,  306,   73,  305,  316,  317,  246,  311,  318,  322,

      323,  324,  327,  329,  330,  338,  332,  348,  350,  333,
      337,  334,  362,  336,  364, 1286,  367,  351,  359,  371,
      374,  379,  375,  381,  405,  386,  389,  403,  396,  378,
      250,  376,  400, 1285,    0,  436,  440, 1284,  454,  471,
        0, 1283,  382,  406, 1282,  410,  425, 1281,  415, 1280,
      422,  430,  440,  456, 1279,  458,  459,  473,  412,  447,
      460, 1278,  474,  442,  472,  477,  480,  476,  461,  478,
      416,  488,  490,  491,  494,  495,  496,  492,  499,  506,
      507,  500,  513,  505,  508,  520,  521,  523,  524,  525,
     1277, 1276,  526, 1275, 1274, 1273, 1272, 1271, 1270,  527,

     1269, 1268,  529,  533, 1267, 1266,  561,  538,  537,  542,
      534,  572,  550, 1265, 1264, 1263,  553, 1262,  535,  575,
      536, 1261, 1260,  576,  577, 1259,  555,  579,  540,  580,
      586,  582,  585,  588, 1258, 1257, 1256,  593,  596, 1255,
      590, 1254,  597, 1253,  600, 1252,  601,  602,  604,  605,
      619,  609,  612,  618,  622,  611,  214, 1251,  628,  629,
     1309,  635,  643,  651,  657,  662,  651,  663,  664, 1250,
      665,  666, 1249, 1248, 1247,  667,  669,  672,  673,  675,
      676,  677,  678,  683,  679,  686,  685,  691,  690,  693,
     1246, 1245,  687,  697,  701,  702, 1244, 1243,  703,  707,

     1242,  708,  709,  711,  713,  714,  719,  715,  721, 1241,
     1240, 1239,  722,  724, 1238,  727,  729,  735,    0,  737,
     1237,  741,  738,  742,  747,  748,  749, 1236,  743,  635,
      750,  755, 1235,  760,  761, 1234,  763,  764, 1233,  767,
     1232,  773, 1231, 1230,  775,  776,  778,  777,  781,  780,
     1229,  783,  784,  789,  791, 1228,  792, 1227,  798,  793,
     1226,  813, 1225,  794,  795, 1224,  801,  807,  816,  817,
      822,  813,  796,  819,  825,  826,  828,  829,  830,  832,
     1223,  833, 1222, 1221,  836,  837,  831,  842,  841,  843,
      846,  853,  854,  855, 1220,  857,  858,  861,  862,  863,

      866,  865, 1219,  876,  860, 1218, 1217, 1216, 1215, 1214,
     1213, 1212,  877,  879,  880, 1211,  881,  882,  886, 1210,
     1209,  884, 1208, 1207,  885,  890,  888,  887,  891, 1206,
      898,  900,  901,  904,  907, 1205,  909,  911, 1204,  912,
      916,  716,  917,  914,  915,  919, 1203, 1202, 1201,  935,
      918, 1200, 1199, 1198,  925,  928, 1197,  938,  942,  943,
      930, 1196,  945, 1195, 1194, 1193, 1192,  946,  949,  954,
     1191,  950,  955, 1190, 1189, 1188, 1187, 1186,  956,  958,
     1185, 1184, 1183, 1182,  957,  960,  968,  961,  962, 1181,
      963, 1180,  973, 1179, 1178,  964,  975,  977,  978,  980,

     1177,  981,  983,  984,  987,  988,  992,  994,  995, 1176,
      997,  998, 1005, 1006, 1004, 1008, 1012, 1014,  920, 1175,
     1015, 1017, 1020, 1021, 1174, 1023, 1024, 1025, 1026, 1171,
     1162, 1160, 1029, 1159, 1027, 1044, 1032, 1028, 1158, 1045,
     1049, 1033, 1157, 1050, 1155, 1154, 1053, 1055, 1056, 1057,
     1059, 1060, 1061, 1063, 1065, 1066, 1067, 1069, 1071, 1152,
     1074, 1077, 1080, 1082, 1083, 1085, 1087, 1148, 1090, 1091,
     1096, 1097, 1098, 1147, 1095, 1101, 1102, 1103, 1145, 1107,
     1108, 1140, 1106, 1109, 1114, 1118, 1122, 1123, 1126, 1129,
     1128, 1130, 1131, 1132, 1133, 1070, 1134,  643,  552,  548,

     1139,  444, 1144,  360,  285,  252, 1142,  133, 1309, 1177,
     1179,  143, 1183,   57
    } ;

static yyconst short int yy_def[615] =
    {   0,
      609,    1,  609,  609,  609,  609,  610,  611,  612,  609,
      611,  611,  611,  611,  613,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  610,  609,  611,  609,
      614,  614,  609,  609,  611,  611,  611,  611,  611,  613,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  609,  614,  614,  609,  611,  611,  611,
       49,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,   49,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      609,  609,  609,  609,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  207,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  609,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,    0,  609,
      609,  609,  609,  609
    } ;

static yyconst short int yy_nxt[1353] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,    8,    8,    8,   16,   17,
       18,   19,   20,   21,   22,    8,   23,    8,   24,   25,
       26,   27,   28,    8,   29,   30,   31,   32,   33,   34,
       35,    8,   36,   42,   40,   43,   43,   43,   43,   44,
       44,   44,   44,   45,   45,   45,   45,   40,   46,  135,
       40,   40,  152,   40,   47,   48,   48,   48,   48,   40,
       47,   48,   48,   48,   48,   40,   40,   69,  138,   40,
       70,   40,  158,   40,   51,   40,   40,   71,   56,   40,
      102,   52,   57,   53,   40,   54,   49,   58,   55,   60,

       59,   61,   40,  172,   40,   40,  194,   64,  146,   40,
      128,   65,   62,   78,   83,   66,   63,   67,   40,   79,
       68,   40,   84,  129,   40,   80,   72,   85,   73,   74,
       40,   86,   40,  130,   81,   82,   75,   87,   40,   90,
       76,   40,   77,  131,   40,   41,   40,  133,   91,   40,
       88,   40,   40,   99,   92,   40,   89,   40,   40,  100,
      142,  147,  132,  145,  101,  148,   93,  170,   94,   40,
       40,  143,   95,  144,   96,   40,   97,   40,   98,  103,
      149,  150,   40,   40,  155,   40,   40,  115,   40,  104,
      153,  105,  106,  151,  107,  108,  109,  154,  110,   40,

      116,  163,   40,  117,  111,   40,  112,  113,  159,  114,
      118,  103,  171,  162,  188,   40,  136,  136,  136,  136,
      156,  119,  157,  120,  121,   40,  122,   40,  123,   40,
      124,  359,  125,  165,   40,  183,  126,  127,   43,   43,
       43,   43,  137,   44,   44,   44,   44,   47,   45,   45,
       45,   45,   40,  139,  139,  139,  139,   40,  164,   40,
      140,  257,   40,   40,  200,   40,  140,   47,   48,   48,
       48,   48,   40,  141,  141,  141,  141,   40,  178,  141,
      141,   40,  141,  141,  141,  141,  141,  141,  160,   40,
       40,   40,   40,   40,   40,   40,  166,   40,   40,  175,

      161,  173,   40,   40,   40,  190,  168,   40,   40,  186,
       40,  184,  167,  169,  179,  174,  176,  185,   40,   40,
      177,  187,  189,  191,   40,  180,  181,  195,  182,   40,
       40,   40,  201,  192,  193,   40,   40,   40,  197,  199,
       40,  196,   40,   40,  202,   40,   40,   40,  203,   40,
       40,   40,  198,  205,  214,  222,  209,  204,  210,  224,
      206,   40,  227,   40,   40,  225,  211,  207,  215,  223,
      208,  220,   40,   40,  212,   40,  216,   40,  213,  217,
       40,  226,  218,  232,   40,  219,  221,   40,   40,   40,
      228,   40,   40,  230,   40,   40,  256,  234,  229,   40,

      233,  236,   40,  240,  231,  238,  267,  235,  249,   40,
      258,  239,  241,   40,  250,  237,   40,  242,   40,   40,
      251,  252,  254,   40,  255,   40,  243,  244,   40,   40,
      279,  245,  269,  253,  259,   40,  246,  268,   40,  247,
      260,  271,  272,   40,  248,  136,  136,  136,  136,  262,
      262,  262,  262,   40,  292,   40,  263,   40,  273,  270,
       40,  284,  263,  139,  139,  139,  139,   40,  274,   40,
      140,   40,   40,   40,   40,  280,  140,  264,  265,  276,
      266,  266,  266,  266,   40,   40,   40,   40,  281,   40,
       40,   40,  275,   40,  277,  278,  282,  290,  285,  286,

      283,   40,  287,   40,   40,   40,  293,   40,   40,   40,
      291,  289,   40,   40,  288,  300,  297,  299,   40,   40,
       40,   40,  295,  298,  301,  296,   40,  302,  303,  304,
      294,  306,  308,   40,   40,  307,   40,   40,   40,   40,
       40,  310,   40,  305,  309,  311,   40,   40,   40,   40,
       40,   40,  313,   40,  315,   40,  323,  312,  330,  317,
      316,   40,  314,   40,  337,   40,   40,  332,   40,  318,
      319,  319,  319,  319,  320,  321,  319,  319,  322,  319,
      319,  319,  319,  319,  319,   40,  328,  329,   40,   40,
       40,  335,   40,   40,  324,   40,  325,  331,   40,   40,

      326,   40,  327,   40,  341,  333,   40,  336,  339,   40,
       40,  334,  338,   40,   40,   40,  340,   40,   40,  347,
      346,  342,   40,  349,   40,   40,  343,  345,  350,  344,
      348,   40,   40,  351,  355,   40,  352,  353,  358,  356,
      357,   40,   40,  354,  262,  262,  262,  262,   40,  264,
      264,  263,  362,  362,  362,  362,   40,  263,  413,  360,
      362,  362,  362,  362,   40,  361,  266,  266,  266,  266,
       40,  266,  266,  266,  266,   40,   40,   40,   40,   40,
       40,  363,   40,  364,  367,   40,   40,  368,   40,   40,
       40,   40,   40,  372,  365,  366,   40,  377,   40,   40,

       40,  371,  373,   40,   40,  369,   40,  375,  370,  380,
       40,  376,  381,  382,   40,   40,   40,  374,  378,  379,
       40,   40,   40,  383,   40,  389,   40,   40,   40,   40,
      390,  388,   40,  384,   40,   40,  385,   40,  386,  387,
       40,  394,   40,  391,  393,  392,  396,  395,   40,  397,
       40,   40,  399,  398,   40,   40,   40,  493,  405,  403,
       40,   40,   40,   40,  400,  401,  402,  404,   40,  407,
      409,  411,  414,   40,   40,  406,   40,   40,  415,  412,
       40,  417,  416,  408,  410,  418,   40,  420,   40,   40,
       40,   40,  419,   40,   40,  421,   40,   40,  422,  426,

      423,  424,   40,  425,   40,   40,   40,   40,   40,   40,
      427,   40,  436,  430,   40,  444,  437,  428,  429,  435,
       40,  433,  362,  362,  362,  362,   40,  439,  432,   40,
       40,  431,   40,  434,  440,   40,  438,  441,   40,   40,
      442,   40,   40,   40,   40,   40,   40,  443,  447,   40,
       40,  445,  451,  452,   40,   40,   40,  446,  448,   40,
      450,  455,  453,  454,  456,  449,   40,   40,   40,  457,
       40,   40,  458,   40,   40,   40,   40,  462,   40,   40,
      464,  465,  459,  460,  466,  467,  461,  463,  468,   40,
       40,  469,   40,   40,   40,   40,  471,   40,   40,   40,

       40,   40,  473,   40,   40,  472,  475,  470,  477,  481,
      480,   40,  474,   40,   40,  483,  478,   40,  476,  486,
       40,  479,   40,  482,   40,   40,  485,   40,   40,   40,
       40,   40,   40,   40,  484,  489,  492,  488,   40,  494,
      487,   40,  491,   40,  543,  501,  496,  490,   40,  495,
      497,   40,  498,  499,  500,   40,   40,  502,   40,   40,
      503,  505,   40,   40,  504,  507,  506,   40,   40,   40,
       40,   40,  511,   40,   40,   40,   40,   40,  512,  509,
      508,   40,  513,  514,  510,  515,   40,  518,   40,  517,
       40,   40,  519,   40,   40,  516,   40,   40,  522,  520,

       40,   40,  526,  527,  521,   40,  525,   40,   40,  523,
       40,   40,  529,  528,  532,  530,  524,   40,   40,   40,
      536,   40,  531,  537,  538,   40,  539,   40,   40,  533,
       40,  534,  541,   40,   40,  535,   40,   40,   40,   40,
       40,   40,   40,  547,  540,   40,   40,  556,  551,  553,
      542,  548,  544,  545,  549,  552,  546,   40,   40,  559,
      555,  550,   40,   40,  554,  557,   40,  558,   40,   40,
       40,  561,   40,   40,   40,  564,   40,  562,   40,   40,
       40,  567,   40,   40,   40,  571,  560,   40,  565,  573,
       40,  569,  563,   40,  570,   40,   40,  572,   40,  568,

       40,  574,  566,   40,   40,  578,  575,  579,   40,   40,
       40,   40,  576,  582,   40,   40,   40,  586,  577,   40,
       40,   40,   40,  580,  583,  584,  585,   40,  588,  593,
      591,   40,  581,  589,  592,   40,   40,  587,  590,   40,
      594,   40,   40,   40,   40,   40,   40,   40,  595,  600,
      601,  602,   40,   40,  597,   40,  596,   40,   40,  606,
       40,   40,  598,  599,  605,   40,  607,   40,   40,  604,
       40,   40,   40,   40,  603,   40,  608,   37,   37,   37,
       37,   39,   39,   50,   40,   50,   50,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,  261,   40,

       40,   40,   40,   40,  134,   40,   38,  609,    3,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609
    } ;

static yyconst short int yy_chk[1353] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   58,    9,    9,    9,    9,   10,
       10,   10,   10,   11,   11,   11,   11,   11,   12,  614,
       20,   63,   58,   12,   13,   13,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   16,   20,   46,   17,
       20,   29,   63,   46,   16,   75,   93,   20,   17,   54,
       29,   16,   17,   16,   18,   16,   13,   17,   16,   18,

       17,   18,   19,   75,   22,   33,   93,   19,   54,   24,
       33,   19,   18,   22,   24,   19,   18,   19,   23,   22,
       19,   21,   24,   33,   34,   23,   21,   24,   21,   21,
       26,   24,   25,   34,   23,   23,   21,   25,   36,   26,
       21,   28,   21,   35,   35,  612,  608,   36,   26,   55,
       25,   73,   51,   28,   26,   53,   25,   27,   52,   28,
       51,   55,   35,   53,   28,   55,   27,   73,   27,   56,
       57,   52,   27,   52,   27,   60,   27,   61,   27,   30,
       56,   57,   31,   30,   61,   64,   67,   31,   66,   30,
       60,   30,   30,   57,   30,   30,   30,   60,   30,   74,

       31,   67,   86,   31,   30,   62,   30,   30,   64,   30,
       31,   32,   74,   66,   86,   32,   42,   42,   42,   42,
       62,   32,   62,   32,   32,   69,   32,  257,   32,   83,
       32,  257,   32,   69,   68,   83,   32,   32,   43,   43,
       43,   43,   44,   44,   44,   44,   44,   45,   45,   45,
       45,   45,   45,   47,   47,   47,   47,   47,   68,   97,
       47,  131,   80,  131,   97,  606,   47,   48,   48,   48,
       48,   48,   48,   49,   49,   49,   49,   49,   80,   49,
       49,   65,   49,   49,   49,   49,   49,   49,   65,   71,
       77,   72,   76,   78,   84,   81,   71,   88,  605,   77,

       65,   76,   79,   82,   85,   88,   72,   87,   89,   85,
       91,   84,   71,   72,   81,   76,   78,   84,   94,   92,
       79,   85,   87,   89,   98,   82,   82,   94,   82,   95,
       96,   99,   98,   91,   92,  100,  101,  102,   95,   96,
      103,   94,  104,  105,   99,  107,  110,  112,  100,  114,
      111,  106,   95,  102,  107,  110,  105,  101,  106,  111,
      102,  108,  114,  109,  118,  112,  106,  103,  107,  110,
      104,  109,  119,  604,  106,  113,  108,  115,  106,  108,
      117,  113,  108,  118,  120,  108,  109,  121,  123,  132,
      115,  130,  122,  117,  124,  143,  130,  120,  115,  126,

      119,  122,  127,  124,  117,  123,  143,  121,  126,  129,
      132,  123,  124,  133,  127,  122,  128,  124,  125,  144,
      128,  128,  129,  146,  129,  159,  125,  125,  149,  171,
      159,  125,  146,  128,  133,  151,  125,  144,  147,  125,
      133,  149,  151,  152,  125,  136,  136,  136,  136,  137,
      137,  137,  137,  153,  171,  164,  137,  602,  152,  147,
      160,  164,  137,  139,  139,  139,  139,  139,  153,  154,
      139,  156,  157,  161,  169,  160,  139,  140,  140,  156,
      140,  140,  140,  140,  140,  165,  158,  163,  161,  168,
      166,  170,  154,  167,  157,  158,  163,  169,  165,  166,

      163,  172,  167,  173,  174,  178,  172,  175,  176,  177,
      170,  168,  179,  182,  167,  177,  175,  176,  184,  180,
      181,  185,  174,  175,  178,  174,  183,  179,  180,  181,
      173,  182,  184,  186,  187,  183,  188,  189,  190,  193,
      200,  186,  203,  181,  185,  187,  204,  211,  219,  221,
      209,  208,  189,  229,  193,  210,  211,  188,  219,  203,
      200,  600,  190,  213,  229,  599,  217,  221,  227,  204,
      207,  207,  207,  207,  208,  209,  207,  207,  210,  207,
      207,  207,  207,  207,  207,  212,  213,  217,  220,  224,
      225,  227,  228,  230,  212,  232,  212,  220,  233,  231,

      212,  234,  212,  241,  232,  224,  238,  228,  231,  239,
      243,  225,  230,  245,  247,  248,  231,  249,  250,  243,
      241,  233,  252,  247,  256,  253,  234,  239,  248,  238,
      245,  254,  251,  249,  253,  255,  250,  251,  256,  254,
      255,  259,  260,  252,  262,  262,  262,  262,  330,  263,
      263,  262,  263,  263,  263,  263,  598,  262,  330,  259,
      264,  264,  264,  264,  267,  260,  265,  265,  265,  265,
      265,  266,  266,  266,  266,  266,  268,  269,  271,  272,
      276,  267,  277,  268,  272,  278,  279,  276,  280,  281,
      282,  283,  285,  280,  269,  271,  284,  285,  287,  286,

      293,  279,  281,  289,  288,  277,  290,  283,  278,  288,
      294,  284,  289,  290,  295,  296,  299,  282,  286,  287,
      300,  302,  303,  293,  304,  300,  305,  306,  308,  442,
      302,  299,  307,  294,  309,  313,  295,  314,  295,  296,
      316,  306,  317,  303,  305,  304,  308,  307,  318,  309,
      320,  323,  314,  313,  322,  324,  329,  442,  323,  320,
      325,  326,  327,  331,  316,  317,  318,  322,  332,  325,
      326,  327,  331,  334,  335,  324,  337,  338,  332,  329,
      340,  335,  334,  325,  326,  337,  342,  340,  345,  346,
      348,  347,  338,  350,  349,  342,  352,  353,  345,  349,

      346,  347,  354,  348,  355,  357,  360,  364,  365,  373,
      350,  359,  364,  354,  367,  373,  365,  352,  353,  360,
      368,  359,  362,  362,  362,  362,  372,  368,  357,  369,
      370,  355,  374,  359,  369,  371,  367,  370,  375,  376,
      371,  377,  378,  379,  387,  380,  382,  372,  376,  385,
      386,  374,  380,  382,  389,  388,  390,  375,  377,  391,
      379,  387,  385,  386,  388,  378,  392,  393,  394,  389,
      396,  397,  390,  405,  398,  399,  400,  394,  402,  401,
      397,  398,  391,  392,  399,  400,  393,  396,  401,  404,
      413,  402,  414,  415,  417,  418,  405,  422,  425,  419,

      428,  427,  414,  426,  429,  413,  417,  404,  419,  427,
      426,  431,  415,  432,  433,  429,  422,  434,  418,  433,
      435,  425,  437,  428,  438,  440,  432,  444,  445,  441,
      443,  451,  446,  519,  431,  437,  441,  435,  455,  443,
      434,  456,  440,  461,  519,  455,  445,  438,  450,  444,
      446,  458,  450,  450,  451,  459,  460,  456,  463,  468,
      458,  460,  469,  472,  459,  463,  461,  470,  473,  479,
      485,  480,  472,  486,  488,  489,  491,  496,  473,  469,
      468,  487,  479,  480,  470,  485,  493,  488,  497,  487,
      498,  499,  489,  500,  502,  486,  503,  504,  496,  491,

      505,  506,  500,  502,  493,  507,  499,  508,  509,  497,
      511,  512,  504,  503,  507,  505,  498,  515,  513,  514,
      512,  516,  506,  513,  514,  517,  515,  518,  521,  508,
      522,  509,  517,  523,  524,  511,  526,  527,  528,  529,
      535,  538,  533,  524,  516,  537,  542,  538,  529,  535,
      518,  526,  521,  522,  527,  533,  523,  536,  540,  542,
      537,  528,  541,  544,  536,  540,  547,  541,  548,  549,
      550,  547,  551,  552,  553,  550,  554,  548,  555,  556,
      557,  553,  558,  596,  559,  557,  544,  561,  551,  559,
      562,  555,  549,  563,  556,  564,  565,  558,  566,  554,

      567,  561,  552,  569,  570,  565,  562,  566,  575,  571,
      572,  573,  563,  570,  576,  577,  578,  575,  564,  583,
      580,  581,  584,  567,  571,  572,  573,  585,  577,  584,
      581,  586,  569,  578,  583,  587,  588,  576,  580,  589,
      585,  591,  590,  592,  593,  594,  595,  597,  586,  591,
      592,  593,  601,  582,  588,  607,  587,  603,  579,  601,
      574,  568,  589,  590,  597,  560,  603,  546,  545,  595,
      543,  539,  534,  532,  594,  531,  607,  610,  610,  610,
      610,  611,  611,  613,  530,  613,  613,  525,  520,  510,
      501,  495,  494,  492,  490,  484,  483,  482,  481,  478,

      477,  476,  475,  474,  471,  467,  466,  465,  464,  462,
      457,  454,  453,  452,  449,  448,  447,  439,  436,  430,
      424,  423,  421,  420,  416,  412,  411,  410,  409,  408,
      407,  406,  403,  395,  384,  383,  381,  366,  363,  361,
      358,  356,  351,  344,  343,  341,  339,  336,  333,  328,
      321,  315,  312,  311,  310,  301,  298,  297,  292,  291,
      275,  274,  273,  270,  258,  246,  244,  242,  240,  237,
      236,  235,  226,  223,  222,  218,  216,  215,  214,  206,
      205,  202,  201,  199,  198,  197,  196,  195,  194,  192,
      191,  162,  155,  150,  148,  145,  142,  138,  134,  116,

       90,   70,   59,   39,   37,    8,    7,    3,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
#define INITIAL 0
/*===-- UpgradeLexer.l - Scanner for 1.9 assembly files --------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by Reid Spencer and is distributed under the 
// University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM 1.9 assembly languages files.
//
//===----------------------------------------------------------------------===*/
#define YY_NEVER_INTERACTIVE 1
#line 28 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
#include "UpgradeInternals.h"
#include "llvm/Module.h"
#include <list>
#include "UpgradeParser.h"
#include <cctype>
#include <cstdlib>

#define YY_INPUT(buf,result,max_size) \
{ \
  if (LexInput->good() && !LexInput->eof()) { \
    LexInput->read(buf,max_size); \
    result = LexInput->gcount(); \
  } else {\
    result = YY_NULL; \
  } \
}

#define YY_NEVER_INTERACTIVE 1

// Construct a token value for a non-obsolete token
#define RET_TOK(type, Enum, sym) \
  Upgradelval.type = Enum; \
  return sym

#define RET_TY(sym,NewTY,sign) \
  Upgradelval.PrimType.T = NewTY; \
  Upgradelval.PrimType.S = sign; \
  return sym

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size

// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.  If AllowNull is set to false, a \00 value will cause
// an exception to be thrown.
//
// If AllowNull is set to true, the return value of the function points to the
// last character of the string in memory.
//
char *UnEscapeLexed(char *Buffer, bool AllowNull) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\' && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
      char Tmp = BIn[3]; BIn[3] = 0;     // Terminate string
      *BOut = (char)strtol(BIn+1, 0, 16);  // Convert to number
      if (!AllowNull && !*BOut)
        error("String literal cannot accept \\00 escape!");

      BIn[3] = Tmp;                  // Restore character
      BIn += 3;                      // Skip over handled chars
      ++BOut;
    } else {
      *BOut++ = *BIn++;
    }
  }

  return BOut;
}

// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      error("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      error("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  // Behave nicely in the face of C TBAA rules... see:
  // http://www.nullstone.com/htmls/category/aliastyp.htm
  union {
    uint64_t UI;
    double FP;
  } UIntToFP;
  UIntToFP.UI = HexIntToVal(Buffer);

  assert(sizeof(double) == sizeof(uint64_t) &&
         "Data sizes incompatible on this target!");
  return UIntToFP.FP;   // Cast Hex constant to double
}


} // End llvm namespace

using namespace llvm;

/* Comments start with a ; and go till end of line */
/* Variable(Value) identifiers start with a % sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* [PN]Integer: match positive and negative literal integer values that
 * are preceeded by a '%' character.  These represent unnamed variable slots.
 */
/* E[PN]Integer: match positive and negative literal integer values */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 1080 "UpgradeLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static inline void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 189 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"


#line 1234 "UpgradeLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 610 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 609 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 191 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 193 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 194 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 195 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 196 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 197 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 198 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return GLOBAL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 199 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return CONSTANT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 200 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return INTERNAL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 201 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return LINKONCE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 202 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return WEAK; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 203 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return APPENDING; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 204 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 205 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 206 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 207 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERNAL; }    /* Deprecated, turn into external */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 208 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 209 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return IMPLEMENTATION; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 210 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 211 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 212 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNDEF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 213 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 214 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return TO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 215 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXCEPT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 216 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return NOT; }  /* Deprecated, turned into XOR */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 217 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return TAIL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 218 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return TARGET; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 219 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return TRIPLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 220 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 221 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ENDIAN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 222 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return POINTERSIZE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 223 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return DATALAYOUT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 224 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return LITTLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 225 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return BIG; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 226 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return VOLATILE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 227 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ALIGN;  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 228 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return SECTION; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 229 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return MODULE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 230 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 231 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 233 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return CC_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 234 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 235 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return CSRETCC_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 236 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 237 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 238 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return X86_STDCALLCC_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 239 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return X86_FASTCALLCC_TOK; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 241 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SBYTE,  Type::Int8Ty,  Signed);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 242 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UBYTE,  Type::Int8Ty,  Unsigned); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 243 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SHORT,  Type::Int16Ty, Signed);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 244 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(USHORT, Type::Int16Ty, Unsigned); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 245 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(INT,    Type::Int32Ty, Signed);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 246 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UINT,   Type::Int32Ty, Unsigned); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 247 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LONG,   Type::Int64Ty, Signed);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 248 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(ULONG,  Type::Int64Ty, Unsigned); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 249 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(VOID,   Type::VoidTy,  Signless  ); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 250 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(BOOL,   Type::Int1Ty,  Unsigned  ); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 251 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(FLOAT,  Type::FloatTy, Signless ); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 252 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(DOUBLE, Type::DoubleTy,Signless); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 253 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LABEL,  Type::LabelTy, Signless ); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 254 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return TYPE;   }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 255 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return OPAQUE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 257 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, AddOp, ADD); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 258 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SubOp, SUB); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 259 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, MulOp, MUL); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 260 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, DivOp,  DIV); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 261 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, UDivOp, UDIV); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 262 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SDivOp, SDIV); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 263 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, FDivOp, FDIV); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 264 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, RemOp,  REM); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 265 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, URemOp, UREM); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 266 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SRemOp, SREM); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 267 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, FRemOp, FREM); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 268 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, AndOp, AND); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 269 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, OrOp , OR ); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 270 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, XorOp, XOR); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 271 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetNE, SETNE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 272 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetEQ, SETEQ); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 273 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetLT, SETLT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 274 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetGT, SETGT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 275 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetLE, SETLE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 276 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetGE, SETGE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 277 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ICmpOp, ICMP); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 278 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, FCmpOp, FCMP); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 280 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return EQ; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 281 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return NE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 282 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return SLT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 283 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return SGT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 284 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return SLE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 285 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return SGE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 286 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ULT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 287 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return UGT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 288 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ULE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 289 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return UGE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 290 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return OEQ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 291 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ONE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 292 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return OLT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 293 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return OGT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 294 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return OLE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 295 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return OGE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 296 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return ORD; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 297 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNO; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 298 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return UEQ; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 299 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 301 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, PHIOp, PHI_TOK); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 302 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, CallOp, CALL); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 303 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, CastOp, CAST);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 304 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, TruncOp, TRUNC); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 305 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, ZExtOp , ZEXT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 306 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, SExtOp, SEXT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 307 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPTruncOp, FPTRUNC); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 308 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPExtOp, FPEXT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 309 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPToUIOp, FPTOUI); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 310 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPToSIOp, FPTOSI); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 311 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, UIToFPOp, UITOFP); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 312 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, SIToFPOp, SITOFP); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 313 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, PtrToIntOp, PTRTOINT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 314 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, IntToPtrOp, INTTOPTR); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 315 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, BitCastOp, BITCAST); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 316 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, SelectOp, SELECT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 317 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ShlOp, SHL); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 318 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ShrOp, SHR); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 319 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, LShrOp, LSHR); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 320 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, AShrOp, ASHR); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 321 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return VANEXT_old; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 322 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return VAARG_old; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 323 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 324 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, RetOp, RET); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 325 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, BrOp, BR); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 326 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, SwitchOp, SWITCH); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 327 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, InvokeOp, INVOKE); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 328 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNWIND; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 329 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, UnreachableOp, UNREACHABLE); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 331 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, MallocOp, MALLOC); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 332 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, AllocaOp, ALLOCA); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 333 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, FreeOp, FREE); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 334 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, LoadOp, LOAD); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 335 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, StoreOp, STORE); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 336 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, GetElementPtrOp, GETELEMENTPTR); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 338 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ExtractElementOp, EXTRACTELEMENT); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 339 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, InsertElementOp, INSERTELEMENT); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 340 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ShuffleVectorOp, SHUFFLEVECTOR); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 343 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{
                  UnEscapeLexed(yytext+1);
                  Upgradelval.StrVal = strdup(yytext+1);             // Skip %
                  return VAR_ID;
                }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 348 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{
                  yytext[strlen(yytext)-1] = 0;  // nuke colon
                  UnEscapeLexed(yytext);
                  Upgradelval.StrVal = strdup(yytext);
                  return LABELSTR;
                }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 354 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{
                  yytext[strlen(yytext)-2] = 0;  // nuke colon, end quote
                  UnEscapeLexed(yytext+1);
                  Upgradelval.StrVal = strdup(yytext+1);
                  return LABELSTR;
                }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 361 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ // Note that we cannot unescape a string constant here!  The
                   // string constant might contain a \00 which would not be
                   // understood by the string stuff.  It is valid to make a
                   // [sbyte] c"Hello World\00" constant, for example.
                   //
                   yytext[strlen(yytext)-1] = 0;           // nuke end quote
                   Upgradelval.StrVal = strdup(yytext+1);  // Nuke start quote
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 372 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.UInt64Val = atoull(yytext); return EUINT64VAL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 373 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT64_MAX+1)
                    error("Constant too large for signed 64 bits!");
                  Upgradelval.SInt64Val = -Val;
                  return ESINT64VAL;
                }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 381 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{
                   Upgradelval.UInt64Val = HexIntToVal(yytext+3);
                   return yytext[0] == 's' ? ESINT64VAL : EUINT64VAL;
                 }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 386 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  if ((unsigned)Val != Val)
                    error("Invalid value number (too large)!");
                  Upgradelval.UIntVal = unsigned(Val);
                  return UINTVAL;
                }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 393 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(yytext+2);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT32_MAX+1)
                    error("Constant too large for signed 32 bits!");
                  Upgradelval.SIntVal = (int)-Val;
                  return SINTVAL;
                }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 402 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.FPVal = atof(yytext); return FPVAL; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 403 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.FPVal = HexToFP(yytext); return FPVAL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 405 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  yy_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 413 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 414 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 416 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2160 "UpgradeLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 610 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 610 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 609);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static inline void yyunput( int c, register char *yy_bp )
#else
static inline void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static inline void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static inline void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 416 "/proj/llvm/llvm-1/tools/llvm-upgrade/UpgradeLexer.l"

