#define yy_create_buffer Upgrade_create_buffer
#define yy_delete_buffer Upgrade_delete_buffer
#define yy_scan_buffer Upgrade_scan_buffer
#define yy_scan_string Upgrade_scan_string
#define yy_scan_bytes Upgrade_scan_bytes
#define yy_flex_debug Upgrade_flex_debug
#define yy_init_buffer Upgrade_init_buffer
#define yy_flush_buffer Upgrade_flush_buffer
#define yy_load_buffer_state Upgrade_load_buffer_state
#define yy_switch_to_buffer Upgrade_switch_to_buffer
#define yyin Upgradein
#define yyleng Upgradeleng
#define yylex Upgradelex
#define yyout Upgradeout
#define yyrestart Upgraderestart
#define yytext Upgradetext
#define yylineno Upgradelineno

#line 20 "UpgradeLexer.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE (16384*64)

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static inline void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
static yyconst short int yy_acclist[196] =
    {   0,
      119,  117,  118,  116,  117,  118,  116,  118,  117,  118,
      117,  118,  117,  118,  117,  118,  117,  118,  117,  118,
      109,  117,  118,  109,  117,  118,    1,  117,  118,  117,
      118,  117,  118,  117,  118,  117,  118,  117,  118,  117,
      118,  117,  118,  117,  118,  117,  118,  117,  118,  117,
      118,  117,  118,  117,  118,  117,  118,  117,  118,  117,
      118,  117,  118,  117,  118,  117,  118,  117,  118,  117,
      118,  108,  106,  105,  105,  112,  110,  114,  109,    1,
       90,   38,   72,   22,  108,  105,  105,  113,  114,   19,
      114,  115,   60,   71,   36,   31,   39,   63,    3,   51,

       62,   80,   67,   89,   84,   85,   61,   73,  107,  114,
      114,   86,   46,   81,   82,   66,   98,   70,   99,   53,
       87,   21,  111,   65,   69,   23,    4,   59,   64,   52,
       68,   45,   11,  114,   33,    2,    5,   55,   57,   47,
       75,   79,   77,   78,   76,   74,   49,  100,   48,   54,
       20,   97,   42,   56,   27,   94,   41,    7,   92,   30,
       96,   35,   58,   83,   91,   24,   25,   93,   50,   88,
       40,    6,   26,   34,    8,   16,    9,   10,   32,   12,
       14,   13,   29,   37,   15,   28,   95,  101,  103,  104,
       43,  102,   17,   44,   18

    } ;

static yyconst short int yy_accept[512] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   24,   27,   30,   32,   34,   36,   38,
       40,   42,   44,   46,   48,   50,   52,   54,   56,   58,
       60,   62,   64,   66,   68,   70,   72,   72,   73,   73,
       74,   75,   76,   77,   77,   78,   78,   79,   80,   80,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,
       82,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   86,
       87,   89,   90,   91,   92,   92,   93,   94,   94,   94,
       95,   95,   95,   96,   96,   97,   97,   97,   97,   98,
       98,   98,   98,   98,   98,   98,   99,   99,   99,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  102,  102,  102,  103,  103,  104,  105,  105,  105,
      105,  105,  105,  105,  106,  106,  107,  107,  107,  107,
      107,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  109,  109,  110,  111,  111,  111,  111,  112,
      112,  112,  112,  113,  113,  114,  115,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  117,  117,  118,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  120,  121,  122,  122,
      122,  123,  123,  123,  124,  124,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  126,  126,  126,  127,
      127,  127,  128,  129,  129,  130,  131,  131,  131,  131,
      131,  132,  132,  132,  133,  133,  134,  134,  134,  135,

      136,  136,  136,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  138,  138,  139,
      139,  139,  139,  139,  139,  139,  140,  140,  140,  140,
      140,  140,  140,  141,  141,  141,  142,  143,  144,  145,
      146,  147,  148,  148,  148,  149,  149,  149,  149,  150,
      151,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      153,  153,  154,  154,  154,  154,  154,  154,  154,  154,
      155,  156,  157,  157,  157,  158,  158,  159,  159,  159,
      159,  160,  160,  161,  162,  163,  164,  164,  164,  165,
      165,  165,  166,  167,  168,  168,  169,  170,  171,  171,

      171,  171,  171,  171,  171,  172,  172,  173,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  176,
      176,  176,  176,  176,  177,  177,  177,  177,  177,  178,
      179,  179,  179,  179,  179,  180,  180,  180,  180,  181,
      181,  182,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  184,  184,  184,  184,  184,
      184,  184,  184,  185,  185,  185,  185,  185,  186,  186,
      186,  186,  186,  187,  187,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  189,  189,

      190,  191,  191,  192,  192,  193,  194,  195,  195,  196,
      196
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,    1,   16,   16,   16,   16,   17,   16,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,    5,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[44] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    3,
        3,    3,    3,    4,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst short int yy_base[516] =
    {   0,
        0,    0, 1110, 1111, 1111, 1111, 1105, 1094,   36,   40,
       44,   50,   56,   62,    0,   63,   66,   81,   89,   47,
      100,   97,   76,   96,  111,   46,   48,  110,   68,  140,
      126,  171,  119,  123,   73,  125, 1103, 1111, 1092, 1111,
        0,  159,  176,  199,  204,   95,  209,  224,  229,    0,
      130,  165,  133,  120,  169,  151,  159,   31, 1091,  168,
      143,  230,  189,  191,  233,  117,  145,  187,  241,  243,
      242,  246,  244,  251,  248,  254,  255,  253,  176,  256,
      263,  258,  267,  261,  277,  281,  283, 1090,  284,  285,
      286,  287,  265,  290,  300,  295,  291,  308,  294,  305,

      318,  320, 1089,  321,  306,  301,  322,  326,  324,  328,
      330,  332,  213,  337,  346,  340,  327,  347, 1088,    0,
      359,  363, 1087,  377,  394,    0, 1086,  353,  363, 1085,
      369,  379, 1084,  370, 1083,  289,  367,  384, 1082,  389,
      395,  396,  398,  399,  401, 1081,  402,  365,  406,  404,
      409,  410,  385,  412,  420,  422,  424,  421,  426,  434,
      435,  428,  436,  113,  429,  439,  440,  442,  449,  448,
     1080,  450,  453, 1079,  454, 1078, 1077,  478,  455,  457,
      456,  458,  489, 1076,  469, 1075,  460,  459,  491,  492,
     1074,  493,  494,  497,  495,  496,  501,  499,  502,  503,

      511,  512,  515,  517,  518,  519,  461,  523,  520,  529,
      532, 1073,  533, 1111,  543,  551,  557,  561,  566,  567,
      568,  569, 1072,  570, 1071, 1070, 1069,  571,  572,  573,
      574,  576,  577,  579,  582,  585,  583,  580,  591,  592,
      593,  594, 1068,  603, 1067, 1066,  604,  605,  607,  608,
      609,  611,  613,  614,  618, 1065, 1064, 1063,  617,  621,
     1062,  615,  620,    0,  622, 1061,  624,  627,  638,  640,
      641,  642,  623,  644,  647, 1060,  648,  645, 1059,  653,
      655, 1058, 1057,  659, 1056, 1055,  660,  665,  661,  667,
     1054,  669,  672, 1053,  673, 1052,  676,  674,  681, 1051,

      683,  681, 1050,  685,  694,  695,  700,  682,  691,  701,
      704,  706,  707,  708,  709,  710, 1049,  711, 1048,  712,
      713,  714,  716,  719,  725, 1047,  727,  729,  733,  732,
      737,  742, 1046,  735,  722, 1045, 1044, 1043, 1042, 1041,
     1040, 1039,  743,  747, 1038,  748,  749,  750, 1037, 1036,
     1035,  754,  755,  752,  756,  764,  765,  762,  766, 1034,
      768, 1033,  769,  771,  773,  779,  774,  776,  780, 1032,
     1031, 1030,  787,  782, 1029,  784, 1028,  790,  793,  803,
     1027,  797, 1026, 1025, 1024, 1023,  789,  795, 1022,  806,
      807, 1021, 1020, 1019,  809, 1018, 1017, 1016,  811,  813,

      814,  816,  819,  818, 1015,  820, 1014, 1013,  823,  824,
      825,  827,  828,  830,  831,  832,  834,  843,  833, 1012,
      840,  850,  853,  854,  846,  857,  856,  860, 1011,  861,
      866,  867,  868, 1010,  872,  874,  870,  873, 1007,  997,
      862,  883,  881,  878,  996,  894,  895,  886,  995,  880,
      994,  992,  897,  896,  898,  904,  906,  907,  908,  910,
      911,  912,  913,  914,  991,  916,  918,  920,  923,  929,
      931,  924,  989,  932,  927,  935,  937,  988,  944,  925,
      943,  945,  987,  949,  986,  951,  954,  955,  957,  958,
      959,  960,  963,  964,  965,  969,  970,  981,  973,  980,

      876,  975,  538,  976,  535,  462,  423,  978,  216, 1111,
     1013, 1015,  226, 1019,   76
    } ;

static yyconst short int yy_def[516] =
    {   0,
      510,    1,  510,  510,  510,  510,  511,  512,  513,  510,
      512,  512,  512,  512,  514,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  511,  510,  512,  510,
      515,  515,  510,  510,  512,  512,  512,  512,  512,  514,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  510,  515,
      515,  510,  512,  512,  512,   49,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,   49,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  510,  510,  510,  510,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  178,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  510,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,    0,
      510,  510,  510,  510,  510
    } ;

static yyconst short int yy_nxt[1155] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,    8,    8,    8,   16,   17,
       18,   19,   20,   21,   22,    8,   23,    8,   24,   25,
       26,   27,   28,    8,   29,   30,   31,   32,   33,   34,
       35,    8,   36,   42,   40,   43,   43,   43,   43,   44,
       44,   44,   44,   45,   45,   45,   45,   40,   46,   40,
       40,   40,  136,   40,   47,   48,   48,   48,   48,   40,
       47,   48,   48,   48,   48,   40,   40,   69,  120,   40,
       87,   40,   88,   86,   51,  116,   40,   70,   56,   40,
       91,   52,   57,   53,   40,   54,   49,   58,   55,   60,

       59,   61,   40,  123,  117,   77,   78,   64,   40,   40,
       40,   65,   62,   40,   79,   66,   63,   67,   71,   75,
       68,   72,   80,   40,   40,   76,   40,   81,   73,   83,
       40,   82,   40,   40,   74,   89,   40,  113,   40,   40,
      254,   90,   84,   40,  102,  115,   40,  118,   85,   92,
      114,  127,  131,   40,  130,  146,   40,  103,   40,   93,
      104,   94,   95,  139,   40,   96,   97,  105,  121,  121,
      121,  121,   40,  147,   98,  134,   99,  100,   40,  101,
       92,   40,   40,  135,   40,   43,   43,   43,   43,   40,
      106,  128,  107,  129,  132,  163,  137,  108,  133,  109,

       40,  110,   40,  138,   40,  111,  112,  122,   44,   44,
       44,   44,   47,   45,   45,   45,   45,   40,  124,  124,
      124,  124,   40,  142,  148,  125,   40,  143,   41,   40,
      207,  125,   47,   48,   48,   48,   48,   40,  126,  126,
      126,  126,   40,   40,  126,  126,   40,  126,  126,  126,
      126,  126,  126,  144,   40,   40,   40,   40,  140,   40,
      141,   40,  149,  150,   40,  145,   40,   40,   40,   40,
      152,   40,  154,  156,   40,  155,   40,  153,   40,  151,
       40,  166,  170,  168,  157,  158,  164,  159,  160,  161,
       40,  162,  165,  167,   40,  169,   40,   40,   40,   40,

       40,  173,   40,   40,   40,  171,  179,   40,   40,  172,
      174,  175,  188,   40,   40,  176,  180,  225,   40,   40,
      181,   40,  177,  184,  191,  190,  185,  178,  182,  186,
      189,   40,  187,   40,   40,   40,  183,   40,  197,   40,
       40,   40,  198,   40,  192,   40,  193,  195,  199,  202,
       40,  211,  205,   40,  194,  201,  200,  206,  196,   40,
       40,  212,  203,  208,  210,  209,   40,  204,  121,  121,
      121,  121,  215,  215,  215,  215,   40,  220,   40,  216,
       40,  213,   40,   40,  236,  216,  124,  124,  124,  124,
       40,  222,   40,  125,  221,  226,  224,   40,   40,  125,

      217,  218,   40,  219,  219,  219,  219,   40,   40,   40,
      228,   40,   40,  223,   40,   40,  231,   40,  230,   40,
      227,  242,   40,   40,  234,   40,  238,  232,  235,  233,
      229,  239,  237,   40,   40,   40,   40,   40,  244,   40,
      248,   40,   40,  240,  245,  241,  247,   40,   40,   40,
      243,  246,   40,   40,  249,   40,  250,  251,  253,  252,
      256,   40,   40,   40,  257,  255,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,  258,  259,  261,  293,
      268,  275,   40,  274,  263,  260,  262,  264,  264,  264,
      264,  265,  267,  264,  264,  266,  264,  264,  264,  264,

      264,  264,   40,  273,   40,   40,   40,   40,   40,   40,
       40,  269,   40,  270,   40,   40,   40,  271,  282,  272,
      276,  280,  279,  283,   40,   40,  277,  281,   40,  278,
       40,   40,   40,   40,  288,  284,   40,  289,  295,  286,
      285,  287,   40,  290,  294,   40,   40,  291,   40,  297,
      292,   40,  215,  215,  215,  215,  296,  217,  217,  216,
      299,  299,  299,  299,  298,  216,  299,  299,  299,  299,
      219,  219,  219,  219,   40,  219,  219,  219,  219,   40,
       40,   40,   40,   40,   40,   40,   40,   40,  301,   40,
       40,  304,   40,   40,  308,   40,   40,  300,   40,  302,

      303,  313,  307,  309,   40,   40,   40,   40,  305,  306,
      316,  311,  314,  312,  318,  317,   40,   40,   40,  310,
       40,   40,   40,  321,   40,  315,   40,   40,   40,  322,
       40,   40,  320,   40,   40,   40,   40,   40,  325,  319,
       40,  326,  323,  324,  333,  327,  328,  335,  329,  330,
      334,   40,  331,   40,   40,   40,  332,   40,   40,  342,
       40,   40,  337,  339,  341,  346,   40,  343,   40,  344,
      345,  336,   40,   40,   40,  347,  338,  340,   40,  352,
       40,  349,   40,  348,  350,   40,   40,   40,  351,   40,
      299,  299,  299,  299,   40,   40,   40,  353,   40,  357,

      359,  360,  361,  354,   40,  362,  355,   40,   40,  356,
      367,  358,  363,   40,   40,  364,  366,   40,  365,   40,
       40,   40,   40,   40,   40,   40,   40,   40,  370,   40,
      374,  375,   40,  368,  376,   40,  369,  371,   40,  373,
       40,  377,   40,  378,  372,   40,   40,  381,   40,  380,
       40,  383,  379,  384,  385,   40,   40,  382,  389,  386,
       40,   40,   40,   40,  387,   40,  388,   40,   40,   40,
      391,  390,  394,  392,  395,   40,  396,   40,   40,   40,
      398,   40,   40,  400,   40,  393,   40,   40,  397,   40,
      399,  405,   40,   40,  403,   40,  402,   40,  401,  404,

       40,  407,   40,   40,  411,  412,   40,  409,   40,  408,
       40,  410,  415,  414,  406,  416,   40,  418,  413,   40,
       40,  417,   40,  419,   40,  420,   40,   40,  421,   40,
      422,   40,   40,   40,  423,  426,   40,   40,   40,  424,
       40,   40,  427,   40,   40,   40,   40,   40,  425,  428,
      435,  430,  436,   40,  429,  434,   40,  431,  432,   40,
      438,  437,  439,   40,  433,  440,   40,   40,  441,   40,
       40,  444,  443,   40,   40,   40,  445,  447,  442,   40,
       40,   40,  446,   40,  449,   40,   40,   40,  458,   40,
      453,   40,  448,   40,   40,  457,   40,  461,  450,   40,

      454,  460,  451,  452,  455,  459,  456,   40,   40,   40,
       40,   40,  464,  463,  462,  466,  465,   40,  467,   40,
       40,   40,  469,   40,   40,   40,   40,   40,  472,   40,
      475,   40,  477,   40,  468,  470,   40,   40,   40,  474,
       40,  476,   40,  478,   40,   40,  473,  479,   40,  471,
       40,  482,  480,  483,  485,  486,   40,   40,   40,  481,
      484,  490,   40,  487,   40,  488,  489,   40,   40,  491,
       40,   40,   40,   40,  495,  492,   40,   40,   40,  494,
      493,  496,   40,   40,  502,  503,   40,  497,   40,   40,
      499,   40,  498,   40,   40,  507,  500,  501,  508,   40,

       40,   40,   40,  506,   40,   40,  505,   40,   40,   40,
       40,  504,  509,   37,   37,   37,   37,   39,   39,   50,
       40,   50,   50,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,  214,   40,   40,   40,   40,  119,   40,   38,  510,
        3,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510
    } ;

static yyconst short int yy_chk[1155] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   58,    9,    9,    9,    9,   10,
       10,   10,   10,   11,   11,   11,   11,   11,   12,   26,
       20,   27,   58,   12,   13,   13,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   16,   20,  515,   17,
       27,   29,   27,   26,   16,   35,   35,   20,   17,   23,
       29,   16,   17,   16,   18,   16,   13,   17,   16,   18,

       17,   18,   19,   46,   35,   23,   23,   19,   46,   24,
       22,   19,   18,   21,   24,   19,   18,   19,   21,   22,
       19,   21,   24,   28,   25,   22,  164,   24,   21,   25,
       66,   24,   33,   54,   21,   28,   34,   33,   36,   31,
      164,   28,   25,   51,   31,   34,   53,   36,   25,   30,
       33,   51,   54,   30,   53,   66,   61,   31,   67,   30,
       31,   30,   30,   61,   56,   30,   30,   31,   42,   42,
       42,   42,   57,   67,   30,   56,   30,   30,   52,   30,
       32,   60,   55,   57,   32,   43,   43,   43,   43,   79,
       32,   52,   32,   52,   55,   79,   60,   32,   55,   32,

       68,   32,   63,   60,   64,   32,   32,   44,   44,   44,
       44,   44,   45,   45,   45,   45,   45,   45,   47,   47,
       47,   47,   47,   63,   68,   47,  113,   64,  513,  509,
      113,   47,   48,   48,   48,   48,   48,   48,   49,   49,
       49,   49,   49,   62,   49,   49,   65,   49,   49,   49,
       49,   49,   49,   65,   69,   71,   70,   73,   62,   72,
       62,   75,   69,   70,   74,   65,   78,   76,   77,   80,
       71,   82,   72,   74,   84,   73,   81,   71,   93,   70,
       83,   81,   84,   82,   75,   76,   80,   77,   78,   78,
       85,   78,   80,   81,   86,   83,   87,   89,   90,   91,

       92,   87,  136,   94,   97,   85,   93,   99,   96,   86,
       89,   90,   97,   95,  106,   91,   94,  136,  100,  105,
       95,   98,   91,   96,  100,   99,   96,   92,   95,   96,
       98,  101,   96,  102,  104,  107,   95,  109,  105,  108,
      117,  110,  106,  111,  101,  112,  102,  104,  107,  110,
      114,  116,  111,  116,  102,  109,  108,  112,  104,  115,
      118,  117,  110,  114,  115,  114,  128,  110,  121,  121,
      121,  121,  122,  122,  122,  122,  129,  128,  148,  122,
      137,  118,  131,  134,  148,  122,  124,  124,  124,  124,
      124,  131,  132,  124,  129,  137,  134,  138,  153,  124,

      125,  125,  140,  125,  125,  125,  125,  125,  141,  142,
      140,  143,  144,  132,  145,  147,  143,  150,  142,  149,
      138,  153,  151,  152,  147,  154,  150,  144,  147,  145,
      141,  151,  149,  155,  158,  156,  507,  157,  155,  159,
      158,  162,  165,  151,  156,  152,  157,  160,  161,  163,
      154,  156,  166,  167,  159,  168,  160,  161,  163,  162,
      166,  170,  169,  172,  167,  165,  173,  175,  179,  181,
      180,  182,  188,  187,  207,  506,  168,  169,  172,  207,
      182,  188,  185,  187,  175,  170,  173,  178,  178,  178,
      178,  179,  181,  178,  178,  180,  178,  178,  178,  178,

      178,  178,  183,  185,  189,  190,  192,  193,  195,  196,
      194,  183,  198,  183,  197,  199,  200,  183,  196,  183,
      189,  194,  193,  197,  201,  202,  190,  195,  203,  192,
      204,  205,  206,  209,  202,  198,  208,  203,  209,  200,
      199,  201,  210,  204,  208,  211,  213,  205,  505,  211,
      206,  503,  215,  215,  215,  215,  210,  216,  216,  215,
      216,  216,  216,  216,  213,  215,  217,  217,  217,  217,
      218,  218,  218,  218,  218,  219,  219,  219,  219,  219,
      220,  221,  222,  224,  228,  229,  230,  231,  221,  232,
      233,  228,  234,  238,  232,  235,  237,  220,  236,  222,

      224,  237,  231,  233,  239,  240,  241,  242,  229,  230,
      240,  235,  238,  236,  242,  241,  244,  247,  248,  234,
      249,  250,  251,  248,  252,  239,  253,  254,  262,  249,
      259,  255,  247,  263,  260,  265,  273,  267,  252,  244,
      268,  253,  250,  251,  265,  254,  255,  268,  259,  260,
      267,  269,  262,  270,  271,  272,  263,  274,  278,  273,
      275,  277,  270,  271,  272,  278,  280,  274,  281,  275,
      277,  269,  284,  287,  289,  280,  270,  271,  288,  289,
      290,  284,  292,  281,  287,  293,  295,  298,  288,  297,
      299,  299,  299,  299,  302,  308,  301,  290,  304,  297,

      298,  301,  302,  292,  309,  304,  293,  305,  306,  295,
      309,  297,  305,  307,  310,  306,  308,  311,  307,  312,
      313,  314,  315,  316,  318,  320,  321,  322,  312,  323,
      316,  318,  324,  310,  320,  335,  311,  313,  325,  315,
      327,  321,  328,  322,  314,  330,  329,  325,  334,  324,
      331,  328,  323,  329,  330,  332,  343,  327,  335,  331,
      344,  346,  347,  348,  332,  354,  334,  352,  353,  355,
      344,  343,  348,  346,  352,  358,  353,  356,  357,  359,
      355,  361,  363,  357,  364,  347,  365,  367,  354,  368,
      356,  364,  366,  369,  361,  374,  359,  376,  358,  363,

      373,  366,  387,  378,  373,  373,  379,  368,  388,  367,
      382,  369,  378,  376,  365,  379,  380,  382,  374,  390,
      391,  380,  395,  387,  399,  388,  400,  401,  390,  402,
      391,  404,  403,  406,  395,  401,  409,  410,  411,  399,
      412,  413,  402,  414,  415,  416,  419,  417,  400,  403,
      413,  406,  414,  421,  404,  412,  418,  409,  410,  425,
      416,  415,  417,  422,  411,  418,  423,  424,  419,  427,
      426,  423,  422,  428,  430,  441,  424,  426,  421,  431,
      432,  433,  425,  437,  428,  435,  438,  436,  441,  501,
      433,  444,  427,  450,  443,  438,  442,  444,  430,  448,

      435,  443,  431,  432,  436,  442,  437,  446,  447,  454,
      453,  455,  448,  447,  446,  453,  450,  456,  454,  457,
      458,  459,  456,  460,  461,  462,  463,  464,  459,  466,
      462,  467,  464,  468,  455,  457,  469,  472,  480,  461,
      475,  463,  470,  466,  471,  474,  460,  467,  476,  458,
      477,  470,  468,  471,  474,  475,  481,  479,  482,  469,
      472,  480,  484,  476,  486,  477,  479,  487,  488,  481,
      489,  490,  491,  492,  487,  482,  493,  494,  495,  486,
      484,  488,  496,  497,  494,  495,  499,  489,  502,  504,
      491,  508,  490,  500,  498,  502,  492,  493,  504,  485,

      483,  478,  473,  499,  465,  452,  497,  451,  449,  445,
      440,  496,  508,  511,  511,  511,  511,  512,  512,  514,
      439,  514,  514,  434,  429,  420,  408,  407,  405,  398,
      397,  396,  394,  393,  392,  389,  386,  385,  384,  383,
      381,  377,  375,  372,  371,  370,  362,  360,  351,  350,
      349,  345,  342,  341,  340,  339,  338,  337,  336,  333,
      326,  319,  317,  303,  300,  296,  294,  291,  286,  285,
      283,  282,  279,  276,  266,  261,  258,  257,  256,  246,
      245,  243,  227,  226,  225,  223,  212,  191,  186,  184,
      177,  176,  174,  171,  146,  139,  135,  133,  130,  127,

      123,  119,  103,   88,   59,   39,   37,    8,    7,    3,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
#define INITIAL 0
/*===-- UpgradeLexer.l - Scanner for 1.9 assembly files --------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by Reid Spencer and is distributed under the 
// University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM 1.9 assembly languages files.
//
//===----------------------------------------------------------------------===*/
#define YY_NEVER_INTERACTIVE 1
#line 28 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"

#include "ParserInternals.h"
#include "UpgradeParser.h"
#include <cctype>
#include <cstdlib>

#define YY_INPUT(buf,result,max_size) \
{ \
  if (LexInput->good() && !LexInput->eof()) { \
    LexInput->read(buf,max_size); \
    result = LexInput->gcount(); \
  } else {\
    result = YY_NULL; \
  } \
}


// Construct a token value for a non-obsolete token
#define RET_TOK(sym) \
  Upgradelval.String = new std::string(yytext); \
  return sym

#define RET_TY(sym,OldTY,NewTY,sign) \
  Upgradelval.Type.newTy = new std::string(NewTY); \
  Upgradelval.Type.oldTy = OldTY; \
  return sym

#define YY_NEVER_INTERACTIVE 1
/* Comments start with a ; and go till end of line */
/* Variable(Value) identifiers start with a % sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* [PN]Integer: match positive and negative literal integer values that
 * are preceeded by a '%' character.  These represent unnamed variable slots.
 */
/* E[PN]Integer: match positive and negative literal integer values */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 909 "UpgradeLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static inline void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 98 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"


#line 1063 "UpgradeLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 511 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 510 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 100 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 102 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( BEGINTOK); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 103 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ENDTOK); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 104 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TRUETOK);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 105 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FALSETOK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 106 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DECLARE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 107 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( GLOBAL); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 108 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CONSTANT); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 109 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( INTERNAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 110 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LINKONCE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 111 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( WEAK); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 112 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( APPENDING); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 113 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DLLIMPORT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 114 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DLLEXPORT); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 115 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EXTERN_WEAK); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 116 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EXTERNAL); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 117 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( IMPLEMENTATION); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 118 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ZEROINITIALIZER); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 119 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DOTDOTDOT); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 120 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UNDEF); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 121 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( NULL_TOK); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 122 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TAIL); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TARGET); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TRIPLE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DEPLIBS); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ENDIAN); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 128 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( POINTERSIZE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DATALAYOUT); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LITTLE); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( BIG); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 132 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( VOLATILE); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ALIGN);  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 134 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SECTION); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 135 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( MODULE); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 136 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ASM_TOK); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 137 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SIDEEFFECT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 139 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CC_TOK); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 140 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CCC_TOK); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 141 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CSRETCC_TOK); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 142 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FASTCC_TOK); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 143 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( COLDCC_TOK); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 144 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( X86_STDCALLCC_TOK); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 145 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( X86_FASTCALLCC_TOK); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 147 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(VOID,VoidTy,"void",false); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 148 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(BOOL,BoolTy,"bool",false); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 149 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SBYTE,SByteTy,"sbyte",true); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 150 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UBYTE,UByteTy,"ubyte",false); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 151 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SHORT,ShortTy,"short",true); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 152 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(USHORT,UShortTy,"ushort",false); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 153 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(INT,IntTy,"int",true);   }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 154 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UINT,UIntTy,"uint",false);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 155 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LONG,LongTy,"long",true);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 156 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(ULONG,ULongTy,"ulong",false); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 157 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(FLOAT,FloatTy,"float",false); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 158 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(DOUBLE,DoubleTy,"double",false); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 159 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LABEL,LabelTy,"label",false); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 160 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(OPAQUE,OpaqueTy,"opaque",false); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 161 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TYPE);   }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 163 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ADD); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 164 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SUB); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 165 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( MUL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 166 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UDIV); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 167 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UDIV); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 168 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SDIV); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 169 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FDIV); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 170 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UREM); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 171 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UREM); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 172 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SREM); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 173 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FREM); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 174 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( AND); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 175 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( OR); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 176 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( XOR); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 177 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETNE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 178 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETEQ); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 179 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETLT); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 180 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETGT); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 181 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETLE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 182 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETGE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 184 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( PHI_TOK); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 185 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CALL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 186 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CAST); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 187 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SELECT); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 188 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SHL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 189 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SHR); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 190 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ASHR); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 191 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LSHR); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 192 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( VAARG); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 193 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( RET); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 194 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( BR); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 195 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SWITCH); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 196 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( INVOKE); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 197 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UNWIND); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 198 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UNWIND); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 199 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UNREACHABLE); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 201 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( MALLOC); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 202 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ALLOCA); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 203 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FREE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 204 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LOAD); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 205 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( STORE); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 206 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( GETELEMENTPTR); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 208 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EXTRACTELEMENT); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 209 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( INSERTELEMENT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 210 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SHUFFLEVECTOR); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 213 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( VAR_ID); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 214 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LABELSTR); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 215 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LABELSTR); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 216 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( STRINGCONSTANT ); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 217 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EUINT64VAL ); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 218 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ESINT64VAL ); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 219 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( yytext[0] == 's' ? ESINT64VAL : EUINT64VAL ); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 220 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UINTVAL); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 221 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SINTVAL); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 222 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FPVAL); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 223 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FPVAL); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 224 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  yy_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 232 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 233 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 235 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1754 "UpgradeLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 511 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 511 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 510);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static inline void yyunput( int c, register char *yy_bp )
#else
static inline void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static inline void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static inline void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 235 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"

