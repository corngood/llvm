#line 2 "UpgradeLexer.cpp"

#line 4 "UpgradeLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE Upgraderestart(Upgradein  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (16384*64)
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int Upgradeleng;

extern FILE *Upgradein, *Upgradeout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE Upgradelex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-Upgradelineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < Upgradeleng; ++yyl )\
                    if ( Upgradetext[yyl] == '\n' )\
                        --Upgradelineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up Upgradetext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up Upgradetext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via Upgraderestart()), so that the user can continue scanning by
	 * just pointing Upgradein at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when Upgradetext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int Upgradeleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow Upgradewrap()'s to do buffer switches
 * instead of setting up a fresh Upgradein.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void Upgraderestart (FILE *input_file  );
void Upgrade_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE Upgrade_create_buffer (FILE *file,int size  );
void Upgrade_delete_buffer (YY_BUFFER_STATE b  );
void Upgrade_flush_buffer (YY_BUFFER_STATE b  );
void Upgradepush_buffer_state (YY_BUFFER_STATE new_buffer  );
void Upgradepop_buffer_state (void );

static void Upgradeensure_buffer_stack (void );
static void Upgrade_load_buffer_state (void );
static void Upgrade_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER Upgrade_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE Upgrade_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE Upgrade_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE Upgrade_scan_bytes (yyconst char *bytes,int len  );

void *Upgradealloc (yy_size_t  );
void *Upgraderealloc (void *,yy_size_t  );
void Upgradefree (void *  );

#define yy_new_buffer Upgrade_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        Upgradeensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Upgrade_create_buffer(Upgradein,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        Upgradeensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Upgrade_create_buffer(Upgradein,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Upgradewrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *Upgradein = (FILE *) 0, *Upgradeout = (FILE *) 0;

typedef int yy_state_type;

extern int Upgradelineno;

int Upgradelineno = 1;

extern char *Upgradetext;
#define yytext_ptr Upgradetext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up Upgradetext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	Upgradeleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[610] =
    {   0,
        0,    0,  157,  155,  154,  154,  155,  155,  155,  155,
      155,  155,  147,  147,    1,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,    0,  146,    0,  144,
      143,  143,  150,    0,  148,    0,  152,  147,    0,    1,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
       41,    0,    0,    0,    0,    0,    0,    0,    0,   85,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,    0,    0,    0,    0,    0,    0,   75,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   23,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  146,  143,  143,  152,   20,  152,    0,
      153,   63,    0,    0,   74,    0,    0,   39,    0,   34,
        0,    0,    0,    0,   42,    0,    0,    0,    0,    0,
        0,   66,    0,    0,    3,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       52,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       65,   25,    0,   95,  100,   98,   99,   97,   96,    0,

      101,  105,    0,    0,   70,  128,    0,    0,    0,    0,
        0,    0,    0,   90,   88,  121,    0,  122,    0,    0,
        0,   89,   87,    0,    0,   64,    0,    0,    0,    0,
        0,    0,    0,    0,  103,   94,   92,    0,    0,   93,
        0,   91,    0,  104,    0,  102,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   76,    0,    0,
      145,  152,    0,    0,    0,  152,    0,    0,    0,  124,
        0,    0,   57,  106,  107,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       84,   69,    0,    0,    0,    0,  136,   73,    0,    0,

       83,    0,    0,    0,    0,    0,    0,    0,    0,  137,
       54,  123,    0,    0,   22,    0,    0,    0,  149,    0,
       68,    0,    0,    0,    0,    0,    0,  110,    0,    0,
        0,    0,   72,    0,    0,   26,    0,    0,    4,    0,
       61,    0,   67,   53,    0,    0,    0,    0,    0,    0,
       71,    0,    0,    0,    0,   56,    0,   11,    0,    0,
      109,  152,   36,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        5,    0,   58,  112,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   60,    0,    0,    0,    0,    0,

        0,    0,   48,    0,    0,   78,   82,   80,   81,   79,
       77,   50,    0,    0,    0,  138,    0,    0,    0,  108,
       49,    0,   55,   21,    0,    0,    0,    0,    0,  126,
        0,    0,    0,    0,    0,  135,    0,    0,   45,    0,
        0,    0,    0,    0,    0,    0,   59,   30,   24,    0,
        0,   44,  114,  113,    0,    0,    7,    0,    0,    0,
        0,  131,    0,   33,  134,   38,   62,    0,    0,    0,
      120,    0,    0,  116,  130,   27,   28,  115,    0,    0,
      132,   51,  127,  125,    0,    0,    0,    0,    0,  119,
        0,   43,    0,    6,   29,    0,    0,    0,    0,    0,

      111,    0,    0,    0,    0,    0,    0,    0,    0,   37,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,   17,    0,    0,    0,    0,    9,
      118,   10,    0,  117,    0,    0,    0,    0,   35,    0,
        0,    0,   12,    0,   14,   13,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   32,
        0,    0,    0,    0,    0,    0,    0,   40,    0,    0,
        0,    0,    0,   15,    0,    0,    0,    0,   31,    0,
        0,  133,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  139,    0,  141,  142,   16,

        0,   46,    0,  140,   18,   47,    0,   19,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,    1,   16,   16,   16,   16,   17,   16,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,    5,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    3,
        3,    3,    3,    4,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[615] =
    {   0,
        0,    0, 1308, 1309, 1309, 1309, 1303, 1292,   36,   40,
       44,   50,   56,   62,    0,   63,   66,   81,   89,   47,
      108,   91,  105,   96,  119,  117,  144,  128,   68,  170,
      169,  202,   92,  111,  131,  125, 1301, 1309, 1290, 1309,
        0,  207,  229,  234,  239,   70,  244,  259,  264,    0,
      139,  145,  142,   76,  136,  156,  157,   31, 1289,  162,
      164,  192,   48,  172,  268,  175,  173,  221,  212, 1288,
      276,  278,  138,  186,   72,  279,  277,  280,  289,  249,
      282,  290,  216,  281,  291,  189,  294,  284,  295, 1287,
      297,  306,   73,  305,  316,  317,  246,  311,  318,  322,

      323,  324,  327,  329,  330,  338,  332,  348,  350,  333,
      337,  334,  362,  336,  364, 1286,  367,  351,  359,  371,
      374,  379,  375,  381,  405,  386,  389,  403,  396,  378,
      250,  376,  400, 1285,    0,  436,  440, 1284,  454,  471,
        0, 1283,  382,  406, 1282,  410,  425, 1281,  415, 1280,
      422,  430,  440,  456, 1279,  458,  459,  473,  412,  447,
      460, 1278,  474,  442,  472,  477,  480,  476,  461,  478,
      416,  488,  490,  491,  494,  495,  496,  492,  499,  506,
      507,  500,  513,  505,  508,  520,  521,  523,  524,  525,
     1277, 1276,  526, 1275, 1274, 1273, 1272, 1271, 1270,  527,

     1269, 1268,  529,  533, 1267, 1266,  561,  538,  537,  542,
      534,  572,  550, 1265, 1264, 1263,  553, 1262,  535,  575,
      536, 1261, 1260,  576,  577, 1259,  555,  579,  540,  580,
      586,  582,  585,  588, 1258, 1257, 1256,  593,  596, 1255,
      590, 1254,  597, 1253,  600, 1252,  601,  602,  604,  605,
      619,  609,  612,  618,  622,  611,  214, 1251,  628,  629,
     1309,  635,  643,  651,  657,  662,  651,  663,  664, 1250,
      665,  666, 1249, 1248, 1247,  667,  669,  672,  673,  675,
      676,  677,  678,  683,  679,  686,  685,  691,  690,  693,
     1246, 1245,  687,  697,  701,  702, 1244, 1243,  703,  707,

     1242,  708,  709,  711,  713,  714,  719,  715,  721, 1241,
     1240, 1239,  722,  724, 1238,  727,  729,  735,    0,  737,
     1237,  741,  738,  742,  747,  748,  749, 1236,  743,  635,
      750,  755, 1235,  760,  761, 1234,  763,  764, 1233,  767,
     1232,  773, 1231, 1230,  775,  776,  778,  777,  781,  780,
     1229,  783,  784,  789,  791, 1228,  792, 1227,  798,  793,
     1226,  813, 1225,  794,  795, 1224,  801,  807,  816,  817,
      822,  813,  796,  819,  825,  826,  828,  829,  830,  832,
     1223,  833, 1222, 1221,  836,  837,  831,  842,  841,  843,
      846,  853,  854,  855, 1220,  857,  858,  861,  862,  863,

      866,  865, 1219,  876,  860, 1218, 1217, 1216, 1215, 1214,
     1213, 1212,  877,  879,  880, 1211,  881,  882,  886, 1210,
     1209,  884, 1208, 1207,  885,  890,  888,  887,  891, 1206,
      898,  900,  901,  904,  907, 1205,  909,  911, 1204,  912,
      916,  716,  917,  914,  915,  919, 1203, 1202, 1201,  935,
      918, 1200, 1199, 1198,  925,  928, 1197,  938,  942,  943,
      930, 1196,  945, 1195, 1194, 1193, 1192,  946,  949,  954,
     1191,  950,  955, 1190, 1189, 1188, 1187, 1186,  956,  958,
     1185, 1184, 1183, 1182,  957,  960,  968,  961,  962, 1181,
      963, 1180,  973, 1179, 1178,  964,  975,  977,  978,  980,

     1177,  981,  983,  984,  987,  988,  992,  994,  995, 1176,
      997,  998, 1005, 1006, 1004, 1008, 1012, 1014,  920, 1175,
     1015, 1017, 1020, 1021, 1174, 1023, 1024, 1025, 1026, 1171,
     1162, 1160, 1029, 1159, 1027, 1044, 1032, 1028, 1158, 1045,
     1049, 1033, 1157, 1050, 1155, 1154, 1053, 1055, 1056, 1057,
     1059, 1060, 1061, 1063, 1065, 1066, 1067, 1069, 1071, 1152,
     1074, 1077, 1080, 1082, 1083, 1085, 1087, 1148, 1090, 1091,
     1096, 1097, 1098, 1147, 1095, 1101, 1102, 1103, 1145, 1107,
     1108, 1140, 1106, 1109, 1114, 1118, 1122, 1123, 1126, 1129,
     1128, 1130, 1131, 1132, 1133, 1070, 1134,  643,  552,  548,

     1139,  444, 1144,  360,  285,  252, 1142,  133, 1309, 1177,
     1179,  143, 1183,   57
    } ;

static yyconst flex_int16_t yy_def[615] =
    {   0,
      609,    1,  609,  609,  609,  609,  610,  611,  612,  609,
      611,  611,  611,  611,  613,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  610,  609,  611,  609,
      614,  614,  609,  609,  611,  611,  611,  611,  611,  613,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  609,  614,  614,  609,  611,  611,  611,
       49,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,   49,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      609,  609,  609,  609,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  207,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  609,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,    0,  609,
      609,  609,  609,  609
    } ;

static yyconst flex_int16_t yy_nxt[1353] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,    8,    8,    8,   16,   17,
       18,   19,   20,   21,   22,    8,   23,    8,   24,   25,
       26,   27,   28,    8,   29,   30,   31,   32,   33,   34,
       35,    8,   36,   42,   40,   43,   43,   43,   43,   44,
       44,   44,   44,   45,   45,   45,   45,   40,   46,  135,
       40,   40,  152,   40,   47,   48,   48,   48,   48,   40,
       47,   48,   48,   48,   48,   40,   40,   69,  138,   40,
       70,   40,  158,   40,   51,   40,   40,   71,   56,   40,
      102,   52,   57,   53,   40,   54,   49,   58,   55,   60,

       59,   61,   40,  172,   40,   40,  194,   64,  146,   40,
      128,   65,   62,   78,   83,   66,   63,   67,   40,   79,
       68,   40,   84,  129,   40,   80,   72,   85,   73,   74,
       40,   86,   40,  130,   81,   82,   75,   87,   40,   90,
       76,   40,   77,  131,   40,   41,   40,  133,   91,   40,
       88,   40,   40,   99,   92,   40,   89,   40,   40,  100,
      142,  147,  132,  145,  101,  148,   93,  170,   94,   40,
       40,  143,   95,  144,   96,   40,   97,   40,   98,  103,
      149,  150,   40,   40,  155,   40,   40,  115,   40,  104,
      153,  105,  106,  151,  107,  108,  109,  154,  110,   40,

      116,  163,   40,  117,  111,   40,  112,  113,  159,  114,
      118,  103,  171,  162,  188,   40,  136,  136,  136,  136,
      156,  119,  157,  120,  121,   40,  122,   40,  123,   40,
      124,  359,  125,  165,   40,  183,  126,  127,   43,   43,
       43,   43,  137,   44,   44,   44,   44,   47,   45,   45,
       45,   45,   40,  139,  139,  139,  139,   40,  164,   40,
      140,  257,   40,   40,  200,   40,  140,   47,   48,   48,
       48,   48,   40,  141,  141,  141,  141,   40,  178,  141,
      141,   40,  141,  141,  141,  141,  141,  141,  160,   40,
       40,   40,   40,   40,   40,   40,  166,   40,   40,  175,

      161,  173,   40,   40,   40,  190,  168,   40,   40,  186,
       40,  184,  167,  169,  179,  174,  176,  185,   40,   40,
      177,  187,  189,  191,   40,  180,  181,  195,  182,   40,
       40,   40,  201,  192,  193,   40,   40,   40,  197,  199,
       40,  196,   40,   40,  202,   40,   40,   40,  203,   40,
       40,   40,  198,  205,  214,  222,  209,  204,  210,  224,
      206,   40,  227,   40,   40,  225,  211,  207,  215,  223,
      208,  220,   40,   40,  212,   40,  216,   40,  213,  217,
       40,  226,  218,  232,   40,  219,  221,   40,   40,   40,
      228,   40,   40,  230,   40,   40,  256,  234,  229,   40,

      233,  236,   40,  240,  231,  238,  267,  235,  249,   40,
      258,  239,  241,   40,  250,  237,   40,  242,   40,   40,
      251,  252,  254,   40,  255,   40,  243,  244,   40,   40,
      279,  245,  269,  253,  259,   40,  246,  268,   40,  247,
      260,  271,  272,   40,  248,  136,  136,  136,  136,  262,
      262,  262,  262,   40,  292,   40,  263,   40,  273,  270,
       40,  284,  263,  139,  139,  139,  139,   40,  274,   40,
      140,   40,   40,   40,   40,  280,  140,  264,  265,  276,
      266,  266,  266,  266,   40,   40,   40,   40,  281,   40,
       40,   40,  275,   40,  277,  278,  282,  290,  285,  286,

      283,   40,  287,   40,   40,   40,  293,   40,   40,   40,
      291,  289,   40,   40,  288,  300,  297,  299,   40,   40,
       40,   40,  295,  298,  301,  296,   40,  302,  303,  304,
      294,  306,  308,   40,   40,  307,   40,   40,   40,   40,
       40,  310,   40,  305,  309,  311,   40,   40,   40,   40,
       40,   40,  313,   40,  315,   40,  323,  312,  330,  317,
      316,   40,  314,   40,  337,   40,   40,  332,   40,  318,
      319,  319,  319,  319,  320,  321,  319,  319,  322,  319,
      319,  319,  319,  319,  319,   40,  328,  329,   40,   40,
       40,  335,   40,   40,  324,   40,  325,  331,   40,   40,

      326,   40,  327,   40,  341,  333,   40,  336,  339,   40,
       40,  334,  338,   40,   40,   40,  340,   40,   40,  347,
      346,  342,   40,  349,   40,   40,  343,  345,  350,  344,
      348,   40,   40,  351,  355,   40,  352,  353,  358,  356,
      357,   40,   40,  354,  262,  262,  262,  262,   40,  264,
      264,  263,  362,  362,  362,  362,   40,  263,  413,  360,
      362,  362,  362,  362,   40,  361,  266,  266,  266,  266,
       40,  266,  266,  266,  266,   40,   40,   40,   40,   40,
       40,  363,   40,  364,  367,   40,   40,  368,   40,   40,
       40,   40,   40,  372,  365,  366,   40,  377,   40,   40,

       40,  371,  373,   40,   40,  369,   40,  375,  370,  380,
       40,  376,  381,  382,   40,   40,   40,  374,  378,  379,
       40,   40,   40,  383,   40,  389,   40,   40,   40,   40,
      390,  388,   40,  384,   40,   40,  385,   40,  386,  387,
       40,  394,   40,  391,  393,  392,  396,  395,   40,  397,
       40,   40,  399,  398,   40,   40,   40,  493,  405,  403,
       40,   40,   40,   40,  400,  401,  402,  404,   40,  407,
      409,  411,  414,   40,   40,  406,   40,   40,  415,  412,
       40,  417,  416,  408,  410,  418,   40,  420,   40,   40,
       40,   40,  419,   40,   40,  421,   40,   40,  422,  426,

      423,  424,   40,  425,   40,   40,   40,   40,   40,   40,
      427,   40,  436,  430,   40,  444,  437,  428,  429,  435,
       40,  433,  362,  362,  362,  362,   40,  439,  432,   40,
       40,  431,   40,  434,  440,   40,  438,  441,   40,   40,
      442,   40,   40,   40,   40,   40,   40,  443,  447,   40,
       40,  445,  451,  452,   40,   40,   40,  446,  448,   40,
      450,  455,  453,  454,  456,  449,   40,   40,   40,  457,
       40,   40,  458,   40,   40,   40,   40,  462,   40,   40,
      464,  465,  459,  460,  466,  467,  461,  463,  468,   40,
       40,  469,   40,   40,   40,   40,  471,   40,   40,   40,

       40,   40,  473,   40,   40,  472,  475,  470,  477,  481,
      480,   40,  474,   40,   40,  483,  478,   40,  476,  486,
       40,  479,   40,  482,   40,   40,  485,   40,   40,   40,
       40,   40,   40,   40,  484,  489,  492,  488,   40,  494,
      487,   40,  491,   40,  543,  501,  496,  490,   40,  495,
      497,   40,  498,  499,  500,   40,   40,  502,   40,   40,
      503,  505,   40,   40,  504,  507,  506,   40,   40,   40,
       40,   40,  511,   40,   40,   40,   40,   40,  512,  509,
      508,   40,  513,  514,  510,  515,   40,  518,   40,  517,
       40,   40,  519,   40,   40,  516,   40,   40,  522,  520,

       40,   40,  526,  527,  521,   40,  525,   40,   40,  523,
       40,   40,  529,  528,  532,  530,  524,   40,   40,   40,
      536,   40,  531,  537,  538,   40,  539,   40,   40,  533,
       40,  534,  541,   40,   40,  535,   40,   40,   40,   40,
       40,   40,   40,  547,  540,   40,   40,  556,  551,  553,
      542,  548,  544,  545,  549,  552,  546,   40,   40,  559,
      555,  550,   40,   40,  554,  557,   40,  558,   40,   40,
       40,  561,   40,   40,   40,  564,   40,  562,   40,   40,
       40,  567,   40,   40,   40,  571,  560,   40,  565,  573,
       40,  569,  563,   40,  570,   40,   40,  572,   40,  568,

       40,  574,  566,   40,   40,  578,  575,  579,   40,   40,
       40,   40,  576,  582,   40,   40,   40,  586,  577,   40,
       40,   40,   40,  580,  583,  584,  585,   40,  588,  593,
      591,   40,  581,  589,  592,   40,   40,  587,  590,   40,
      594,   40,   40,   40,   40,   40,   40,   40,  595,  600,
      601,  602,   40,   40,  597,   40,  596,   40,   40,  606,
       40,   40,  598,  599,  605,   40,  607,   40,   40,  604,
       40,   40,   40,   40,  603,   40,  608,   37,   37,   37,
       37,   39,   39,   50,   40,   50,   50,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,  261,   40,

       40,   40,   40,   40,  134,   40,   38,  609,    3,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609
    } ;

static yyconst flex_int16_t yy_chk[1353] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   58,    9,    9,    9,    9,   10,
       10,   10,   10,   11,   11,   11,   11,   11,   12,  614,
       20,   63,   58,   12,   13,   13,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   16,   20,   46,   17,
       20,   29,   63,   46,   16,   75,   93,   20,   17,   54,
       29,   16,   17,   16,   18,   16,   13,   17,   16,   18,

       17,   18,   19,   75,   22,   33,   93,   19,   54,   24,
       33,   19,   18,   22,   24,   19,   18,   19,   23,   22,
       19,   21,   24,   33,   34,   23,   21,   24,   21,   21,
       26,   24,   25,   34,   23,   23,   21,   25,   36,   26,
       21,   28,   21,   35,   35,  612,  608,   36,   26,   55,
       25,   73,   51,   28,   26,   53,   25,   27,   52,   28,
       51,   55,   35,   53,   28,   55,   27,   73,   27,   56,
       57,   52,   27,   52,   27,   60,   27,   61,   27,   30,
       56,   57,   31,   30,   61,   64,   67,   31,   66,   30,
       60,   30,   30,   57,   30,   30,   30,   60,   30,   74,

       31,   67,   86,   31,   30,   62,   30,   30,   64,   30,
       31,   32,   74,   66,   86,   32,   42,   42,   42,   42,
       62,   32,   62,   32,   32,   69,   32,  257,   32,   83,
       32,  257,   32,   69,   68,   83,   32,   32,   43,   43,
       43,   43,   44,   44,   44,   44,   44,   45,   45,   45,
       45,   45,   45,   47,   47,   47,   47,   47,   68,   97,
       47,  131,   80,  131,   97,  606,   47,   48,   48,   48,
       48,   48,   48,   49,   49,   49,   49,   49,   80,   49,
       49,   65,   49,   49,   49,   49,   49,   49,   65,   71,
       77,   72,   76,   78,   84,   81,   71,   88,  605,   77,

       65,   76,   79,   82,   85,   88,   72,   87,   89,   85,
       91,   84,   71,   72,   81,   76,   78,   84,   94,   92,
       79,   85,   87,   89,   98,   82,   82,   94,   82,   95,
       96,   99,   98,   91,   92,  100,  101,  102,   95,   96,
      103,   94,  104,  105,   99,  107,  110,  112,  100,  114,
      111,  106,   95,  102,  107,  110,  105,  101,  106,  111,
      102,  108,  114,  109,  118,  112,  106,  103,  107,  110,
      104,  109,  119,  604,  106,  113,  108,  115,  106,  108,
      117,  113,  108,  118,  120,  108,  109,  121,  123,  132,
      115,  130,  122,  117,  124,  143,  130,  120,  115,  126,

      119,  122,  127,  124,  117,  123,  143,  121,  126,  129,
      132,  123,  124,  133,  127,  122,  128,  124,  125,  144,
      128,  128,  129,  146,  129,  159,  125,  125,  149,  171,
      159,  125,  146,  128,  133,  151,  125,  144,  147,  125,
      133,  149,  151,  152,  125,  136,  136,  136,  136,  137,
      137,  137,  137,  153,  171,  164,  137,  602,  152,  147,
      160,  164,  137,  139,  139,  139,  139,  139,  153,  154,
      139,  156,  157,  161,  169,  160,  139,  140,  140,  156,
      140,  140,  140,  140,  140,  165,  158,  163,  161,  168,
      166,  170,  154,  167,  157,  158,  163,  169,  165,  166,

      163,  172,  167,  173,  174,  178,  172,  175,  176,  177,
      170,  168,  179,  182,  167,  177,  175,  176,  184,  180,
      181,  185,  174,  175,  178,  174,  183,  179,  180,  181,
      173,  182,  184,  186,  187,  183,  188,  189,  190,  193,
      200,  186,  203,  181,  185,  187,  204,  211,  219,  221,
      209,  208,  189,  229,  193,  210,  211,  188,  219,  203,
      200,  600,  190,  213,  229,  599,  217,  221,  227,  204,
      207,  207,  207,  207,  208,  209,  207,  207,  210,  207,
      207,  207,  207,  207,  207,  212,  213,  217,  220,  224,
      225,  227,  228,  230,  212,  232,  212,  220,  233,  231,

      212,  234,  212,  241,  232,  224,  238,  228,  231,  239,
      243,  225,  230,  245,  247,  248,  231,  249,  250,  243,
      241,  233,  252,  247,  256,  253,  234,  239,  248,  238,
      245,  254,  251,  249,  253,  255,  250,  251,  256,  254,
      255,  259,  260,  252,  262,  262,  262,  262,  330,  263,
      263,  262,  263,  263,  263,  263,  598,  262,  330,  259,
      264,  264,  264,  264,  267,  260,  265,  265,  265,  265,
      265,  266,  266,  266,  266,  266,  268,  269,  271,  272,
      276,  267,  277,  268,  272,  278,  279,  276,  280,  281,
      282,  283,  285,  280,  269,  271,  284,  285,  287,  286,

      293,  279,  281,  289,  288,  277,  290,  283,  278,  288,
      294,  284,  289,  290,  295,  296,  299,  282,  286,  287,
      300,  302,  303,  293,  304,  300,  305,  306,  308,  442,
      302,  299,  307,  294,  309,  313,  295,  314,  295,  296,
      316,  306,  317,  303,  305,  304,  308,  307,  318,  309,
      320,  323,  314,  313,  322,  324,  329,  442,  323,  320,
      325,  326,  327,  331,  316,  317,  318,  322,  332,  325,
      326,  327,  331,  334,  335,  324,  337,  338,  332,  329,
      340,  335,  334,  325,  326,  337,  342,  340,  345,  346,
      348,  347,  338,  350,  349,  342,  352,  353,  345,  349,

      346,  347,  354,  348,  355,  357,  360,  364,  365,  373,
      350,  359,  364,  354,  367,  373,  365,  352,  353,  360,
      368,  359,  362,  362,  362,  362,  372,  368,  357,  369,
      370,  355,  374,  359,  369,  371,  367,  370,  375,  376,
      371,  377,  378,  379,  387,  380,  382,  372,  376,  385,
      386,  374,  380,  382,  389,  388,  390,  375,  377,  391,
      379,  387,  385,  386,  388,  378,  392,  393,  394,  389,
      396,  397,  390,  405,  398,  399,  400,  394,  402,  401,
      397,  398,  391,  392,  399,  400,  393,  396,  401,  404,
      413,  402,  414,  415,  417,  418,  405,  422,  425,  419,

      428,  427,  414,  426,  429,  413,  417,  404,  419,  427,
      426,  431,  415,  432,  433,  429,  422,  434,  418,  433,
      435,  425,  437,  428,  438,  440,  432,  444,  445,  441,
      443,  451,  446,  519,  431,  437,  441,  435,  455,  443,
      434,  456,  440,  461,  519,  455,  445,  438,  450,  444,
      446,  458,  450,  450,  451,  459,  460,  456,  463,  468,
      458,  460,  469,  472,  459,  463,  461,  470,  473,  479,
      485,  480,  472,  486,  488,  489,  491,  496,  473,  469,
      468,  487,  479,  480,  470,  485,  493,  488,  497,  487,
      498,  499,  489,  500,  502,  486,  503,  504,  496,  491,

      505,  506,  500,  502,  493,  507,  499,  508,  509,  497,
      511,  512,  504,  503,  507,  505,  498,  515,  513,  514,
      512,  516,  506,  513,  514,  517,  515,  518,  521,  508,
      522,  509,  517,  523,  524,  511,  526,  527,  528,  529,
      535,  538,  533,  524,  516,  537,  542,  538,  529,  535,
      518,  526,  521,  522,  527,  533,  523,  536,  540,  542,
      537,  528,  541,  544,  536,  540,  547,  541,  548,  549,
      550,  547,  551,  552,  553,  550,  554,  548,  555,  556,
      557,  553,  558,  596,  559,  557,  544,  561,  551,  559,
      562,  555,  549,  563,  556,  564,  565,  558,  566,  554,

      567,  561,  552,  569,  570,  565,  562,  566,  575,  571,
      572,  573,  563,  570,  576,  577,  578,  575,  564,  583,
      580,  581,  584,  567,  571,  572,  573,  585,  577,  584,
      581,  586,  569,  578,  583,  587,  588,  576,  580,  589,
      585,  591,  590,  592,  593,  594,  595,  597,  586,  591,
      592,  593,  601,  582,  588,  607,  587,  603,  579,  601,
      574,  568,  589,  590,  597,  560,  603,  546,  545,  595,
      543,  539,  534,  532,  594,  531,  607,  610,  610,  610,
      610,  611,  611,  613,  530,  613,  613,  525,  520,  510,
      501,  495,  494,  492,  490,  484,  483,  482,  481,  478,

      477,  476,  475,  474,  471,  467,  466,  465,  464,  462,
      457,  454,  453,  452,  449,  448,  447,  439,  436,  430,
      424,  423,  421,  420,  416,  412,  411,  410,  409,  408,
      407,  406,  403,  395,  384,  383,  381,  366,  363,  361,
      358,  356,  351,  344,  343,  341,  339,  336,  333,  328,
      321,  315,  312,  311,  310,  301,  298,  297,  292,  291,
      275,  274,  273,  270,  258,  246,  244,  242,  240,  237,
      236,  235,  226,  223,  222,  218,  216,  215,  214,  206,
      205,  202,  201,  199,  198,  197,  196,  195,  194,  192,
      191,  162,  155,  150,  148,  145,  142,  138,  134,  116,

       90,   70,   59,   39,   37,    8,    7,    3,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[157] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int Upgrade_flex_debug;
int Upgrade_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *Upgradetext;
#line 1 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
/*===-- UpgradeLexer.l - Scanner for 1.9 assembly files --------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by Reid Spencer and is distributed under the 
// University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM 1.9 assembly languages files.
//
//===----------------------------------------------------------------------===*/
#line 28 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
#include "UpgradeInternals.h"
#include "llvm/Module.h"
#include <list>
#include "UpgradeParser.h"
#include <cctype>
#include <cstdlib>

#define YY_INPUT(buf,result,max_size) \
{ \
  if (LexInput->good() && !LexInput->eof()) { \
    LexInput->read(buf,max_size); \
    result = LexInput->gcount(); \
  } else {\
    result = YY_NULL; \
  } \
}

#define YY_NEVER_INTERACTIVE 1

// Construct a token value for a non-obsolete token
#define RET_TOK(type, Enum, sym) \
  Upgradelval.type = Enum; \
  return sym

#define RET_TY(sym,NewTY,sign) \
  Upgradelval.PrimType.T = NewTY; \
  Upgradelval.PrimType.S = sign; \
  return sym

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size

// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.  If AllowNull is set to false, a \00 value will cause
// an exception to be thrown.
//
// If AllowNull is set to true, the return value of the function points to the
// last character of the string in memory.
//
char *UnEscapeLexed(char *Buffer, bool AllowNull) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\' && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
      char Tmp = BIn[3]; BIn[3] = 0;     // Terminate string
      *BOut = (char)strtol(BIn+1, 0, 16);  // Convert to number
      if (!AllowNull && !*BOut)
        error("String literal cannot accept \\00 escape!");

      BIn[3] = Tmp;                  // Restore character
      BIn += 3;                      // Skip over handled chars
      ++BOut;
    } else {
      *BOut++ = *BIn++;
    }
  }

  return BOut;
}

// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      error("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      error("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  // Behave nicely in the face of C TBAA rules... see:
  // http://www.nullstone.com/htmls/category/aliastyp.htm
  union {
    uint64_t UI;
    double FP;
  } UIntToFP;
  UIntToFP.UI = HexIntToVal(Buffer);

  assert(sizeof(double) == sizeof(uint64_t) &&
         "Data sizes incompatible on this target!");
  return UIntToFP.FP;   // Cast Hex constant to double
}


} // End llvm namespace

using namespace llvm;

/* Comments start with a ; and go till end of line */
/* Variable(Value) identifiers start with a % sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* [PN]Integer: match positive and negative literal integer values that
 * are preceeded by a '%' character.  These represent unnamed variable slots.
 */
/* E[PN]Integer: match positive and negative literal integer values */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 1130 "UpgradeLexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int Upgradewrap (void );
#else
extern int Upgradewrap (void );
#endif
#endif

    static inline void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( Upgradetext, Upgradeleng, 1, Upgradeout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( Upgradein )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( Upgradein ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, Upgradein))==0 && ferror(Upgradein)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(Upgradein); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int Upgradelex (void);

#define YY_DECL int Upgradelex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after Upgradetext and Upgradeleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 189 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"


#line 1286 "UpgradeLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! Upgradein )
			Upgradein = stdin;

		if ( ! Upgradeout )
			Upgradeout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			Upgradeensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				Upgrade_create_buffer(Upgradein,YY_BUF_SIZE );
		}

		Upgrade_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of Upgradetext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 610 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 609 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < Upgradeleng; ++yyl )
				if ( Upgradetext[yyl] == '\n' )
					   
    Upgradelineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 191 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 193 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 194 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 195 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 196 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 197 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 198 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return GLOBAL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 199 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return CONSTANT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 200 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return INTERNAL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 201 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return LINKONCE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 202 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return WEAK; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 203 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return APPENDING; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 204 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 205 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 206 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 207 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERNAL; }    /* Deprecated, turn into external */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 208 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 209 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return IMPLEMENTATION; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 210 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 211 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 212 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNDEF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 213 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 214 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return TO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 215 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return EXCEPT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 216 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return NOT; }  /* Deprecated, turned into XOR */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 217 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return TAIL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 218 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return TARGET; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 219 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return TRIPLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 220 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 221 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ENDIAN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 222 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return POINTERSIZE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 223 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return DATALAYOUT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 224 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return LITTLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 225 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return BIG; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 226 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return VOLATILE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 227 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ALIGN;  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 228 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return SECTION; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 229 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return MODULE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 230 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 231 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 233 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return CC_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 234 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 235 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return CSRETCC_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 236 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 237 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 238 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return X86_STDCALLCC_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 239 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return X86_FASTCALLCC_TOK; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 241 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SBYTE,  Type::Int8Ty,  Signed);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 242 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UBYTE,  Type::Int8Ty,  Unsigned); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 243 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SHORT,  Type::Int16Ty, Signed);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 244 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(USHORT, Type::Int16Ty, Unsigned); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 245 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(INT,    Type::Int32Ty, Signed);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 246 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UINT,   Type::Int32Ty, Unsigned); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 247 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LONG,   Type::Int64Ty, Signed);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 248 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(ULONG,  Type::Int64Ty, Unsigned); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 249 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(VOID,   Type::VoidTy,  Signless  ); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 250 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(BOOL,   Type::Int1Ty,  Unsigned  ); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 251 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(FLOAT,  Type::FloatTy, Signless ); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 252 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(DOUBLE, Type::DoubleTy,Signless); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 253 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LABEL,  Type::LabelTy, Signless ); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 254 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return TYPE;   }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 255 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return OPAQUE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 257 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, AddOp, ADD); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 258 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SubOp, SUB); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 259 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, MulOp, MUL); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 260 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, DivOp,  DIV); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 261 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, UDivOp, UDIV); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 262 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SDivOp, SDIV); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 263 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, FDivOp, FDIV); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 264 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, RemOp,  REM); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 265 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, URemOp, UREM); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 266 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SRemOp, SREM); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 267 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, FRemOp, FREM); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 268 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, AndOp, AND); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 269 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, OrOp , OR ); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 270 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, XorOp, XOR); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 271 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetNE, SETNE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 272 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetEQ, SETEQ); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 273 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetLT, SETLT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 274 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetGT, SETGT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 275 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetLE, SETLE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 276 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(BinaryOpVal, SetGE, SETGE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 277 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ICmpOp, ICMP); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 278 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, FCmpOp, FCMP); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 280 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return EQ; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 281 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return NE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 282 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return SLT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 283 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return SGT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 284 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return SLE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 285 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return SGE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 286 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ULT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 287 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return UGT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 288 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ULE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 289 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return UGE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 290 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return OEQ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 291 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ONE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 292 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return OLT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 293 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return OGT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 294 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return OLE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 295 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return OGE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 296 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return ORD; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 297 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNO; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 298 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return UEQ; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 299 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 301 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, PHIOp, PHI_TOK); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 302 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, CallOp, CALL); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 303 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, CastOp, CAST);  }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 304 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, TruncOp, TRUNC); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 305 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, ZExtOp , ZEXT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 306 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, SExtOp, SEXT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 307 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPTruncOp, FPTRUNC); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 308 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPExtOp, FPEXT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 309 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPToUIOp, FPTOUI); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 310 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, FPToSIOp, FPTOSI); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 311 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, UIToFPOp, UITOFP); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 312 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, SIToFPOp, SITOFP); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 313 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, PtrToIntOp, PTRTOINT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 314 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, IntToPtrOp, INTTOPTR); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 315 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(CastOpVal, BitCastOp, BITCAST); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 316 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, SelectOp, SELECT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 317 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ShlOp, SHL); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 318 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ShrOp, SHR); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 319 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, LShrOp, LSHR); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 320 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, AShrOp, ASHR); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 321 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return VANEXT_old; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 322 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return VAARG_old; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 323 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 324 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, RetOp, RET); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 325 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, BrOp, BR); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 326 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, SwitchOp, SWITCH); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 327 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, InvokeOp, INVOKE); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 328 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return UNWIND; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 329 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TermOpVal, UnreachableOp, UNREACHABLE); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 331 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, MallocOp, MALLOC); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 332 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, AllocaOp, ALLOCA); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 333 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, FreeOp, FREE); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 334 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, LoadOp, LOAD); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 335 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, StoreOp, STORE); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 336 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(MemOpVal, GetElementPtrOp, GETELEMENTPTR); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 338 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ExtractElementOp, EXTRACTELEMENT); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 339 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, InsertElementOp, INSERTELEMENT); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 340 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OtherOpVal, ShuffleVectorOp, SHUFFLEVECTOR); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 343 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{
                  UnEscapeLexed(Upgradetext+1);
                  Upgradelval.StrVal = strdup(Upgradetext+1);             // Skip %
                  return VAR_ID;
                }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 348 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{
                  Upgradetext[strlen(Upgradetext)-1] = 0;  // nuke colon
                  UnEscapeLexed(Upgradetext);
                  Upgradelval.StrVal = strdup(Upgradetext);
                  return LABELSTR;
                }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 354 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{
                  Upgradetext[strlen(Upgradetext)-2] = 0;  // nuke colon, end quote
                  UnEscapeLexed(Upgradetext+1);
                  Upgradelval.StrVal = strdup(Upgradetext+1);
                  return LABELSTR;
                }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 361 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ // Note that we cannot unescape a string constant here!  The
                   // string constant might contain a \00 which would not be
                   // understood by the string stuff.  It is valid to make a
                   // [sbyte] c"Hello World\00" constant, for example.
                   //
                   Upgradetext[strlen(Upgradetext)-1] = 0;           // nuke end quote
                   Upgradelval.StrVal = strdup(Upgradetext+1);  // Nuke start quote
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 372 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.UInt64Val = atoull(Upgradetext); return EUINT64VAL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 373 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(Upgradetext+1);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT64_MAX+1)
                    error("Constant too large for signed 64 bits!");
                  Upgradelval.SInt64Val = -Val;
                  return ESINT64VAL;
                }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 381 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{
                   Upgradelval.UInt64Val = HexIntToVal(Upgradetext+3);
                   return Upgradetext[0] == 's' ? ESINT64VAL : EUINT64VAL;
                 }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 386 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(Upgradetext+1);
                  if ((unsigned)Val != Val)
                    error("Invalid value number (too large)!");
                  Upgradelval.UIntVal = unsigned(Val);
                  return UINTVAL;
                }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 393 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{
                  uint64_t Val = atoull(Upgradetext+2);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT32_MAX+1)
                    error("Constant too large for signed 32 bits!");
                  Upgradelval.SIntVal = (int)-Val;
                  return SINTVAL;
                }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 402 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.FPVal = atof(Upgradetext); return FPVAL; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 403 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ Upgradelval.FPVal = HexToFP(Upgradetext); return FPVAL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 405 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  Upgrade_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 413 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 414 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
{ return Upgradetext[0]; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 416 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2213 "UpgradeLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed Upgradein at a new source and called
			 * Upgradelex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = Upgradein;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( Upgradewrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * Upgradetext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of Upgradelex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Upgraderealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			Upgraderestart(Upgradein  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 610 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 610 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 609);

	return yy_is_jam ? 0 : yy_current_state;
}

    static inline void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up Upgradetext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --Upgradelineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					Upgraderestart(Upgradein );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( Upgradewrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve Upgradetext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    Upgradelineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void Upgraderestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        Upgradeensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            Upgrade_create_buffer(Upgradein,YY_BUF_SIZE );
	}

	Upgrade_init_buffer(YY_CURRENT_BUFFER,input_file );
	Upgrade_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void Upgrade_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		Upgradepop_buffer_state();
	 *		Upgradepush_buffer_state(new_buffer);
     */
	Upgradeensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	Upgrade_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (Upgradewrap()) processing, but the only time this flag
	 * is looked at is after Upgradewrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void Upgrade_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	Upgradein = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE Upgrade_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Upgradealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Upgrade_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Upgradealloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in Upgrade_create_buffer()" );

	b->yy_is_our_buffer = 1;

	Upgrade_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with Upgrade_create_buffer()
 * 
 */
    void Upgrade_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Upgradefree((void *) b->yy_ch_buf  );

	Upgradefree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a Upgraderestart() or at EOF.
 */
    static void Upgrade_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	Upgrade_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then Upgrade_init_buffer was _probably_
     * called from Upgraderestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void Upgrade_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		Upgrade_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void Upgradepush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	Upgradeensure_buffer_stack();

	/* This block is copied from Upgrade_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from Upgrade_switch_to_buffer. */
	Upgrade_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void Upgradepop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	Upgrade_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		Upgrade_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void Upgradeensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Upgradealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Upgraderealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE Upgrade_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) Upgradealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Upgrade_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	Upgrade_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to Upgradelex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       Upgrade_scan_bytes() instead.
 */
YY_BUFFER_STATE Upgrade_scan_string (yyconst char * yystr )
{
    
	return Upgrade_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to Upgradelex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE Upgrade_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) Upgradealloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in Upgrade_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = Upgrade_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in Upgrade_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up Upgradetext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		Upgradetext[Upgradeleng] = (yy_hold_char); \
		(yy_c_buf_p) = Upgradetext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		Upgradeleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int Upgradeget_lineno  (void)
{
        
    return Upgradelineno;
}

/** Get the input stream.
 * 
 */
FILE *Upgradeget_in  (void)
{
        return Upgradein;
}

/** Get the output stream.
 * 
 */
FILE *Upgradeget_out  (void)
{
        return Upgradeout;
}

/** Get the length of the current token.
 * 
 */
int Upgradeget_leng  (void)
{
        return Upgradeleng;
}

/** Get the current token.
 * 
 */

char *Upgradeget_text  (void)
{
        return Upgradetext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void Upgradeset_lineno (int  line_number )
{
    
    Upgradelineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see Upgrade_switch_to_buffer
 */
void Upgradeset_in (FILE *  in_str )
{
        Upgradein = in_str ;
}

void Upgradeset_out (FILE *  out_str )
{
        Upgradeout = out_str ;
}

int Upgradeget_debug  (void)
{
        return Upgrade_flex_debug;
}

void Upgradeset_debug (int  bdebug )
{
        Upgrade_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from Upgradelex_destroy(), so don't allocate here.
     */

    /* We do not touch Upgradelineno unless the option is enabled. */
    Upgradelineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    Upgradein = stdin;
    Upgradeout = stdout;
#else
    Upgradein = (FILE *) 0;
    Upgradeout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * Upgradelex_init()
     */
    return 0;
}

/* Upgradelex_destroy is for both reentrant and non-reentrant scanners. */
int Upgradelex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		Upgrade_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		Upgradepop_buffer_state();
	}

	/* Destroy the stack itself. */
	Upgradefree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * Upgradelex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Upgradealloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Upgraderealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Upgradefree (void * ptr )
{
	free( (char *) ptr );	/* see Upgraderealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 416 "/home/asl/proj/llvm/src/tools/llvm-upgrade/UpgradeLexer.l"



