#define yy_create_buffer Upgrade_create_buffer
#define yy_delete_buffer Upgrade_delete_buffer
#define yy_scan_buffer Upgrade_scan_buffer
#define yy_scan_string Upgrade_scan_string
#define yy_scan_bytes Upgrade_scan_bytes
#define yy_flex_debug Upgrade_flex_debug
#define yy_init_buffer Upgrade_init_buffer
#define yy_flush_buffer Upgrade_flush_buffer
#define yy_load_buffer_state Upgrade_load_buffer_state
#define yy_switch_to_buffer Upgrade_switch_to_buffer
#define yyin Upgradein
#define yyleng Upgradeleng
#define yylex Upgradelex
#define yyout Upgradeout
#define yyrestart Upgraderestart
#define yytext Upgradetext
#define yylineno Upgradelineno

#line 20 "UpgradeLexer.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE (16384*64)

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static inline void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
static yyconst short int yy_acclist[209] =
    {   0,
      132,  130,  131,  129,  130,  131,  129,  131,  130,  131,
      130,  131,  130,  131,  130,  131,  130,  131,  130,  131,
      122,  130,  131,  122,  130,  131,    1,  130,  131,  130,
      131,  130,  131,  130,  131,  130,  131,  130,  131,  130,
      131,  130,  131,  130,  131,  130,  131,  130,  131,  130,
      131,  130,  131,  130,  131,  130,  131,  130,  131,  130,
      131,  130,  131,  130,  131,  130,  131,  130,  131,  130,
      131,  121,  119,  118,  118,  125,  123,  127,  122,    1,
      103,   39,   73,   23,  121,  118,  118,  126,  127,   20,
      127,  128,   61,   72,   37,   32,   40,   64,    3,   52,

       63,   81,   68,  102,   97,   98,   62,   74,  120,  127,
      127,   99,   47,   82,   83,   67,  111,   71,  112,   54,
      100,   22,  124,   66,   86,   70,   24,    4,   60,   65,
       53,   69,   46,   11,   85,  127,   34,    2,    5,   56,
       88,   58,   48,   76,   80,   78,   79,   77,   75,   50,
      113,   84,   49,   55,   21,  110,   43,   57,   28,  107,
       42,   90,   89,    7,  105,   31,  109,   36,   59,   96,
       92,  104,   25,   26,   91,  106,   51,  101,   95,   41,
        6,   27,   87,   35,    8,   16,    9,   94,   10,   93,
       33,   12,   14,   13,   30,   38,   15,   29,  108,  114,

      116,  117,   17,   44,  115,   18,   45,   19
    } ;

static yyconst short int yy_accept[568] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   24,   27,   30,   32,   34,   36,   38,
       40,   42,   44,   46,   48,   50,   52,   54,   56,   58,
       60,   62,   64,   66,   68,   70,   72,   72,   73,   73,
       74,   75,   76,   77,   77,   78,   78,   79,   80,   80,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,
       82,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   86,   87,   89,   90,   91,   92,   92,   93,   94,
       94,   94,   95,   95,   95,   96,   96,   97,   97,   97,
       97,   97,   98,   98,   98,   98,   98,   98,   98,   99,
       99,   99,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  102,  102,  102,  103,
      103,  103,  104,  105,  105,  105,  105,  105,  105,  105,
      105,  106,  106,  107,  107,  107,  107,  107,  107,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  109,  109,  109,  110,  111,  111,  111,  111,
      112,  112,  112,  112,  113,  113,  113,  114,  115,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  117,  117,  117,  117,  117,
      118,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  120,  121,  122,  122,  122,  123,  123,  123,
      123,  124,  124,  125,  125,  125,  125,  125,  125,  125,
      126,  126,  126,  126,  126,  127,  127,  127,  128,  128,

      128,  129,  129,  130,  130,  131,  132,  132,  132,  132,
      132,  132,  132,  133,  133,  133,  134,  134,  135,  135,
      135,  136,  137,  138,  138,  138,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  140,  140,  141,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  143,  143,  143,  143,  143,
      143,  143,  143,  144,  144,  144,  145,  146,  147,  148,
      149,  150,  151,  151,  151,  151,  152,  152,  152,  152,
      153,  154,  154,  155,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  157,  157,  157,  158,  158,  158,

      158,  158,  158,  158,  158,  159,  160,  161,  161,  161,
      162,  163,  164,  164,  164,  165,  165,  165,  165,  165,
      166,  166,  167,  168,  169,  170,  170,  170,  170,  171,
      171,  171,  172,  173,  174,  175,  176,  176,  176,  177,
      178,  179,  179,  179,  179,  179,  179,  180,  180,  181,
      181,  182,  183,  183,  183,  183,  183,  183,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  186,  186,  186,
      186,  186,  187,  187,  187,  187,  187,  188,  189,  190,
      190,  191,  191,  191,  191,  191,  192,  192,  192,  192,

      193,  193,  194,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  196,  196,  196,
      196,  196,  196,  196,  196,  197,  197,  197,  197,  197,
      197,  198,  198,  198,  198,  198,  199,  199,  199,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  201,  201,  202,  203,  204,  204,  205,
      205,  206,  207,  208,  208,  209,  209
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,    1,   16,   16,   16,   16,   17,   16,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,    5,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[44] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    3,
        3,    3,    3,    4,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst short int yy_base[572] =
    {   0,
        0,    0, 1222, 1223, 1223, 1223, 1217, 1206,   36,   40,
       44,   50,   56,   62,    0,   63,   66,   81,   89,   47,
      100,   97,   76,   96,  111,   46,   48,  110,   68,  140,
      126,  171,  120,  123,   73,  130, 1215, 1223, 1204, 1223,
        0,  159,  176,  199,  204,   95,  209,  224,  229,    0,
      134,  165,  137,  124,  169,  151,  159,   31, 1203,  168,
      210,  230,  233,  127,  241,  189,  176,  117,  242,  244,
      240,  243,  246,  249,  252,  253,  257,  259,  263,  265,
      266,  274,  268,  269,  273,  277,  282,  211, 1202,  287,
      290,  293,  294,  160,  270,  295,  304,  305,  299,  306,

      312,  296,  321,  324, 1201,  325,  309,  313,  333,  335,
      318,  340,  342,  332,  339,  347,  350,  215,  354,  356,
     1200,    0,  371,  375, 1199,  389,  406,    0, 1198,  365,
      363, 1197,  382,  359, 1196,  394, 1195,  357,  301,  393,
      390, 1194,  401,  395,  410,  411,  397,  414, 1193,  415,
      420,  418,  421,  423,  425,  422,  427,  433,  434,  435,
      439,  437,  436,  443,  440,  441,  451,  454,  457,  459,
      460,  462,  465,  466,  467, 1192,  470,  472, 1191,  379,
      474, 1190, 1189,  502,  479,  478,  483,  475,  513,  493,
     1188,  494, 1187,  477,  480,  496,  517,  518, 1186,  519,

      520,  521,  476,  527,  525,  523,  526,  529,  531,  537,
      538,  540,  541,  543,  545,  548,  553,  555,  559,  560,
      565, 1185,  562,  567, 1223,  574,  588,  595,  599,  604,
      588,  568,  589, 1184,  607,  608, 1183, 1182, 1181,  609,
      610,  611,  612,  614,  615,  617,  620,  622,  618,  621,
      625,  626,  629,  632, 1180,  630,  635,  641,  642, 1179,
     1178,  645,  643,  647,  649,  650,  651,  654,  652,  655,
      657, 1177, 1176, 1175,  659,  661, 1174,  662,  664,  674,
        0,  675, 1173,  678,  681,  679,  680,  685,  693, 1172,
      682,  690,  695,  696, 1171,  698,  709, 1170,  701,  697,

     1169,  711, 1168,  713, 1167, 1166,  714,  715,  717,  719,
      720,  721, 1165,  723,  728, 1164,  729, 1163,  731,  730,
     1162,  737, 1161,  737,  739, 1160,  740,  748,  745,  751,
      754,  746,  757,  756,  760,  761,  764,  765,  766,  769,
     1159,  771, 1158, 1157,  772,  773,  774,  768,  780,  782,
      784,  787,  789,  790, 1156,  792,  793,  794,  796,  797,
      803,  800, 1155,  810,  811, 1154, 1153, 1152, 1151, 1150,
     1149, 1148,  814,  815,  816, 1147,  818,  817,  822, 1146,
     1145,  819, 1144, 1143,  820,  826,  824,  821,  836,  837,
      841,  839,  842, 1142,  845,  848, 1141,  849,  853,  823,

      852,  854,  855,  856, 1140, 1139, 1138,  863,  857, 1137,
     1136, 1135,  865,  869, 1134,  870,  875,  877,  864, 1133,
      881, 1132, 1131, 1130, 1129,  878,  883,  886, 1128,  889,
      891, 1127, 1126, 1125, 1124, 1123,  892,  890, 1122, 1121,
     1120,  893,  894,  896,  897,  895, 1119,  906, 1118,  907,
     1117, 1116,  909,  911,  913,  918,  914, 1115,  915,  917,
      920,  921,  919,  922,  926,  927, 1114,  928,  937,  938,
      942,  945,  941,  944,  949,  952, 1113,  955,  957,  958,
      956, 1112,  959,  960,  961,  962, 1111, 1110, 1107,  969,
     1097,  966,  976,  970,  967, 1096,  986,  987,  978, 1095,

      988, 1094, 1092,  989,  990,  995,  996,  997,  998, 1000,
     1002, 1003, 1004, 1005, 1006, 1009, 1091, 1008, 1012, 1015,
     1017, 1020, 1023, 1024, 1089, 1026, 1030, 1031, 1033, 1035,
     1088, 1036, 1037, 1038, 1041, 1084, 1043, 1044, 1082, 1042,
     1049, 1052, 1054, 1059, 1063, 1062, 1066, 1064, 1067, 1068,
     1069, 1070, 1079, 1073,  968,  827,  683, 1076,  579, 1077,
      578,  576,  490, 1078,  488, 1223, 1113, 1115,  124, 1119,
       76
    } ;

static yyconst short int yy_def[572] =
    {   0,
      566,    1,  566,  566,  566,  566,  567,  568,  569,  566,
      568,  568,  568,  568,  570,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  567,  566,  568,  566,
      571,  571,  566,  566,  568,  568,  568,  568,  568,  570,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      566,  571,  571,  566,  568,  568,  568,   49,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,   49,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  566,  566,  566,  566,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      184,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  566,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,    0,  566,  566,  566,  566,
      566
    } ;

static yyconst short int yy_nxt[1267] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,    8,    8,    8,   16,   17,
       18,   19,   20,   21,   22,    8,   23,    8,   24,   25,
       26,   27,   28,    8,   29,   30,   31,   32,   33,   34,
       35,    8,   36,   42,   40,   43,   43,   43,   43,   44,
       44,   44,   44,   45,   45,   45,   45,   40,   46,   40,
       40,   40,  139,   40,   47,   48,   48,   48,   48,   40,
       47,   48,   48,   48,   48,   40,   40,   69,  122,   40,
       88,   40,   89,   87,   51,  118,   40,   70,   56,   40,
       93,   52,   57,   53,   40,   54,   49,   58,   55,   60,

       59,   61,   40,  125,  119,   78,   79,   64,   40,   40,
       40,   65,   62,   40,   80,   66,   63,   67,   71,   76,
       68,   72,   81,   40,   40,   77,   41,   82,   73,   84,
       40,   83,   74,   40,   75,   90,   40,   40,  115,   40,
       40,   91,   85,   40,  104,  117,   92,   40,   86,   94,
       40,  116,  120,   40,  151,  129,  133,  105,  132,   95,
      106,   96,   97,  146,   40,   98,   99,  107,  123,  123,
      123,  123,   40,   40,  100,  136,  101,  102,   40,  103,
       94,   40,   40,  137,   40,   43,   43,   43,   43,   40,
      108,  130,  109,  131,  134,  138,  140,  110,  135,  111,

      184,  112,   40,  141,  150,  113,  114,  124,   44,   44,
       44,   44,   47,   45,   45,   45,   45,   40,  126,  126,
      126,  126,   40,   40,   40,  127,  221,  149,   40,  178,
      142,  127,   47,   48,   48,   48,   48,   40,  128,  128,
      128,  128,   40,   40,  128,  128,   40,  128,  128,  128,
      128,  128,  128,   40,   40,   40,   40,   40,  143,   40,
      144,  147,   40,  152,  153,   40,   40,  145,  155,  157,
       40,  159,   40,  148,  161,  156,   40,  158,   40,   40,
      154,   40,   40,   40,  168,  160,   40,   40,  163,  162,
       40,  164,  171,  173,  175,   40,  169,  174,  165,  166,

       40,  167,  170,   40,  172,  176,   40,   40,   40,   40,
      177,  185,   40,  179,   40,  199,  180,   40,   40,   40,
      195,  186,   40,  182,  187,   40,   40,  181,  197,  237,
      183,   40,  188,  191,   40,  196,  192,   40,   40,  193,
      189,  205,  194,  198,  190,   40,   40,  200,   40,  210,
      201,  203,   40,   40,  206,   40,  217,  216,  202,  207,
       40,  211,  204,   40,  215,  208,  212,   40,  220,   40,
       40,  209,   40,  218,  213,  219,   40,  236,   40,  214,
      123,  123,  123,  123,  226,  226,  226,  226,  222,  231,
      223,  227,   40,  234,  232,   40,  224,  227,  126,  126,

      126,  126,   40,   40,  233,  127,   40,   40,   40,  279,
       40,  127,  228,  229,   40,  230,  230,  230,  230,   40,
      235,  238,  240,   40,   40,  244,  239,   40,   40,  243,
      241,   40,  242,   40,   40,   40,   40,  246,   40,  248,
       40,  247,  245,  250,  249,  251,   40,   40,   40,   40,
       40,  256,   40,   40,   40,  263,   40,  252,  254,  262,
      253,  260,  265,  266,   40,  255,  258,   40,  261,  259,
       40,  264,   40,   40,  257,   40,  269,  267,   40,   40,
       40,  272,  268,   40,  270,   40,  273,   40,   40,   40,
       40,   40,   40,   40,  275,  271,   40,  285,  277,  274,

      292,   40,  293,   40,  276,  278,   40,   40,  300,   40,
      280,  281,  281,  281,  281,  282,  283,  281,  281,  284,
      281,  281,  281,  281,  281,  281,   40,  294,  291,  290,
       40,   40,   40,   40,   40,  286,   40,  287,   40,   40,
       40,  288,   40,  289,   40,  299,  295,  303,  298,  301,
       40,   40,  296,   40,   40,  297,   40,  302,   40,  304,
      309,   40,  307,  311,  305,  306,   40,  308,   40,  312,
      310,  315,   40,   40,  313,   40,  316,  317,   40,  314,
       40,   40,  319,  226,  226,  226,  226,  318,  324,   40,
      227,   40,   40,  320,  228,  228,  227,  322,  322,  322,

      322,   40,   40,  321,  322,  322,  322,  322,  230,  230,
      230,  230,   40,  230,  230,  230,  230,   40,  323,  325,
       40,   40,   40,   40,   40,   40,  327,   40,   40,  328,
       40,   40,  332,   40,   40,   40,  337,  326,   40,   40,
      331,  333,   40,   40,  340,   40,  329,  330,   40,  335,
      336,  341,  342,  338,   40,   40,   40,  334,   40,  339,
       40,  349,   40,   40,   40,   40,  343,   40,   40,  350,
       40,  344,   40,  348,   40,   40,  345,   40,  346,  347,
      355,  354,  353,  351,  352,  357,  356,   40,   40,  359,
      358,   40,   40,   40,   40,   40,   40,  363,   40,  360,

      361,  365,  367,   40,  364,  362,   40,  369,   40,   40,
       40,   40,  366,  373,   40,  371,  368,  374,  372,  375,
      376,  370,   40,  378,   40,  379,   40,   40,   40,  377,
       40,  380,   40,   40,   40,  381,   40,  382,  386,  383,
      384,   40,   40,   40,   40,  385,  322,  322,  322,  322,
       40,  387,   40,   40,  391,  394,  393,  388,   40,   40,
      395,   40,  389,  398,   40,  390,  392,   40,  397,   40,
       40,  399,  400,   40,   40,  396,  402,   40,   40,   40,
      401,   40,   40,  405,   40,   40,   40,   40,  403,  409,
      414,  410,  404,   40,  406,   40,  408,   40,  411,  412,

       40,  407,   40,   40,  413,   40,   40,   40,  415,   40,
       40,  416,  420,   40,  423,  422,   40,  418,  424,  425,
      417,  419,  421,   40,   40,  426,  427,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,  431,   40,
       40,  428,  430,  433,  435,  439,  438,  429,  432,   40,
       40,  436,   40,  434,   40,   40,  437,  440,   40,  443,
      441,   40,   40,  442,  450,   40,   40,   40,   40,   40,
       40,  446,  445,  449,  451,  444,   40,   40,   40,  448,
      455,  456,   40,   40,  447,  458,  453,  454,   40,  452,
       40,   40,  460,  457,   40,  462,   40,  461,  459,   40,

      463,  464,   40,   40,   40,   40,   40,   40,   40,   40,
       40,  468,  465,  466,  469,  471,  467,  474,  470,   40,
       40,  472,   40,  475,   40,  476,   40,   40,   40,  473,
       40,   40,   40,   40,   40,   40,  483,  484,  478,   40,
       40,   40,  477,  479,  489,  480,  482,  485,  486,  487,
       40,   40,  481,  488,   40,   40,  494,   40,   40,  493,
      495,  490,   40,  491,  498,   40,  492,  496,   40,   40,
       40,   40,   40,   40,   40,   40,  500,  497,  504,   40,
       40,   40,   40,   40,  508,  499,  513,  505,  510,   40,
      506,   40,  501,  502,  503,  509,  511,  507,  512,   40,

       40,   40,   40,   40,  516,  515,  514,  518,   40,   40,
       40,   40,  519,   40,  521,   40,   40,   40,   40,   40,
      524,   40,   40,  528,  517,   40,  522,  530,   40,  526,
       40,  520,  527,   40,  529,  531,   40,   40,  525,   40,
      523,  532,  535,   40,   40,  536,   40,  533,   40,   40,
       40,   40,  539,  534,   40,   40,   40,   40,  543,  540,
      537,  541,   40,  542,  545,   40,  548,   40,  538,  550,
      549,  546,   40,  544,  547,   40,   40,   40,  551,   40,
       40,   40,   40,   40,  552,  557,   40,  558,  559,   40,
       40,   40,   40,  553,  554,   40,  563,   40,  555,  564,

      556,   40,   40,  562,   40,   40,  561,   40,   40,   40,
       40,  560,  565,   37,   37,   37,   37,   39,   39,   50,
       40,   50,   50,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,  225,   40,   40,   40,   40,  121,   40,
       38,  566,    3,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566
    } ;

static yyconst short int yy_chk[1267] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   58,    9,    9,    9,    9,   10,
       10,   10,   10,   11,   11,   11,   11,   11,   12,   26,
       20,   27,   58,   12,   13,   13,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   16,   20,  571,   17,
       27,   29,   27,   26,   16,   35,   35,   20,   17,   23,
       29,   16,   17,   16,   18,   16,   13,   17,   16,   18,

       17,   18,   19,   46,   35,   23,   23,   19,   46,   24,
       22,   19,   18,   21,   24,   19,   18,   19,   21,   22,
       19,   21,   24,   28,   25,   22,  569,   24,   21,   25,
       68,   24,   21,   33,   21,   28,   34,   54,   33,   31,
       64,   28,   25,   36,   31,   34,   28,   51,   25,   30,
       53,   33,   36,   30,   68,   51,   54,   31,   53,   30,
       31,   30,   30,   64,   56,   30,   30,   31,   42,   42,
       42,   42,   57,   94,   30,   56,   30,   30,   52,   30,
       32,   60,   55,   57,   32,   43,   43,   43,   43,   67,
       32,   52,   32,   52,   55,   57,   60,   32,   55,   32,

       94,   32,   66,   60,   67,   32,   32,   44,   44,   44,
       44,   44,   45,   45,   45,   45,   45,   45,   47,   47,
       47,   47,   47,   61,   88,   47,  118,   66,  118,   88,
       61,   47,   48,   48,   48,   48,   48,   48,   49,   49,
       49,   49,   49,   62,   49,   49,   63,   49,   49,   49,
       49,   49,   49,   71,   65,   69,   72,   70,   62,   73,
       62,   65,   74,   69,   70,   75,   76,   63,   71,   72,
       77,   74,   78,   65,   75,   71,   79,   73,   80,   81,
       70,   83,   84,   95,   80,   74,   85,   82,   77,   76,
       86,   78,   82,   83,   85,   87,   81,   84,   79,   79,

       90,   79,   81,   91,   82,   86,   92,   93,   96,  102,
       87,   95,   99,   90,  139,  102,   91,   97,   98,  100,
       99,   96,  107,   93,   97,  101,  108,   92,  100,  139,
       93,  111,   97,   98,  103,   99,   98,  104,  106,   98,
       97,  107,   98,  101,   97,  114,  109,  103,  110,  111,
      104,  106,  115,  112,  108,  113,  115,  114,  104,  109,
      116,  112,  106,  117,  113,  110,  112,  119,  117,  120,
      138,  110,  134,  116,  112,  116,  131,  138,  130,  112,
      123,  123,  123,  123,  124,  124,  124,  124,  119,  130,
      120,  124,  180,  134,  131,  133,  120,  124,  126,  126,

      126,  126,  126,  141,  133,  126,  140,  136,  144,  180,
      147,  126,  127,  127,  143,  127,  127,  127,  127,  127,
      136,  140,  143,  145,  146,  147,  141,  148,  150,  146,
      144,  152,  145,  151,  153,  156,  154,  150,  155,  151,
      157,  150,  148,  153,  152,  154,  158,  159,  160,  163,
      162,  158,  161,  165,  166,  163,  164,  154,  156,  162,
      155,  161,  165,  166,  167,  157,  160,  168,  161,  160,
      169,  164,  170,  171,  159,  172,  168,  166,  173,  174,
      175,  171,  167,  177,  169,  178,  172,  181,  188,  203,
      194,  186,  185,  195,  174,  170,  187,  188,  177,  173,

      194,  565,  195,  563,  175,  178,  190,  192,  203,  196,
      181,  184,  184,  184,  184,  185,  186,  184,  184,  187,
      184,  184,  184,  184,  184,  184,  189,  196,  192,  190,
      197,  198,  200,  201,  202,  189,  206,  189,  205,  207,
      204,  189,  208,  189,  209,  202,  197,  205,  201,  204,
      210,  211,  198,  212,  213,  200,  214,  204,  215,  206,
      211,  216,  209,  213,  207,  208,  217,  210,  218,  214,
      212,  217,  219,  220,  215,  223,  218,  219,  221,  216,
      224,  232,  221,  226,  226,  226,  226,  220,  232,  562,
      226,  561,  559,  223,  227,  227,  226,  227,  227,  227,

      227,  231,  233,  224,  228,  228,  228,  228,  229,  229,
      229,  229,  229,  230,  230,  230,  230,  230,  231,  233,
      235,  236,  240,  241,  242,  243,  236,  244,  245,  240,
      246,  249,  244,  247,  250,  248,  249,  235,  251,  252,
      243,  245,  253,  256,  252,  254,  241,  242,  257,  247,
      248,  253,  254,  250,  258,  259,  263,  246,  262,  251,
      264,  263,  265,  266,  267,  269,  256,  268,  270,  264,
      271,  257,  275,  262,  276,  278,  258,  279,  258,  259,
      269,  268,  267,  265,  266,  271,  270,  280,  282,  276,
      275,  284,  286,  287,  285,  291,  557,  282,  288,  278,

      279,  285,  287,  292,  284,  280,  289,  288,  293,  294,
      300,  296,  286,  292,  299,  289,  287,  293,  291,  294,
      296,  288,  297,  299,  302,  300,  304,  307,  308,  297,
      309,  302,  310,  311,  312,  304,  314,  307,  311,  308,
      309,  315,  317,  320,  319,  310,  322,  322,  322,  322,
      324,  312,  325,  327,  319,  324,  320,  314,  329,  332,
      325,  328,  315,  329,  330,  317,  319,  331,  328,  334,
      333,  330,  331,  335,  336,  327,  333,  337,  338,  339,
      332,  348,  340,  336,  342,  345,  346,  347,  334,  340,
      348,  342,  335,  349,  337,  350,  339,  351,  345,  346,

      352,  338,  353,  354,  347,  356,  357,  358,  349,  359,
      360,  350,  354,  362,  358,  357,  361,  352,  359,  360,
      351,  353,  356,  364,  365,  361,  362,  373,  374,  375,
      378,  377,  382,  385,  388,  379,  400,  387,  374,  386,
      556,  364,  373,  377,  379,  387,  386,  365,  375,  389,
      390,  382,  392,  378,  391,  393,  385,  388,  395,  391,
      389,  396,  398,  390,  400,  401,  399,  402,  403,  404,
      409,  395,  393,  399,  401,  392,  408,  419,  413,  398,
      408,  408,  414,  416,  396,  413,  403,  404,  417,  402,
      418,  426,  416,  409,  421,  418,  427,  417,  414,  428,

      419,  421,  430,  438,  431,  437,  442,  443,  446,  444,
      445,  430,  426,  427,  431,  438,  428,  444,  437,  448,
      450,  442,  453,  445,  454,  446,  455,  457,  459,  443,
      460,  456,  463,  461,  462,  464,  457,  459,  450,  465,
      466,  468,  448,  453,  464,  454,  456,  460,  461,  462,
      469,  470,  455,  463,  473,  471,  470,  474,  472,  469,
      471,  465,  475,  466,  474,  476,  468,  472,  478,  481,
      479,  480,  483,  484,  485,  486,  476,  473,  481,  492,
      495,  555,  490,  494,  486,  475,  495,  483,  492,  493,
      484,  499,  478,  479,  480,  490,  493,  485,  494,  497,

      498,  501,  504,  505,  499,  498,  497,  504,  506,  507,
      508,  509,  505,  510,  507,  511,  512,  513,  514,  515,
      510,  518,  516,  514,  501,  519,  508,  516,  520,  512,
      521,  506,  513,  522,  515,  518,  523,  524,  511,  526,
      509,  519,  522,  527,  528,  523,  529,  520,  530,  532,
      533,  534,  527,  521,  535,  540,  537,  538,  532,  528,
      524,  529,  541,  530,  534,  542,  538,  543,  526,  541,
      540,  535,  544,  533,  537,  546,  545,  548,  542,  547,
      549,  550,  551,  552,  543,  548,  554,  549,  550,  558,
      560,  564,  553,  544,  545,  539,  558,  536,  546,  560,

      547,  531,  525,  554,  517,  503,  552,  502,  500,  496,
      491,  551,  564,  567,  567,  567,  567,  568,  568,  570,
      489,  570,  570,  488,  487,  482,  477,  467,  458,  452,
      451,  449,  447,  441,  440,  439,  436,  435,  434,  433,
      432,  429,  425,  424,  423,  422,  420,  415,  412,  411,
      410,  407,  406,  405,  397,  394,  384,  383,  381,  380,
      376,  372,  371,  370,  369,  368,  367,  366,  363,  355,
      344,  343,  341,  326,  323,  321,  318,  316,  313,  306,
      305,  303,  301,  298,  295,  290,  283,  277,  274,  273,
      272,  261,  260,  255,  239,  238,  237,  234,  222,  199,

      193,  191,  183,  182,  179,  176,  149,  142,  137,  135,
      132,  129,  125,  121,  105,   89,   59,   39,   37,    8,
        7,    3,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
#define INITIAL 0
/*===-- UpgradeLexer.l - Scanner for 1.9 assembly files --------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by Reid Spencer and is distributed under the 
// University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM 1.9 assembly languages files.
//
//===----------------------------------------------------------------------===*/
#define YY_NEVER_INTERACTIVE 1
#line 28 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"

#include "ParserInternals.h"
#include "UpgradeParser.h"
#include <cctype>
#include <cstdlib>

#define YY_INPUT(buf,result,max_size) \
{ \
  if (LexInput->good() && !LexInput->eof()) { \
    LexInput->read(buf,max_size); \
    result = LexInput->gcount(); \
  } else {\
    result = YY_NULL; \
  } \
}


// Construct a token value for a non-obsolete token
#define RET_TOK(sym) \
  Upgradelval.String = new std::string(yytext); \
  return sym

#define RET_TY(sym,OldTY,NewTY,sign) \
  Upgradelval.Type.newTy = new std::string(NewTY); \
  Upgradelval.Type.oldTy = OldTY; \
  Upgradelval.Type.elemTy = VoidTy; \
  return sym

#define YY_NEVER_INTERACTIVE 1
/* Comments start with a ; and go till end of line */
/* Variable(Value) identifiers start with a % sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* [PN]Integer: match positive and negative literal integer values that
 * are preceeded by a '%' character.  These represent unnamed variable slots.
 */
/* E[PN]Integer: match positive and negative literal integer values */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 952 "UpgradeLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static inline void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 99 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"


#line 1106 "UpgradeLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 567 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 566 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 101 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 103 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( BEGINTOK); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 104 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ENDTOK); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 105 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TRUETOK);  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 106 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FALSETOK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 107 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DECLARE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 108 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( GLOBAL); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 109 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CONSTANT); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 110 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( INTERNAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 111 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LINKONCE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 112 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( WEAK); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( APPENDING); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DLLIMPORT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DLLEXPORT); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EXTERN_WEAK); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 117 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EXTERNAL); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UNINITIALIZED); }  // alias for external
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 119 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( IMPLEMENTATION); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 120 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ZEROINITIALIZER); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 121 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DOTDOTDOT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UNDEF); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 123 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( NULL_TOK); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 124 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TO); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 125 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TAIL); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 126 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TARGET); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 127 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TRIPLE); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 128 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DEPLIBS); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 129 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ENDIAN); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 130 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( POINTERSIZE); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 131 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DATALAYOUT); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 132 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LITTLE); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 133 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( BIG); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( VOLATILE); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 135 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ALIGN);  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 136 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SECTION); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 137 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( MODULE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 138 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ASM_TOK); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 139 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SIDEEFFECT); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 141 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CC_TOK); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 142 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CCC_TOK); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 143 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CSRETCC_TOK); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 144 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FASTCC_TOK); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 145 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( COLDCC_TOK); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 146 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( X86_STDCALLCC_TOK); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 147 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( X86_FASTCALLCC_TOK); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 149 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(VOID,VoidTy,"void",false); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 150 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(BOOL,BoolTy,"bool",false); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 151 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SBYTE,SByteTy,"sbyte",true); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 152 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UBYTE,UByteTy,"ubyte",false); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 153 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(SHORT,ShortTy,"short",true); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 154 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(USHORT,UShortTy,"ushort",false); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 155 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(INT,IntTy,"int",true);   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 156 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(UINT,UIntTy,"uint",false);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 157 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LONG,LongTy,"long",true);  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 158 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(ULONG,ULongTy,"ulong",false); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 159 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(FLOAT,FloatTy,"float",false); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 160 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(DOUBLE,DoubleTy,"double",false); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 161 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TY(LABEL,LabelTy,"label",false); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 162 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(OPAQUE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 163 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK(TYPE);   }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 165 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ADD); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 166 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SUB); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 167 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( MUL); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 168 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( DIV); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UDIV); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 170 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SDIV); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 171 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FDIV); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 172 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( REM);  }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 173 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UREM); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 174 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SREM); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 175 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FREM); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 176 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( AND); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 177 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( OR); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 178 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( XOR); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 179 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETNE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 180 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETEQ); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 181 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETLT); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 182 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETGT); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 183 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETLE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 184 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SETGE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 186 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( PHI_TOK); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 187 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CALL); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 188 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( CAST); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 189 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( TRUNC); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 190 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ZEXT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 191 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SEXT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 192 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FPTRUNC); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 193 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FPEXT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 194 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FPTOUI); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 195 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FPTOSI); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 196 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UITOFP); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 197 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SITOFP); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 198 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( PTRTOINT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 199 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( INTTOPTR); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 200 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( BITCAST); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 201 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SELECT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 202 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SHL); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 203 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SHR); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 204 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ASHR); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 205 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LSHR); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 206 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( VAARG); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 207 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( RET); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 208 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( BR); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 209 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SWITCH); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 210 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( INVOKE); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 211 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UNWIND); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 212 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EXCEPT); } // alias for unwind
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 213 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UNREACHABLE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 215 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( MALLOC); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 216 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ALLOCA); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 217 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FREE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 218 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LOAD); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 219 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( STORE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 220 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( GETELEMENTPTR); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 222 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EXTRACTELEMENT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 223 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( INSERTELEMENT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 224 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SHUFFLEVECTOR); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 227 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( VAR_ID); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 228 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LABELSTR); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 229 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( LABELSTR); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 230 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( STRINGCONSTANT ); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 231 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( EUINT64VAL ); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 232 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( ESINT64VAL ); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 233 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( yytext[0] == 's' ? ESINT64VAL : EUINT64VAL ); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 234 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( UINTVAL); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 235 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( SINTVAL); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 236 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FPVAL); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 237 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ RET_TOK( FPVAL); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 238 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  yy_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 246 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 247 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 249 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1862 "UpgradeLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 567 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 567 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 566);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static inline void yyunput( int c, register char *yy_bp )
#else
static inline void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static inline void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static inline void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 249 "/proj/llvm/llvm-4/tools/llvm-upgrade/UpgradeLexer.l"

