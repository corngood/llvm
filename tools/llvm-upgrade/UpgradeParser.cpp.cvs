/* A Bison parser, made by GNU Bison 2.1.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse Upgradeparse
#define yylex   Upgradelex
#define yyerror Upgradeerror
#define yylval  Upgradelval
#define yychar  Upgradechar
#define yydebug Upgradedebug
#define yynerrs Upgradenerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     VOID = 258,
     BOOL = 259,
     SBYTE = 260,
     UBYTE = 261,
     SHORT = 262,
     USHORT = 263,
     INT = 264,
     UINT = 265,
     LONG = 266,
     ULONG = 267,
     FLOAT = 268,
     DOUBLE = 269,
     LABEL = 270,
     OPAQUE = 271,
     ESINT64VAL = 272,
     EUINT64VAL = 273,
     SINTVAL = 274,
     UINTVAL = 275,
     FPVAL = 276,
     NULL_TOK = 277,
     UNDEF = 278,
     ZEROINITIALIZER = 279,
     TRUETOK = 280,
     FALSETOK = 281,
     TYPE = 282,
     VAR_ID = 283,
     LABELSTR = 284,
     STRINGCONSTANT = 285,
     IMPLEMENTATION = 286,
     BEGINTOK = 287,
     ENDTOK = 288,
     DECLARE = 289,
     GLOBAL = 290,
     CONSTANT = 291,
     SECTION = 292,
     VOLATILE = 293,
     TO = 294,
     DOTDOTDOT = 295,
     CONST = 296,
     INTERNAL = 297,
     LINKONCE = 298,
     WEAK = 299,
     DLLIMPORT = 300,
     DLLEXPORT = 301,
     EXTERN_WEAK = 302,
     APPENDING = 303,
     EXTERNAL = 304,
     TARGET = 305,
     TRIPLE = 306,
     ENDIAN = 307,
     POINTERSIZE = 308,
     LITTLE = 309,
     BIG = 310,
     ALIGN = 311,
     UNINITIALIZED = 312,
     DEPLIBS = 313,
     CALL = 314,
     TAIL = 315,
     ASM_TOK = 316,
     MODULE = 317,
     SIDEEFFECT = 318,
     CC_TOK = 319,
     CCC_TOK = 320,
     CSRETCC_TOK = 321,
     FASTCC_TOK = 322,
     COLDCC_TOK = 323,
     X86_STDCALLCC_TOK = 324,
     X86_FASTCALLCC_TOK = 325,
     DATALAYOUT = 326,
     RET = 327,
     BR = 328,
     SWITCH = 329,
     INVOKE = 330,
     EXCEPT = 331,
     UNWIND = 332,
     UNREACHABLE = 333,
     ADD = 334,
     SUB = 335,
     MUL = 336,
     DIV = 337,
     UDIV = 338,
     SDIV = 339,
     FDIV = 340,
     REM = 341,
     UREM = 342,
     SREM = 343,
     FREM = 344,
     AND = 345,
     OR = 346,
     XOR = 347,
     SETLE = 348,
     SETGE = 349,
     SETLT = 350,
     SETGT = 351,
     SETEQ = 352,
     SETNE = 353,
     ICMP = 354,
     FCMP = 355,
     EQ = 356,
     NE = 357,
     SLT = 358,
     SGT = 359,
     SLE = 360,
     SGE = 361,
     OEQ = 362,
     ONE = 363,
     OLT = 364,
     OGT = 365,
     OLE = 366,
     OGE = 367,
     ORD = 368,
     UNO = 369,
     UEQ = 370,
     UNE = 371,
     ULT = 372,
     UGT = 373,
     ULE = 374,
     UGE = 375,
     MALLOC = 376,
     ALLOCA = 377,
     FREE = 378,
     LOAD = 379,
     STORE = 380,
     GETELEMENTPTR = 381,
     PHI_TOK = 382,
     SELECT = 383,
     SHL = 384,
     SHR = 385,
     ASHR = 386,
     LSHR = 387,
     VAARG = 388,
     EXTRACTELEMENT = 389,
     INSERTELEMENT = 390,
     SHUFFLEVECTOR = 391,
     CAST = 392,
     TRUNC = 393,
     ZEXT = 394,
     SEXT = 395,
     FPTRUNC = 396,
     FPEXT = 397,
     FPTOUI = 398,
     FPTOSI = 399,
     UITOFP = 400,
     SITOFP = 401,
     PTRTOINT = 402,
     INTTOPTR = 403,
     BITCAST = 404
   };
#endif
/* Tokens.  */
#define VOID 258
#define BOOL 259
#define SBYTE 260
#define UBYTE 261
#define SHORT 262
#define USHORT 263
#define INT 264
#define UINT 265
#define LONG 266
#define ULONG 267
#define FLOAT 268
#define DOUBLE 269
#define LABEL 270
#define OPAQUE 271
#define ESINT64VAL 272
#define EUINT64VAL 273
#define SINTVAL 274
#define UINTVAL 275
#define FPVAL 276
#define NULL_TOK 277
#define UNDEF 278
#define ZEROINITIALIZER 279
#define TRUETOK 280
#define FALSETOK 281
#define TYPE 282
#define VAR_ID 283
#define LABELSTR 284
#define STRINGCONSTANT 285
#define IMPLEMENTATION 286
#define BEGINTOK 287
#define ENDTOK 288
#define DECLARE 289
#define GLOBAL 290
#define CONSTANT 291
#define SECTION 292
#define VOLATILE 293
#define TO 294
#define DOTDOTDOT 295
#define CONST 296
#define INTERNAL 297
#define LINKONCE 298
#define WEAK 299
#define DLLIMPORT 300
#define DLLEXPORT 301
#define EXTERN_WEAK 302
#define APPENDING 303
#define EXTERNAL 304
#define TARGET 305
#define TRIPLE 306
#define ENDIAN 307
#define POINTERSIZE 308
#define LITTLE 309
#define BIG 310
#define ALIGN 311
#define UNINITIALIZED 312
#define DEPLIBS 313
#define CALL 314
#define TAIL 315
#define ASM_TOK 316
#define MODULE 317
#define SIDEEFFECT 318
#define CC_TOK 319
#define CCC_TOK 320
#define CSRETCC_TOK 321
#define FASTCC_TOK 322
#define COLDCC_TOK 323
#define X86_STDCALLCC_TOK 324
#define X86_FASTCALLCC_TOK 325
#define DATALAYOUT 326
#define RET 327
#define BR 328
#define SWITCH 329
#define INVOKE 330
#define EXCEPT 331
#define UNWIND 332
#define UNREACHABLE 333
#define ADD 334
#define SUB 335
#define MUL 336
#define DIV 337
#define UDIV 338
#define SDIV 339
#define FDIV 340
#define REM 341
#define UREM 342
#define SREM 343
#define FREM 344
#define AND 345
#define OR 346
#define XOR 347
#define SETLE 348
#define SETGE 349
#define SETLT 350
#define SETGT 351
#define SETEQ 352
#define SETNE 353
#define ICMP 354
#define FCMP 355
#define EQ 356
#define NE 357
#define SLT 358
#define SGT 359
#define SLE 360
#define SGE 361
#define OEQ 362
#define ONE 363
#define OLT 364
#define OGT 365
#define OLE 366
#define OGE 367
#define ORD 368
#define UNO 369
#define UEQ 370
#define UNE 371
#define ULT 372
#define UGT 373
#define ULE 374
#define UGE 375
#define MALLOC 376
#define ALLOCA 377
#define FREE 378
#define LOAD 379
#define STORE 380
#define GETELEMENTPTR 381
#define PHI_TOK 382
#define SELECT 383
#define SHL 384
#define SHR 385
#define ASHR 386
#define LSHR 387
#define VAARG 388
#define EXTRACTELEMENT 389
#define INSERTELEMENT 390
#define SHUFFLEVECTOR 391
#define CAST 392
#define TRUNC 393
#define ZEXT 394
#define SEXT 395
#define FPTRUNC 396
#define FPEXT 397
#define FPTOUI 398
#define FPTOSI 399
#define UITOFP 400
#define SITOFP 401
#define PTRTOINT 402
#define INTTOPTR 403
#define BITCAST 404




/* Copy the first part of user declarations.  */
#line 14 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"

#include "UpgradeInternals.h"
#include <algorithm>
#include <map>
#include <utility>
#include <iostream>

#define YYERROR_VERBOSE 1
#define YYINCLUDED_STDLIB_H
#define YYDEBUG 1

int yylex();                       // declaration" of xxx warnings.
int yyparse();
extern int yydebug;

static std::string CurFilename;
static std::ostream *O = 0;
std::istream* LexInput = 0;
unsigned SizeOfPointer = 32;


// This bool controls whether attributes are ever added to function declarations
// definitions and calls.
static bool AddAttributes = false;

static void warning(const std::string& msg);

void UpgradeAssembly(const std::string &infile, std::istream& in, 
                     std::ostream &out, bool debug, bool addAttrs)
{
  Upgradelineno = 1; 
  CurFilename = infile;
  LexInput = &in;
  yydebug = debug;
  AddAttributes = addAttrs;
  O = &out;

  if (yyparse()) {
    std::cerr << "llvm-upgrade: parse failed.\n";
    out << "llvm-upgrade: parse failed.\n";
    exit(1);
  }
}

namespace { // Anonymous namespace to keep our implementation local


/// This type is used to keep track of the signedness of values. Instead
/// of creating llvm::Value directly, the parser will create Value which
/// associates a Value* with a Signedness indication.
struct Value {
  std::string* val;
  const Type* type;
  bool constant;
  bool isConstant() const { return constant; }
  ~Value() { delete val; }
};


/// This type is used to keep track of the signedness of the obsolete
/// integer types. Instead of creating an llvm::Type directly, the Lexer will
/// create instances of Type which retains the signedness indication so
/// it can be used by the parser for upgrade decisions.
/// For example if "uint" is encountered then the "first" field will be set 
/// to "int32" and the "second" field will be set to "isUnsigned".  If the 
/// type is not obsolete then "second" will be set to "isSignless".
class Type {
public:
  static const Type* get(const std::string &newType, TypeIDs oldType);
  static const Type* get(const std::string& newType, TypeIDs oldType, 
                             const Type* eTy, const Type* rTy);

  static const Type* get(const std::string& newType, TypeIDs oldType, 
                             const Type *eTy, uint64_t elems);

  static const Type* get(const std::string& newType, TypeIDs oldType, 
                             TypeList* TL);

  static const Type* get(const std::string& newType, const Type* resTy, 
                             TypeList* TL);

  const Type* resolve() const;
  bool operator<(const Type& that) const;

  bool sameNewTyAs(const Type* that) const {
    return this->newTy == that->newTy;
  }

  bool sameOldTyAs(const Type* that) const;

  TypeIDs getElementTy() const {
    if (elemTy) {
      return elemTy->oldTy;
    }
    return UnresolvedTy;
  }

  unsigned getUpRefNum() const {
    assert(oldTy == UpRefTy && "Can't getUpRefNum on non upreference");
    return atoi(&((getNewTy().c_str())[1])); // skip the slash
  }

  typedef std::vector<const Type*> UpRefStack;
  void getSignedness(unsigned &sNum, unsigned &uNum, UpRefStack& stk) const;
  std::string makeUniqueName(const std::string& BaseName) const;

  const std::string& getNewTy() const { return newTy; }
  const Type* getResultType() const { return resultTy; }
  const Type* getElementType() const { return elemTy; }

  const Type* getPointerType() const {
    return get(newTy + "*", PointerTy, this, (Type*)0);
  }

  bool isUnresolved() const { return oldTy == UnresolvedTy; }
  bool isUpReference() const { return oldTy == UpRefTy; }
  bool isVoid() const { return oldTy == VoidTy; }
  bool isBool() const { return oldTy == BoolTy; }
  bool isSigned() const {
    return oldTy == SByteTy || oldTy == ShortTy || 
           oldTy == IntTy || oldTy == LongTy;
  }

  bool isUnsigned() const {
    return oldTy == UByteTy || oldTy == UShortTy || 
           oldTy == UIntTy || oldTy == ULongTy;
  }
  bool isSignless() const { return !isSigned() && !isUnsigned(); }
  bool isInteger() const { return isSigned() || isUnsigned(); }
  bool isIntegral() const { return oldTy == BoolTy || isInteger(); }
  bool isFloatingPoint() const { return oldTy == DoubleTy || oldTy == FloatTy; }
  bool isPacked() const { return oldTy == PackedTy; }
  bool isPointer() const { return oldTy == PointerTy; }
  bool isStruct() const { return oldTy == StructTy || oldTy == PackedStructTy; }
  bool isArray() const { return oldTy == ArrayTy; }
  bool isOther() const { 
    return !isPacked() && !isPointer() && !isFloatingPoint() && !isIntegral(); }
  bool isFunction() const { return oldTy == FunctionTy; }
  bool isComposite() const {
    return isStruct() || isPointer() || isArray() || isPacked();
  }

  bool isAttributeCandidate() const {
    return isIntegral() && getBitWidth() < 32;
  }

  bool isUnresolvedDeep() const;

  unsigned getBitWidth() const;

  const Type* getIndexedType(const Value*  V) const;

  unsigned getNumStructElements() const { 
    return (elements ? elements->size() : 0);
  }

  const Type* getElement(unsigned idx) const {
    if (elements)
      if (idx < elements->size())
        return (*elements)[idx];
    return 0;
  }

private:
  Type() 
    : newTy(), oldTy(UnresolvedTy), elemTy(0), resultTy(0), elements(0),
      nelems(0) {
  }

  Type(const Type& that); // do not implement
  Type& operator=(const Type& that); // do not implement

  ~Type() { delete elements; }

  struct ltfunctor
  {
    bool operator()(const Type* X, const Type* Y) const {
      assert(X && "Can't compare null pointer");
      assert(Y && "Can't compare null pointer");
      return *X < *Y;
    }
  };

  typedef std::set<const Type*, ltfunctor> TypeRegMap;

  static const Type* add_new_type(Type* existing);

  std::string newTy;
  TypeIDs oldTy;
  Type *elemTy;
  Type *resultTy;
  TypeList *elements;
  uint64_t nelems;
  static TypeRegMap registry;
public:
  typedef std::vector<const Type*> TypeVector;
  typedef std::map<std::string,const Type*> TypeMap;
  typedef std::map<const Type*,std::string> TypePlaneMap;
  typedef std::map<std::string,TypePlaneMap> GlobalsTypeMap;
  static TypeVector EnumeratedTypes;
  static TypeMap NamedTypes;
  static GlobalsTypeMap Globals;
};

Type::TypeRegMap     Type::registry;
Type::TypeVector     Type::EnumeratedTypes;
Type::TypeMap        Type::NamedTypes;
Type::GlobalsTypeMap Type::Globals;

const Type* Type::get(const std::string &newType, TypeIDs oldType) {
  Type* Ty = new Type();
  Ty->newTy = newType;
  Ty->oldTy = oldType;
  return add_new_type(Ty);
}

const Type* Type::get(const std::string& newType, TypeIDs oldType, 
                              const Type* eTy, const Type* rTy) {
  Type* Ty= new Type();
  Ty->newTy = newType;
  Ty->oldTy = oldType;
  Ty->elemTy = const_cast<Type*>(eTy);
  Ty->resultTy = const_cast<Type*>(rTy);
  return add_new_type(Ty);
}

const Type* Type::get(const std::string& newType, TypeIDs oldType, 
                              const Type *eTy, uint64_t elems) {
  Type* Ty = new Type();
  Ty->newTy = newType;
  Ty->oldTy = oldType;
  Ty->elemTy = const_cast<Type*>(eTy);
  Ty->nelems = elems;
  return  add_new_type(Ty);
}

const Type* Type::get(const std::string& newType, TypeIDs oldType, 
                              TypeList* TL) {
  Type* Ty = new Type();
  Ty->newTy = newType;
  Ty->oldTy = oldType;
  Ty->elements = TL;
  return add_new_type(Ty);
}

const Type* Type::get(const std::string& newType, const Type* resTy,
                              TypeList* TL) {
  Type* Ty = new Type();
  Ty->newTy = newType;
  Ty->oldTy = FunctionTy;
  Ty->resultTy = const_cast<Type*>(resTy);
  Ty->elements = TL;
  return add_new_type(Ty);
}

const Type* Type::resolve() const {
  if (isUnresolved()) {
    if (getNewTy()[0] == '%' && isdigit(newTy[1])) {
      unsigned ref = atoi(&((newTy.c_str())[1])); // skip the %
      if (ref < EnumeratedTypes.size()) {
        return EnumeratedTypes[ref];
      } else {
        std::string msg("Can't resolve numbered type: ");
        msg += getNewTy();
        yyerror(msg.c_str());
      }
    } else {
      Type::TypeMap::iterator I = NamedTypes.find(newTy);
      if (I != NamedTypes.end()) {
        return I->second;
      } else {
        std::string msg("Cannot resolve type: ");
        msg += getNewTy();
        yyerror(msg.c_str());
      }
    }
  }
  // otherwise its already resolved.
  return this;
}

bool Type::operator<(const Type& that) const {
  if (this == &that)
    return false;
  if (oldTy != that.oldTy)
    return oldTy < that.oldTy;
  switch (oldTy) {
    case UpRefTy: {
      unsigned thisUp = this->getUpRefNum();
      unsigned thatUp = that.getUpRefNum();
      return thisUp < thatUp;
    }
    case PackedTy:
    case ArrayTy:
      if (this->nelems != that.nelems)
        return nelems < that.nelems;
    case PointerTy: {
      const Type* thisTy = this->elemTy;
      const Type* thatTy = that.elemTy;
      return *thisTy < *thatTy;
    }
    case FunctionTy: {
      const Type* thisTy = this->resultTy;
      const Type* thatTy = that.resultTy;
      if (!thisTy->sameOldTyAs(thatTy))
        return *thisTy < *thatTy;
      /* FALL THROUGH */
    }
    case StructTy:
    case PackedStructTy: {
      if (elements->size() != that.elements->size())
        return elements->size() < that.elements->size();
      for (unsigned i = 0; i < elements->size(); i++) {
        const Type* thisTy = (*this->elements)[i];
        const Type* thatTy = (*that.elements)[i];
        if (!thisTy->sameOldTyAs(thatTy))
          return *thisTy < *thatTy;
      }
      break;
    }
    case UnresolvedTy:
      return this->newTy < that.newTy;
    default:
      break;
  }
  return false; 
}

bool Type::sameOldTyAs(const Type* that) const {
  if (that == 0)
    return false;
  if ( this == that ) 
    return true;
  if (oldTy != that->oldTy)
    return false;
  switch (oldTy) {
    case PackedTy:
    case ArrayTy:
      if (nelems != that->nelems)
        return false;
      /* FALL THROUGH */
    case PointerTy: {
      const Type* thisTy = this->elemTy;
      const Type* thatTy = that->elemTy;
      return thisTy->sameOldTyAs(thatTy);
    }
    case FunctionTy: {
      const Type* thisTy = this->resultTy;
      const Type* thatTy = that->resultTy;
      if (!thisTy->sameOldTyAs(thatTy))
        return false;
      /* FALL THROUGH */
    }
    case StructTy:
    case PackedStructTy: {
      if (elements->size() != that->elements->size())
        return false;
      for (unsigned i = 0; i < elements->size(); i++) {
        const Type* thisTy = (*this->elements)[i];
        const Type* thatTy = (*that->elements)[i];
        if (!thisTy->sameOldTyAs(thatTy))
          return false;
      }
      return true;
    }
    case UnresolvedTy:
      return this->newTy == that->newTy;
    default:
      return true; // for all others oldTy == that->oldTy is sufficient
  }
  return true;
}

bool Type::isUnresolvedDeep() const {
  switch (oldTy) {
    case UnresolvedTy: 
      return true;
    case PackedTy:
    case ArrayTy:
    case PointerTy:
      return elemTy->isUnresolvedDeep();
    case PackedStructTy:
    case StructTy:
      for (unsigned i = 0; i < elements->size(); i++)
        if ((*elements)[i]->isUnresolvedDeep())
          return true;
      return false;
    default:
      return false;
  }
}

unsigned Type::getBitWidth() const {
  switch (oldTy) {
    default:
    case LabelTy:
    case VoidTy : return 0;
    case BoolTy : return 1;
    case SByteTy: case UByteTy : return 8;
    case ShortTy: case UShortTy : return 16;
    case IntTy: case UIntTy: case FloatTy: return 32;
    case LongTy: case ULongTy: case DoubleTy : return 64;
    case PointerTy: return SizeOfPointer; // global var
    case PackedTy: 
    case ArrayTy: 
      return nelems * elemTy->getBitWidth();
    case StructTy:
    case PackedStructTy: {
      uint64_t size = 0;
      for (unsigned i = 0; i < elements->size(); i++) {
        size += (*elements)[i]->getBitWidth();
      }
      return size;
    }
  }
}

const Type* Type::getIndexedType(const Value*  V) const {
  if (isStruct()) {
    if (V->isConstant() && V->type->isInteger()) {
      size_t pos = V->val->find(' ') + 1;
      if (pos < V->val->size()) {
        uint64_t idx = atoi(V->val->substr(pos).c_str());
        return (*elements)[idx];
      } else {
        yyerror("Invalid value for constant integer");
        return 0;
      }
    } else {
      yyerror("Structure requires constant index");
      return 0;
    }
  }
  if (isArray() || isPacked() || isPointer())
    return elemTy;
  yyerror("Invalid type for getIndexedType");
  return 0;
}

void Type::getSignedness(unsigned &sNum, unsigned &uNum, 
                             UpRefStack& stack) const {
  switch (oldTy) {
    default:
    case OpaqueTy: case LabelTy: case VoidTy: case BoolTy: 
    case FloatTy : case DoubleTy: case UpRefTy:
      return;
    case SByteTy: case ShortTy: case LongTy: case IntTy: 
      sNum++;
      return;
    case UByteTy: case UShortTy: case UIntTy: case ULongTy: 
      uNum++;
      return;
    case PointerTy:
    case PackedTy: 
    case ArrayTy:
      stack.push_back(this);
      elemTy->getSignedness(sNum, uNum, stack);
      return;
    case StructTy:
    case PackedStructTy: {
      stack.push_back(this);
      for (unsigned i = 0; i < elements->size(); i++) {
        (*elements)[i]->getSignedness(sNum, uNum, stack);
      }
      return;
    }
    case UnresolvedTy: {
      const Type* Ty = this->resolve();
      // Let's not recurse.
      UpRefStack::const_iterator I = stack.begin(), E = stack.end();
      for ( ; I != E && *I != Ty; ++I) 
        ;
      if (I == E)
        Ty->getSignedness(sNum, uNum, stack);
      return;
    }
  }
}

std::string AddSuffix(const std::string& Name, const std::string& Suffix) {
  if (Name[Name.size()-1] == '"') {
    std::string Result = Name;
    Result.insert(Result.size()-1, Suffix);
    return Result;
  }
  return Name + Suffix;
}

std::string Type::makeUniqueName(const std::string& BaseName) const {
  if (BaseName == "\"alloca point\"")
    return BaseName;
  switch (oldTy) {
    default:
      break;
    case OpaqueTy: case LabelTy: case VoidTy: case BoolTy: case UpRefTy:
    case FloatTy : case DoubleTy: case UnresolvedTy:
      return BaseName;
    case SByteTy: case ShortTy: case LongTy: case IntTy: 
      return AddSuffix(BaseName, ".s");
    case UByteTy: case UShortTy: case UIntTy: case ULongTy: 
      return AddSuffix(BaseName, ".u");
  }

  unsigned uNum = 0, sNum = 0;
  std::string Suffix;
  switch (oldTy) {
    case PointerTy:
    case PackedTy: 
    case ArrayTy: {
      Type::UpRefStack stack;
      elemTy->resolve()->getSignedness(sNum, uNum, stack);
      break;
    }
    case StructTy:
    case PackedStructTy: {
      for (unsigned i = 0; i < elements->size(); i++) {
        Type::UpRefStack stack;
        (*elements)[i]->resolve()->getSignedness(sNum, uNum, stack);
      }
      break;
    }
    default:
      assert(0 && "Invalid Type");
      break;
  }

  if (sNum == 0 && uNum == 0)
    return BaseName;

  switch (oldTy) {
    default:             Suffix += ".nada"; break;
    case PointerTy:      Suffix += ".pntr"; break;
    case PackedTy:       Suffix += ".pckd"; break;
    case ArrayTy:        Suffix += ".arry"; break;
    case StructTy:       Suffix += ".strc"; break;
    case PackedStructTy: Suffix += ".pstr"; break;
  }

  Suffix += ".s" + llvm::utostr(sNum);
  Suffix += ".u" + llvm::utostr(uNum);
  return AddSuffix(BaseName, Suffix);
}

Type& Type::operator=(const Type& that) {
  oldTy = that.oldTy;
  nelems = that.nelems;
  newTy = that.newTy;
  elemTy = that.elemTy;
  resultTy = that.resultTy;
  if (that.elements) {
    elements = new TypeList(that.elements->size());
    *elements = *that.elements;
  } else {
    elements = 0;
  }
  return *this;
}

const Type* Type::add_new_type(Type* newTy) {
  TypeRegMap::iterator I = registry.find(newTy);
  if (I != registry.end()) {
    delete newTy;
    return *I;
  }
  registry.insert(newTy);
  return newTy;
}

class Instruction {
};

/// This type is used to keep track of the signedness of constants.
struct Constant {
  std::string *cnst;
  const Type *type;
  ~Constant() { delete cnst; }
};

/// This variable provides a counter for unique names. It is used in various
/// productions to ensure a unique name is generated.
static uint64_t UniqueNameCounter = 1;

// This is set when a DECLARE keyword is recognized so that subsequent parsing
// of a function prototype can know if its a declaration or definition.
static bool isDeclare = false;

// This bool is used to communicate between the InstVal and Inst rules about
// whether or not a cast should be deleted. When the flag is set, InstVal has
// determined that the cast is a candidate. However, it can only be deleted if
// the value being casted is the same value name as the instruction. The Inst
// rule makes that comparison if the flag is set and comments out the
// instruction if they match.
static bool deleteUselessCastFlag = false;
static std::string* deleteUselessCastName = 0;



const char* getCastOpcode(std::string& Source, const Type* SrcTy, 
                          const Type* DstTy) {
  unsigned SrcBits = SrcTy->getBitWidth();
  unsigned DstBits = DstTy->getBitWidth();
  const char* opcode = "bitcast";
  // Run through the possibilities ...
  if (DstTy->isIntegral()) {                        // Casting to integral
    if (SrcTy->isIntegral()) {                      // Casting from integral
      if (DstBits < SrcBits)
        opcode = "trunc";
      else if (DstBits > SrcBits) {                // its an extension
        if (SrcTy->isSigned())
          opcode ="sext";                          // signed -> SEXT
        else
          opcode = "zext";                         // unsigned -> ZEXT
      } else {
        opcode = "bitcast";                        // Same size, No-op cast
      }
    } else if (SrcTy->isFloatingPoint()) {          // Casting from floating pt
      if (DstTy->isSigned()) 
        opcode = "fptosi";                         // FP -> sint
      else
        opcode = "fptoui";                         // FP -> uint 
    } else if (SrcTy->isPacked()) {
      assert(DstBits == SrcTy->getBitWidth() &&
               "Casting packed to integer of different width");
        opcode = "bitcast";                        // same size, no-op cast
    } else {
      assert(SrcTy->isPointer() &&
             "Casting from a value that is not first-class type");
      opcode = "ptrtoint";                         // ptr -> int
    }
  } else if (DstTy->isFloatingPoint()) {           // Casting to floating pt
    if (SrcTy->isIntegral()) {                     // Casting from integral
      if (SrcTy->isSigned())
        opcode = "sitofp";                         // sint -> FP
      else
        opcode = "uitofp";                         // uint -> FP
    } else if (SrcTy->isFloatingPoint()) {         // Casting from floating pt
      if (DstBits < SrcBits) {
        opcode = "fptrunc";                        // FP -> smaller FP
      } else if (DstBits > SrcBits) {
        opcode = "fpext";                          // FP -> larger FP
      } else  {
        opcode ="bitcast";                         // same size, no-op cast
      }
    } else if (SrcTy->isPacked()) {
      assert(DstBits == SrcTy->getBitWidth() &&
             "Casting packed to floating point of different width");
        opcode = "bitcast";                        // same size, no-op cast
    } else {
      assert(0 && "Casting pointer or non-first class to float");
    }
  } else if (DstTy->isPacked()) {
    if (SrcTy->isPacked()) {
      assert(DstTy->getBitWidth() == SrcTy->getBitWidth() &&
             "Casting packed to packed of different widths");
      opcode = "bitcast";                          // packed -> packed
    } else if (DstTy->getBitWidth() == SrcBits) {
      opcode = "bitcast";                          // float/int -> packed
    } else {
      assert(!"Illegal cast to packed (wrong type or size)");
    }
  } else if (DstTy->isPointer()) {
    if (SrcTy->isPointer()) {
      opcode = "bitcast";                          // ptr -> ptr
    } else if (SrcTy->isIntegral()) {
      opcode = "inttoptr";                         // int -> ptr
    } else {
      assert(!"Casting invalid type to pointer");
    }
  } else {
    assert(!"Casting to type that is not first-class");
  }
  return opcode;
}

std::string getCastUpgrade(const std::string& Src, const Type* SrcTy,
                           const Type* DstTy, bool isConst) {
  std::string Result;
  std::string Source = Src;
  if (SrcTy->isFloatingPoint() && DstTy->isPointer()) {
    // fp -> ptr cast is no longer supported but we must upgrade this
    // by doing a double cast: fp -> int -> ptr
    if (isConst)
      Source = "i64 fptoui(" + Source + " to i64)";
    else {
      *O << "    %cast_upgrade" << UniqueNameCounter << " = fptoui " 
         << Source << " to i64\n";
      Source = "i64 %cast_upgrade" + llvm::utostr(UniqueNameCounter++);
    }
    // Update the SrcTy for the getCastOpcode call below
    SrcTy = Type::get("i64", ULongTy);
  } else if (DstTy->isBool()) {
    // cast type %x to bool was previously defined as setne type %x, null
    // The cast semantic is now to truncate, not compare so we must retain
    // the original intent by replacing the cast with a setne
    const char* comparator = SrcTy->isPointer() ? ", null" : 
      (SrcTy->isFloatingPoint() ? ", 0.0" : 
       (SrcTy->isBool() ? ", false" : ", 0"));
    const char* compareOp = SrcTy->isFloatingPoint() ? "fcmp one " : "icmp ne ";
    if (isConst) { 
      Result = "(" + Source + comparator + ")";
      Result = compareOp + Result;
    } else
      Result = compareOp + Source + comparator;
    return Result; // skip cast processing below
  }
  SrcTy = SrcTy->resolve();
  DstTy = DstTy->resolve();
  std::string Opcode(getCastOpcode(Source, SrcTy, DstTy));
  if (isConst)
    Result += Opcode + "( " + Source + " to " + DstTy->getNewTy() + ")";
  else
    Result += Opcode + " " + Source + " to " + DstTy->getNewTy();
  return Result;
}

const char* getDivRemOpcode(const std::string& opcode, const Type* TI) {
  const char* op = opcode.c_str();
  const Type* Ty = TI->resolve();
  if (Ty->isPacked())
    Ty = Ty->getElementType();
  if (opcode == "div")
    if (Ty->isFloatingPoint())
      op = "fdiv";
    else if (Ty->isUnsigned())
      op = "udiv";
    else if (Ty->isSigned())
      op = "sdiv";
    else
      yyerror("Invalid type for div instruction");
  else if (opcode == "rem")
    if (Ty->isFloatingPoint())
      op = "frem";
    else if (Ty->isUnsigned())
      op = "urem";
    else if (Ty->isSigned())
      op = "srem";
    else
      yyerror("Invalid type for rem instruction");
  return op;
}

std::string getCompareOp(const std::string& setcc, const Type* TI) {
  assert(setcc.length() == 5);
  char cc1 = setcc[3];
  char cc2 = setcc[4];
  assert(cc1 == 'e' || cc1 == 'n' || cc1 == 'l' || cc1 == 'g');
  assert(cc2 == 'q' || cc2 == 'e' || cc2 == 'e' || cc2 == 't');
  std::string result("xcmp xxx");
  result[6] = cc1;
  result[7] = cc2;
  if (TI->isFloatingPoint()) {
    result[0] = 'f';
    result[5] = 'o';
    if (cc1 == 'n')
      result[5] = 'u'; // NE maps to unordered
    else
      result[5] = 'o'; // everything else maps to ordered
  } else if (TI->isIntegral() || TI->isPointer()) {
    result[0] = 'i';
    if ((cc1 == 'e' && cc2 == 'q') || (cc1 == 'n' && cc2 == 'e'))
      result.erase(5,1);
    else if (TI->isSigned())
      result[5] = 's';
    else if (TI->isUnsigned() || TI->isPointer() || TI->isBool())
      result[5] = 'u';
    else
      yyerror("Invalid integral type for setcc");
  }
  return result;
}

const Type* getFunctionReturnType(const Type* PFTy) {
  PFTy = PFTy->resolve();
  if (PFTy->isPointer()) {
    const Type* ElemTy = PFTy->getElementType();
    ElemTy = ElemTy->resolve();
    if (ElemTy->isFunction())
      return ElemTy->getResultType();
  } else if (PFTy->isFunction()) {
    return PFTy->getResultType();
  }
  return PFTy;
}

const Type* ResolveUpReference(const Type* Ty, 
                                   Type::UpRefStack* stack) {
  assert(Ty->isUpReference() && "Can't resolve a non-upreference");
  unsigned upref = Ty->getUpRefNum();
  assert(upref < stack->size() && "Invalid up reference");
  return (*stack)[upref - stack->size() - 1];
}

const Type* getGEPIndexedType(const Type* PTy, ValueList* idxs) {
  const Type* Result = PTy = PTy->resolve();
  assert(PTy->isPointer() && "GEP Operand is not a pointer?");
  Type::UpRefStack stack;
  for (unsigned i = 0; i < idxs->size(); ++i) {
    if (Result->isComposite()) {
      Result = Result->getIndexedType((*idxs)[i]);
      Result = Result->resolve();
      stack.push_back(Result);
    } else
      yyerror("Invalid type for index");
  }
  // Resolve upreferences so we can return a more natural type
  if (Result->isPointer()) {
    if (Result->getElementType()->isUpReference()) {
      stack.push_back(Result);
      Result = ResolveUpReference(Result->getElementType(), &stack);
    }
  } else if (Result->isUpReference()) {
    Result = ResolveUpReference(Result->getElementType(), &stack);
  }
  return Result->getPointerType();
}

// This function handles appending .u or .s to integer value names that
// were previously unsigned or signed, respectively. This avoids name
// collisions since the unsigned and signed type planes have collapsed
// into a single signless type plane.
std::string getUniqueName(const std::string *Name, const Type* Ty,
                          bool isGlobal = false, bool isDef = false) {

  // If its not a symbolic name, don't modify it, probably a constant val.
  if ((*Name)[0] != '%' && (*Name)[0] != '"')
    return *Name;

  // If its a numeric reference, just leave it alone.
  if (isdigit((*Name)[1]))
    return *Name;

  // Resolve the type
  Ty = Ty->resolve(); 

  // If its a global name, get its uniquified name, if any
  Type::GlobalsTypeMap::iterator GI = Type::Globals.find(*Name);
  if (GI != Type::Globals.end()) {
    Type::TypePlaneMap::iterator TPI = GI->second.begin();
    Type::TypePlaneMap::iterator TPE = GI->second.end();
    for ( ; TPI != TPE ; ++TPI) {
      if (TPI->first->sameNewTyAs(Ty)) 
        return TPI->second;
    }
  }

  if (isGlobal) {
    // We didn't find a global name, but if its supposed to be global then all 
    // we can do is return the name. This is probably a forward reference of a 
    // global value that hasn't been defined yet. Since we have no definition
    // we don't know its linkage class. Just assume its an external and the name
    // shouldn't change.
    return *Name;
  }

  // Default the result to the current name
  std::string Result = Ty->makeUniqueName(*Name);

  return Result;
}

std::string getGlobalName(const std::string* Name, const std::string Linkage,
                          const Type* Ty, bool isConstant) {
  // Default to given name
  std::string Result = *Name; 
  // Look up the name in the Globals Map
  Type::GlobalsTypeMap::iterator GI = Type::Globals.find(*Name);
  // Did we see this global name before?
  if (GI != Type::Globals.end()) {
    if (Ty->isUnresolvedDeep()) {
      // The Gval's type is unresolved. Consequently, we can't disambiguate it
      // by type. We'll just change its name and emit a warning.
      warning("Cannot disambiguate global value '" + *Name + 
              "' because type '" + Ty->getNewTy() + "'is unresolved.\n");
      Result = *Name + ".unique";
      UniqueNameCounter++;
      Result += llvm::utostr(UniqueNameCounter);
      return Result;
    } else {
      Type::TypePlaneMap::iterator TPI = GI->second.find(Ty);
      if (TPI != GI->second.end()) {
        // We found an existing name of the same old type. This isn't allowed 
        // in LLVM 2.0. Consequently, we must alter the name of the global so it
        // can at least compile. References to the global will yield the first
        // definition, which is okay. We also must warn about this.
        Result = *Name + ".unique";
        UniqueNameCounter++;
        Result += llvm::utostr(UniqueNameCounter);
        warning(std::string("Global variable '") + *Name + "' was renamed to '"+
                Result + "'");
      } else { 
        // There isn't an existing definition for this name according to the
        // old types. Now search the TypePlanMap for types with the same new
        // name. 
        Type::TypePlaneMap::iterator TPI = GI->second.begin();
        Type::TypePlaneMap::iterator TPE = GI->second.end();
        for ( ; TPI != TPE; ++TPI) {
          if (TPI->first->sameNewTyAs(Ty)) {
            // The new types are the same but the old types are different so 
            // this is a global name collision resulting from type planes 
            // collapsing. 
            if (Linkage == "external" || Linkage == "dllimport" || 
                Linkage == "extern_weak" || Linkage == "") {
              // The linkage of this gval is external so we can't reliably 
              // rename it because it could potentially create a linking 
              // problem.  However, we can't leave the name conflict in the 
              // output either or it won't assemble with LLVM 2.0.  So, all we 
              // can do is rename this one to something unique and emit a 
              // warning about the problem.
              Result = *Name + ".unique";
              UniqueNameCounter++;
              Result += llvm::utostr(UniqueNameCounter);
              warning("Renaming global value '" + *Name + "' to '" + Result + 
                      "' may cause linkage errors.");
              return Result;
            } else {
              // Its linkage is internal and its type is known so we can 
              // disambiguate the name collision successfully based on the type.
              Result = getUniqueName(Name, Ty);
              TPI->second = Result;
              return Result;
            }
          }
        }
        // We didn't find an entry in the type plane with the same new type and
        // the old types differ so this is a new type plane for this global 
        // variable. We just fall through to the logic below which inserts
        // the global.
      }
    }
  }

  // Its a new global name, if it is external we can't change it
  if (isConstant || Linkage == "external" || Linkage == "dllimport" || 
      Linkage == "extern_weak" || Linkage == "") {
    Type::Globals[Result][Ty] = Result;
    return Result;
  }

  // Its a new global name, and it is internal, change the name to make it
  // unique for its type.
  // Result = getUniqueName(Name, Ty);
  Type::Globals[*Name][Ty] = Result;
  return Result;
}

} // End anonymous namespace

// This function is used by the Lexer to create a Type. It can't be
// in the anonymous namespace.
const Type* getType(const std::string& newTy, TypeIDs oldTy) {
  return Type::get(newTy, oldTy);
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 971 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
typedef union YYSTYPE {
  std::string*    String;
  const Type*     Ty;
  Value*          Val;
  Constant*       Const;
  ValueList*      ValList;
  TypeList*       TypeVec;
} YYSTYPE;
/* Line 196 of yacc.c.  */
#line 1355 "UpgradeParser.tab.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 219 of yacc.c.  */
#line 1367 "UpgradeParser.tab.c"

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T) && (defined (__STDC__) || defined (__cplusplus))
# include <stddef.h> /* INFRINGES ON USER NAME SPACE */
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if defined (__STDC__) || defined (__cplusplus)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     define YYINCLUDED_STDLIB_H
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2005 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM ((YYSIZE_T) -1)
#  endif
#  ifdef __cplusplus
extern "C" {
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if (! defined (malloc) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if (! defined (free) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifdef __cplusplus
}
#  endif
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  4
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1473

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  164
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  76
/* YYNRULES -- Number of rules. */
#define YYNRULES  301
/* YYNRULES -- Number of states. */
#define YYNSTATES  585

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   404

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     153,   154,   162,     2,   151,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     158,   150,   159,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   155,   152,   157,     2,     2,     2,     2,     2,   163,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     156,     2,     2,   160,     2,   161,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     5,     7,     9,    11,    13,    15,    17,
      19,    21,    23,    25,    27,    29,    31,    33,    35,    37,
      39,    41,    43,    45,    47,    49,    51,    53,    55,    57,
      59,    61,    63,    65,    67,    69,    71,    73,    75,    77,
      79,    81,    83,    85,    87,    89,    91,    93,    95,    97,
      99,   101,   103,   105,   107,   109,   111,   113,   115,   117,
     119,   121,   123,   125,   127,   129,   131,   133,   135,   137,
     139,   141,   143,   145,   147,   149,   151,   153,   155,   157,
     159,   161,   164,   165,   167,   169,   171,   173,   175,   177,
     179,   180,   182,   184,   186,   188,   190,   192,   195,   196,
     197,   200,   201,   205,   208,   209,   211,   212,   216,   218,
     221,   223,   225,   227,   229,   231,   233,   235,   237,   239,
     241,   243,   245,   247,   249,   251,   253,   255,   257,   259,
     261,   264,   269,   275,   281,   285,   288,   294,   299,   302,
     304,   308,   310,   314,   316,   317,   322,   326,   330,   335,
     340,   344,   347,   350,   353,   356,   359,   362,   365,   368,
     371,   374,   381,   387,   396,   403,   410,   417,   425,   433,
     440,   447,   456,   465,   469,   471,   473,   475,   477,   480,
     483,   488,   491,   493,   495,   497,   502,   505,   510,   517,
     524,   531,   538,   542,   547,   548,   550,   552,   554,   558,
     562,   566,   570,   574,   578,   580,   581,   583,   585,   587,
     588,   591,   595,   597,   599,   603,   605,   606,   615,   617,
     619,   623,   625,   627,   631,   632,   634,   636,   637,   642,
     643,   645,   647,   649,   651,   653,   655,   657,   659,   661,
     665,   667,   673,   675,   677,   679,   681,   684,   687,   689,
     692,   695,   696,   698,   700,   702,   705,   708,   712,   722,
     732,   741,   756,   758,   760,   767,   773,   776,   783,   791,
     793,   797,   799,   800,   803,   805,   811,   817,   823,   830,
     837,   842,   847,   854,   859,   864,   871,   878,   881,   889,
     891,   894,   895,   897,   898,   902,   909,   913,   920,   923,
     928,   935
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short int yyrhs[] =
{
     198,     0,    -1,    19,    -1,    20,    -1,    17,    -1,    18,
      -1,    79,    -1,    80,    -1,    81,    -1,    82,    -1,    83,
      -1,    84,    -1,    85,    -1,    86,    -1,    87,    -1,    88,
      -1,    89,    -1,    90,    -1,    91,    -1,    92,    -1,    93,
      -1,    94,    -1,    95,    -1,    96,    -1,    97,    -1,    98,
      -1,   101,    -1,   102,    -1,   103,    -1,   104,    -1,   105,
      -1,   106,    -1,   117,    -1,   118,    -1,   119,    -1,   120,
      -1,   107,    -1,   108,    -1,   109,    -1,   110,    -1,   111,
      -1,   112,    -1,   113,    -1,   114,    -1,   115,    -1,   116,
      -1,   117,    -1,   118,    -1,   119,    -1,   120,    -1,    25,
      -1,    26,    -1,   129,    -1,   130,    -1,   131,    -1,   132,
      -1,   138,    -1,   139,    -1,   140,    -1,   141,    -1,   142,
      -1,   143,    -1,   144,    -1,   145,    -1,   146,    -1,   147,
      -1,   148,    -1,   149,    -1,   137,    -1,    11,    -1,     9,
      -1,     7,    -1,     5,    -1,    12,    -1,    10,    -1,     8,
      -1,     6,    -1,   174,    -1,   175,    -1,    13,    -1,    14,
      -1,   207,   150,    -1,    -1,    42,    -1,    43,    -1,    44,
      -1,    48,    -1,    45,    -1,    46,    -1,    47,    -1,    -1,
      65,    -1,    66,    -1,    67,    -1,    68,    -1,    69,    -1,
      70,    -1,    64,    18,    -1,    -1,    -1,    56,    18,    -1,
      -1,   151,    56,    18,    -1,    37,    30,    -1,    -1,   183,
      -1,    -1,   151,   186,   185,    -1,   183,    -1,    56,    18,
      -1,   189,    -1,     3,    -1,   191,    -1,     3,    -1,   191,
      -1,     4,    -1,     5,    -1,     6,    -1,     7,    -1,     8,
      -1,     9,    -1,    10,    -1,    11,    -1,    12,    -1,    13,
      -1,    14,    -1,    15,    -1,    16,    -1,   222,    -1,   190,
      -1,   152,    18,    -1,   188,   153,   193,   154,    -1,   155,
      18,   156,   191,   157,    -1,   158,    18,   156,   191,   159,
      -1,   160,   192,   161,    -1,   160,   161,    -1,   158,   160,
     192,   161,   159,    -1,   158,   160,   161,   159,    -1,   191,
     162,    -1,   191,    -1,   192,   151,   191,    -1,   192,    -1,
     192,   151,    40,    -1,    40,    -1,    -1,   189,   155,   196,
     157,    -1,   189,   155,   157,    -1,   189,   163,    30,    -1,
     189,   158,   196,   159,    -1,   189,   160,   196,   161,    -1,
     189,   160,   161,    -1,   189,    22,    -1,   189,    23,    -1,
     189,   222,    -1,   189,   195,    -1,   189,    24,    -1,   174,
     166,    -1,   175,   166,    -1,     4,    25,    -1,     4,    26,
      -1,   177,    21,    -1,   173,   153,   194,    39,   189,   154,
      -1,   126,   153,   194,   237,   154,    -1,   128,   153,   194,
     151,   194,   151,   194,   154,    -1,   167,   153,   194,   151,
     194,   154,    -1,   168,   153,   194,   151,   194,   154,    -1,
     169,   153,   194,   151,   194,   154,    -1,    99,   170,   153,
     194,   151,   194,   154,    -1,   100,   171,   153,   194,   151,
     194,   154,    -1,   172,   153,   194,   151,   194,   154,    -1,
     134,   153,   194,   151,   194,   154,    -1,   135,   153,   194,
     151,   194,   151,   194,   154,    -1,   136,   153,   194,   151,
     194,   151,   194,   154,    -1,   196,   151,   194,    -1,   194,
      -1,    35,    -1,    36,    -1,   199,    -1,   199,   216,    -1,
     199,   218,    -1,   199,    62,    61,   202,    -1,   199,    31,
      -1,   201,    -1,    49,    -1,    57,    -1,   201,   178,    27,
     187,    -1,   201,   218,    -1,   201,    62,    61,   202,    -1,
     201,   178,   179,   197,   194,   185,    -1,   201,   178,   200,
     197,   189,   185,    -1,   201,   178,    45,   197,   189,   185,
      -1,   201,   178,    47,   197,   189,   185,    -1,   201,    50,
     204,    -1,   201,    58,   150,   205,    -1,    -1,    30,    -1,
      55,    -1,    54,    -1,    52,   150,   203,    -1,    53,   150,
      18,    -1,    51,   150,    30,    -1,    71,   150,    30,    -1,
     155,   206,   157,    -1,   206,   151,    30,    -1,    30,    -1,
      -1,    28,    -1,    30,    -1,   207,    -1,    -1,   189,   208,
      -1,   210,   151,   209,    -1,   209,    -1,   210,    -1,   210,
     151,    40,    -1,    40,    -1,    -1,   180,   187,   207,   153,
     211,   154,   184,   181,    -1,    32,    -1,   160,    -1,   179,
     212,   213,    -1,    33,    -1,   161,    -1,   214,   225,   215,
      -1,    -1,    45,    -1,    47,    -1,    -1,    34,   219,   217,
     212,    -1,    -1,    63,    -1,    17,    -1,    18,    -1,    21,
      -1,    25,    -1,    26,    -1,    22,    -1,    23,    -1,    24,
      -1,   158,   196,   159,    -1,   195,    -1,    61,   220,    30,
     151,    30,    -1,   165,    -1,   207,    -1,   222,    -1,   221,
      -1,   189,   223,    -1,   225,   226,    -1,   226,    -1,   227,
     229,    -1,   227,   231,    -1,    -1,    29,    -1,    77,    -1,
      76,    -1,    72,   224,    -1,    72,     3,    -1,    73,    15,
     223,    -1,    73,     4,   223,   151,    15,   223,   151,    15,
     223,    -1,    74,   176,   223,   151,    15,   223,   155,   230,
     157,    -1,    74,   176,   223,   151,    15,   223,   155,   157,
      -1,   178,    75,   180,   187,   223,   153,   234,   154,    39,
      15,   223,   228,    15,   223,    -1,   228,    -1,    78,    -1,
     230,   176,   221,   151,    15,   223,    -1,   176,   221,   151,
      15,   223,    -1,   178,   236,    -1,   189,   155,   223,   151,
     223,   157,    -1,   232,   151,   155,   223,   151,   223,   157,
      -1,   224,    -1,   233,   151,   224,    -1,   233,    -1,    -1,
      60,    59,    -1,    59,    -1,   167,   189,   223,   151,   223,
      -1,   168,   189,   223,   151,   223,    -1,   169,   189,   223,
     151,   223,    -1,    99,   170,   189,   223,   151,   223,    -1,
     100,   171,   189,   223,   151,   223,    -1,   172,   224,   151,
     224,    -1,   173,   224,    39,   189,    -1,   128,   224,   151,
     224,   151,   224,    -1,   133,   224,   151,   189,    -1,   134,
     224,   151,   224,    -1,   135,   224,   151,   224,   151,   224,
      -1,   136,   224,   151,   224,   151,   224,    -1,   127,   232,
      -1,   235,   180,   187,   223,   153,   234,   154,    -1,   239,
      -1,   151,   233,    -1,    -1,    38,    -1,    -1,   121,   189,
     182,    -1,   121,   189,   151,    10,   223,   182,    -1,   122,
     189,   182,    -1,   122,   189,   151,    10,   223,   182,    -1,
     123,   224,    -1,   238,   124,   189,   223,    -1,   238,   125,
     224,   151,   189,   223,    -1,   126,   189,   223,   237,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,  1036,  1036,  1036,  1037,  1037,  1041,  1041,  1041,  1041,
    1041,  1041,  1041,  1042,  1042,  1042,  1042,  1043,  1043,  1043,
    1044,  1044,  1044,  1044,  1044,  1044,  1045,  1045,  1045,  1045,
    1045,  1045,  1045,  1045,  1045,  1045,  1046,  1046,  1046,  1046,
    1046,  1046,  1046,  1046,  1046,  1046,  1047,  1047,  1047,  1047,
    1047,  1047,  1048,  1048,  1048,  1048,  1049,  1049,  1049,  1049,
    1049,  1049,  1049,  1050,  1050,  1050,  1050,  1050,  1050,  1055,
    1055,  1055,  1055,  1056,  1056,  1056,  1056,  1057,  1057,  1058,
    1058,  1061,  1064,  1069,  1069,  1069,  1069,  1069,  1069,  1070,
    1071,  1074,  1074,  1074,  1074,  1074,  1075,  1076,  1081,  1086,
    1087,  1090,  1091,  1099,  1105,  1106,  1109,  1110,  1119,  1120,
    1133,  1133,  1134,  1134,  1135,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1140,  1140,  1140,  1140,  1140,  1142,  1145,  1148,
    1151,  1155,  1168,  1174,  1180,  1190,  1193,  1203,  1206,  1214,
    1218,  1225,  1226,  1231,  1236,  1246,  1253,  1259,  1266,  1273,
    1280,  1286,  1293,  1300,  1308,  1315,  1322,  1329,  1336,  1343,
    1350,  1358,  1372,  1384,  1389,  1395,  1400,  1406,  1411,  1416,
    1424,  1429,  1434,  1444,  1449,  1454,  1454,  1464,  1469,  1472,
    1477,  1481,  1485,  1487,  1487,  1490,  1500,  1505,  1510,  1520,
    1530,  1540,  1550,  1555,  1560,  1565,  1567,  1567,  1570,  1575,
    1582,  1587,  1594,  1601,  1606,  1607,  1615,  1615,  1616,  1616,
    1618,  1627,  1631,  1635,  1638,  1643,  1646,  1649,  1672,  1673,
    1676,  1687,  1688,  1690,  1699,  1700,  1701,  1705,  1705,  1719,
    1720,  1723,  1723,  1723,  1723,  1723,  1723,  1723,  1724,  1725,
    1730,  1731,  1740,  1740,  1744,  1750,  1761,  1770,  1773,  1781,
    1785,  1790,  1793,  1799,  1799,  1801,  1806,  1811,  1816,  1824,
    1834,  1843,  1865,  1870,  1876,  1882,  1890,  1908,  1917,  1927,
    1931,  1938,  1939,  1943,  1948,  1951,  1962,  1972,  1983,  1993,
    2003,  2014,  2044,  2053,  2060,  2069,  2076,  2083,  2089,  2140,
    2145,  2146,  2150,  2151,  2154,  2163,  2173,  2182,  2193,  2200,
    2211,  2222
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "VOID", "BOOL", "SBYTE", "UBYTE",
  "SHORT", "USHORT", "INT", "UINT", "LONG", "ULONG", "FLOAT", "DOUBLE",
  "LABEL", "OPAQUE", "ESINT64VAL", "EUINT64VAL", "SINTVAL", "UINTVAL",
  "FPVAL", "NULL_TOK", "UNDEF", "ZEROINITIALIZER", "TRUETOK", "FALSETOK",
  "TYPE", "VAR_ID", "LABELSTR", "STRINGCONSTANT", "IMPLEMENTATION",
  "BEGINTOK", "ENDTOK", "DECLARE", "GLOBAL", "CONSTANT", "SECTION",
  "VOLATILE", "TO", "DOTDOTDOT", "CONST", "INTERNAL", "LINKONCE", "WEAK",
  "DLLIMPORT", "DLLEXPORT", "EXTERN_WEAK", "APPENDING", "EXTERNAL",
  "TARGET", "TRIPLE", "ENDIAN", "POINTERSIZE", "LITTLE", "BIG", "ALIGN",
  "UNINITIALIZED", "DEPLIBS", "CALL", "TAIL", "ASM_TOK", "MODULE",
  "SIDEEFFECT", "CC_TOK", "CCC_TOK", "CSRETCC_TOK", "FASTCC_TOK",
  "COLDCC_TOK", "X86_STDCALLCC_TOK", "X86_FASTCALLCC_TOK", "DATALAYOUT",
  "RET", "BR", "SWITCH", "INVOKE", "EXCEPT", "UNWIND", "UNREACHABLE",
  "ADD", "SUB", "MUL", "DIV", "UDIV", "SDIV", "FDIV", "REM", "UREM",
  "SREM", "FREM", "AND", "OR", "XOR", "SETLE", "SETGE", "SETLT", "SETGT",
  "SETEQ", "SETNE", "ICMP", "FCMP", "EQ", "NE", "SLT", "SGT", "SLE", "SGE",
  "OEQ", "ONE", "OLT", "OGT", "OLE", "OGE", "ORD", "UNO", "UEQ", "UNE",
  "ULT", "UGT", "ULE", "UGE", "MALLOC", "ALLOCA", "FREE", "LOAD", "STORE",
  "GETELEMENTPTR", "PHI_TOK", "SELECT", "SHL", "SHR", "ASHR", "LSHR",
  "VAARG", "EXTRACTELEMENT", "INSERTELEMENT", "SHUFFLEVECTOR", "CAST",
  "TRUNC", "ZEXT", "SEXT", "FPTRUNC", "FPEXT", "FPTOUI", "FPTOSI",
  "UITOFP", "SITOFP", "PTRTOINT", "INTTOPTR", "BITCAST", "'='", "','",
  "'\\\\'", "'('", "')'", "'['", "'x'", "']'", "'<'", "'>'", "'{'", "'}'",
  "'*'", "'c'", "$accept", "IntVal", "EInt64Val", "ArithmeticOps",
  "LogicalOps", "SetCondOps", "IPredicates", "FPredicates", "ShiftOps",
  "CastOps", "SIntType", "UIntType", "IntType", "FPType", "OptAssign",
  "OptLinkage", "OptCallingConv", "OptAlign", "OptCAlign", "SectionString",
  "OptSection", "GlobalVarAttributes", "GlobalVarAttribute", "TypesV",
  "UpRTypesV", "Types", "PrimType", "UpRTypes", "TypeListI",
  "ArgTypeListI", "ConstVal", "ConstExpr", "ConstVector", "GlobalType",
  "Module", "DefinitionList", "External", "ConstPool", "AsmBlock",
  "BigOrLittle", "TargetDefinition", "LibrariesDefinition", "LibList",
  "Name", "OptName", "ArgVal", "ArgListH", "ArgList", "FunctionHeaderH",
  "BEGIN", "FunctionHeader", "END", "Function", "FnDeclareLinkage",
  "FunctionProto", "@1", "OptSideEffect", "ConstValueRef",
  "SymbolicValueRef", "ValueRef", "ResolvedVal", "BasicBlockList",
  "BasicBlock", "InstructionList", "Unwind", "BBTerminatorInst",
  "JumpTable", "Inst", "PHIList", "ValueRefList", "ValueRefListE",
  "OptTailCall", "InstVal", "IndexList", "OptVolatile", "MemoryInst", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short int yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      61,    44,    92,    40,    41,    91,   120,    93,    60,    62,
     123,   125,    42,    99
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,   164,   165,   165,   166,   166,   167,   167,   167,   167,
     167,   167,   167,   167,   167,   167,   167,   168,   168,   168,
     169,   169,   169,   169,   169,   169,   170,   170,   170,   170,
     170,   170,   170,   170,   170,   170,   171,   171,   171,   171,
     171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
     171,   171,   172,   172,   172,   172,   173,   173,   173,   173,
     173,   173,   173,   173,   173,   173,   173,   173,   173,   174,
     174,   174,   174,   175,   175,   175,   175,   176,   176,   177,
     177,   178,   178,   179,   179,   179,   179,   179,   179,   179,
     179,   180,   180,   180,   180,   180,   180,   180,   180,   181,
     181,   182,   182,   183,   184,   184,   185,   185,   186,   186,
     187,   187,   188,   188,   189,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   191,   191,   191,
     191,   191,   191,   191,   191,   191,   191,   191,   191,   192,
     192,   193,   193,   193,   193,   194,   194,   194,   194,   194,
     194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
     194,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   195,   195,   196,   196,   197,   197,   198,   199,   199,
     199,   199,   199,   200,   200,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   202,   203,   203,   204,   204,
     204,   204,   205,   206,   206,   206,   207,   207,   208,   208,
     209,   210,   210,   211,   211,   211,   211,   212,   213,   213,
     214,   215,   215,   216,   217,   217,   217,   219,   218,   220,
     220,   221,   221,   221,   221,   221,   221,   221,   221,   221,
     221,   221,   222,   222,   223,   223,   224,   225,   225,   226,
     227,   227,   227,   228,   228,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   231,   232,   232,   233,
     233,   234,   234,   235,   235,   236,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
     237,   237,   238,   238,   239,   239,   239,   239,   239,   239,
     239,   239
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     0,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     2,     0,     0,
       2,     0,     3,     2,     0,     1,     0,     3,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     4,     5,     5,     3,     2,     5,     4,     2,     1,
       3,     1,     3,     1,     0,     4,     3,     3,     4,     4,
       3,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     6,     5,     8,     6,     6,     6,     7,     7,     6,
       6,     8,     8,     3,     1,     1,     1,     1,     2,     2,
       4,     2,     1,     1,     1,     4,     2,     4,     6,     6,
       6,     6,     3,     4,     0,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     1,     0,     1,     1,     1,     0,
       2,     3,     1,     1,     3,     1,     0,     8,     1,     1,
       3,     1,     1,     3,     0,     1,     1,     0,     4,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     5,     1,     1,     1,     1,     2,     2,     1,     2,
       2,     0,     1,     1,     1,     2,     2,     3,     9,     9,
       8,    14,     1,     1,     6,     5,     2,     6,     7,     1,
       3,     1,     0,     2,     1,     5,     5,     5,     6,     6,
       4,     4,     6,     4,     4,     6,     6,     2,     7,     1,
       2,     0,     1,     0,     3,     6,     3,     6,     2,     4,
       6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short int yydefact[] =
{
     194,     0,    90,   182,     1,   181,   227,    83,    84,    85,
      87,    88,    89,    86,     0,    98,   251,   178,   179,   206,
     207,     0,     0,     0,    90,     0,   186,   224,     0,     0,
      91,    92,    93,    94,    95,    96,     0,     0,   252,   251,
     248,    82,     0,     0,     0,     0,   192,     0,     0,     0,
       0,     0,   183,   184,     0,     0,    81,   225,   226,    98,
     195,   180,    97,   111,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,     2,     3,     0,
       0,     0,     0,   242,     0,     0,   110,   129,   114,   243,
     128,   218,   219,   220,   221,   222,   223,   247,     0,     0,
       0,   254,   253,   263,   293,   262,   249,   250,     0,     0,
       0,     0,   205,   193,   187,   185,   175,   176,     0,     0,
       0,     0,   228,   130,     0,     0,     0,   113,   135,   139,
       0,     0,   144,   138,   256,     0,   255,     0,     0,    72,
      76,    71,    75,    70,    74,    69,    73,    77,    78,     0,
     292,   274,     0,    98,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,     0,     0,     0,     0,     0,     0,
       0,     0,    52,    53,    54,    55,     0,     0,     0,     0,
      68,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,     0,     0,     0,     0,    98,   266,
       0,   289,   200,   197,   196,   198,   199,   201,   204,     0,
     106,   106,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,   106,   106,     0,
       0,     0,     0,     0,   134,   216,   143,   141,     0,   231,
     232,   233,   236,   237,   238,   234,   235,   229,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   240,   245,   244,   246,     0,   257,     0,   273,     0,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
       0,    50,    51,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,     0,   101,   101,
     298,     0,     0,   287,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   202,     0,
     190,   191,   158,   159,     4,     5,   156,   157,   160,   151,
     152,   155,     0,     0,     0,     0,   154,   153,   188,   189,
     112,   112,   137,     0,   140,   215,   209,   212,   213,     0,
       0,   131,   230,     0,     0,     0,     0,     0,     0,     0,
       0,   174,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   294,     0,   296,   291,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   203,     0,     0,   108,   106,   146,     0,
       0,   150,     0,   147,   132,   133,   136,   208,   210,     0,
     104,   142,     0,     0,     0,   291,     0,     0,     0,     0,
       0,   239,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     0,
     283,   284,     0,     0,     0,     0,     0,   280,   281,     0,
     299,     0,   103,   109,   107,   145,   148,   149,   214,   211,
     105,    99,     0,     0,     0,     0,     0,     0,     0,     0,
     173,     0,     0,     0,     0,     0,     0,     0,   272,     0,
       0,   101,   102,   101,   269,   290,     0,     0,     0,     0,
       0,   275,   276,   277,   272,     0,     0,   217,   241,     0,
       0,   162,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   271,     0,   278,   279,     0,   295,   297,
       0,     0,     0,   282,   285,   286,     0,   300,   100,     0,
       0,     0,   170,     0,     0,   164,   165,   166,   169,   161,
       0,   260,     0,     0,     0,   270,   267,     0,   288,   167,
     168,     0,     0,     0,   258,     0,   259,     0,     0,   268,
     163,   171,   172,     0,     0,     0,     0,     0,     0,   265,
       0,     0,   264,     0,   261
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short int yydefgoto[] =
{
      -1,    83,   336,   266,   267,   268,   290,   307,   269,   270,
     233,   234,   149,   235,    24,    15,    36,   507,   384,   406,
     471,   330,   407,    84,    85,   236,    87,    88,   130,   248,
     371,   271,   372,   118,     1,     2,    55,     3,    61,   215,
      46,   113,   219,    89,   418,   357,   358,   359,    37,    93,
      16,    96,    17,    59,    18,    27,   363,   272,    90,   274,
     494,    39,    40,    41,   105,   106,   553,   107,   313,   523,
     524,   208,   209,   446,   210,   211
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -537
static const short int yypact[] =
{
    -537,    75,    61,  1145,  -537,  -537,  -537,  -537,  -537,  -537,
    -537,  -537,  -537,  -537,    18,   180,    55,  -537,  -537,  -537,
    -537,   -28,   -61,    33,   130,   -40,  -537,   102,    87,   117,
    -537,  -537,  -537,  -537,  -537,  -537,   838,   -24,  -537,   -15,
    -537,    48,   -11,    -2,     6,    12,  -537,    11,    87,   838,
      -9,    -9,  -537,  -537,    -9,    -9,  -537,  -537,  -537,   180,
    -537,  -537,  -537,    32,  -537,  -537,  -537,  -537,  -537,  -537,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,   164,
     171,    -6,   512,  -537,   135,    41,  -537,  -537,  -103,  -537,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,   883,    45,
     192,  -537,  -537,  -537,  1324,  -537,  -537,  -537,   175,   126,
     190,   188,   203,  -537,  -537,  -537,  -537,  -537,   911,   911,
     957,   911,  -537,  -537,    81,    97,   561,  -537,  -537,  -103,
    -109,   121,   641,  -537,    32,  1140,  -537,  1140,  1140,  -537,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  1140,
    -537,  -537,   219,   180,  -537,  -537,  -537,  -537,  -537,  -537,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
    -537,  -537,  -537,  -537,    10,   112,   911,   911,   911,   911,
     911,   911,  -537,  -537,  -537,  -537,   911,   911,   911,   911,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
    -537,  -537,  -537,   911,   911,   911,   911,   911,   180,  -537,
      59,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,   -71,
     129,   129,   167,   193,   195,   218,   222,   224,   234,   243,
     250,   261,   263,   252,   252,   264,   993,   129,   129,   911,
     911,   127,   -97,   911,  -537,   680,  -537,   136,   137,  -537,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,   229,    10,   112,
     140,   141,   144,   145,   146,   957,   147,   148,   150,   154,
     155,  -537,  -537,  -537,  -537,   158,  -537,   160,  -537,   838,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
     911,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,   911,   163,   165,
    -537,  1140,   162,   169,   170,   172,   173,   174,   176,  1140,
    1140,  1140,   177,   276,   838,   911,   911,   288,  -537,    -8,
    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
    -537,  -537,   724,   957,   590,   292,  -537,  -537,  -537,  -537,
    -106,  -104,  -537,   179,  -103,  -537,   135,  -537,   178,   181,
     752,  -537,  -537,   296,   183,   187,   957,   957,   957,   957,
     957,  -537,  -131,   957,   957,   957,   957,   957,   315,   316,
    1140,  1140,  1140,     1,  -537,     7,  -537,   191,  1140,   186,
     911,   911,   911,   911,   911,   194,   197,   201,   911,   911,
    1140,  1140,   202,  -537,   304,   326,  -537,   129,  -537,   -60,
     -78,  -537,   -74,  -537,  -537,  -537,  -537,  -537,  -537,   799,
     309,  -537,   208,   957,   957,   191,   210,   213,   223,   225,
     957,  -537,   230,   231,   235,   236,   308,  1140,  1140,   227,
     237,   238,  1140,   357,  1140,   911,  -537,   239,  1140,   241,
    -537,  -537,   242,   244,  1140,  1140,  1140,  -537,  -537,   248,
    -537,   911,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
    -537,   338,   366,   246,   251,   249,   957,   957,   957,   957,
    -537,   957,   957,   957,   957,   911,   253,   258,   911,  1140,
    1140,   254,  -537,   254,  -537,   255,  1140,   256,   911,   911,
     911,  -537,  -537,  -537,   911,  1140,   390,  -537,  -537,   957,
     957,  -537,   265,   260,   266,   267,   268,   272,   274,   275,
     277,   400,    29,   255,   280,  -537,  -537,   363,  -537,  -537,
     911,   278,  1140,  -537,  -537,  -537,   282,  -537,  -537,   283,
     287,   957,  -537,   957,   957,  -537,  -537,  -537,  -537,  -537,
    1140,  -537,  1229,    60,   381,  -537,  -537,   286,  -537,  -537,
    -537,   290,   293,   294,  -537,   270,  -537,  1229,   435,  -537,
    -537,  -537,  -537,   436,   302,  1140,  1140,   441,   196,  -537,
    1140,   442,  -537,  1140,  -537
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -537,  -537,   226,   361,   362,   365,   209,   214,   368,   370,
     -99,   -98,  -507,  -537,   420,   452,  -134,  -537,  -303,    57,
    -537,  -216,  -537,   -45,  -537,   -36,  -537,   -79,   -30,  -537,
    -111,   245,  -210,   104,  -537,  -537,  -537,  -537,   431,  -537,
    -537,  -537,  -537,     4,  -537,    63,  -537,  -537,   421,  -537,
    -537,  -537,  -537,  -537,   480,  -537,  -537,  -536,  -105,    58,
     -88,  -537,   445,  -537,   -93,  -537,  -537,  -537,  -537,    42,
     -18,  -537,  -537,    64,  -537,  -537
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -178
static const short int yytable[] =
{
      86,   147,   148,   129,   115,   331,   386,    25,    91,   237,
     136,   442,   125,    86,    38,   552,   565,   444,    94,   279,
     430,   348,   349,    42,    43,    44,   116,   117,   431,   404,
     273,   574,   273,   273,   139,   140,   141,   142,   143,   144,
     145,   146,   243,    45,   273,    25,   567,   129,   405,   137,
    -112,   414,   244,   129,   243,   415,   133,   443,   133,   133,
     138,  -177,   135,   443,   353,   139,   140,   141,   142,   143,
     144,   145,   146,   430,   324,     4,    19,   430,    20,    28,
     327,   466,   220,   221,    38,   238,   328,   467,   131,    47,
     310,   430,     5,   314,    48,     6,   242,   465,   315,   316,
     317,   318,   247,     7,     8,     9,    10,    11,    12,    13,
      56,   280,   281,   282,   283,   284,   285,    60,   322,   323,
      98,    99,   100,    14,   101,   102,   103,   286,   287,   288,
     289,   347,   409,   410,   412,    62,    92,   291,   292,   108,
     308,   309,   135,   311,   312,   135,    95,    57,   109,    58,
     135,   135,   135,   135,   126,   119,   110,    49,   120,   121,
     350,   351,   111,    19,   354,    20,   112,   319,   320,   321,
     135,   135,     7,     8,     9,    50,    11,    51,    13,    52,
     213,   214,   123,   325,   326,  -113,   551,    53,   528,   124,
     529,   464,   332,   333,   132,   275,   276,   139,   140,   141,
     142,   143,   144,   145,   146,   212,   273,   277,   216,   356,
     -72,   -72,   -76,   -76,   273,   273,   273,   566,   217,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   218,   380,   -71,   -71,   239,   402,   -75,
     -75,   -70,   -70,    86,    29,    30,    31,    32,    33,    34,
      35,   -74,   -74,   240,   381,   425,   426,   427,   428,   429,
     -69,   -69,   432,   433,   434,   435,   436,   -73,   -73,   334,
     335,   382,   101,   102,   245,   273,   273,   273,   278,   400,
     329,   354,   -79,   273,   -80,   338,   352,   360,    86,   401,
     135,   361,   362,   366,   367,   273,   273,   368,   369,   370,
     373,   374,   449,   375,   451,   452,   453,   376,   377,   378,
     457,   379,   473,   474,   383,   399,   385,   388,   403,   480,
     389,   390,   413,   391,   392,   393,   422,   394,   398,   419,
     437,   438,   273,   273,   462,   420,   423,   273,   416,   273,
     424,   448,   445,   273,   463,   454,   404,   485,   455,   273,
     273,   273,   456,   461,   135,   450,   135,   135,   135,   472,
     417,   476,   135,   458,   477,   512,   513,   514,   515,   387,
     516,   517,   518,   519,   478,   492,   479,   395,   396,   397,
     488,   481,   482,   356,   273,   273,   483,   484,   489,   490,
     496,   273,   498,   499,   506,   500,   508,   509,   539,   540,
     273,   504,   510,   511,   521,   527,   530,   532,   538,   135,
     533,   534,   535,   522,   542,   550,   541,   543,   544,   443,
     568,   573,   545,   147,   148,   505,   546,   273,   547,   548,
     561,   549,   562,   563,   554,   556,   558,   559,   439,   440,
     441,   560,   555,   569,   570,   273,   447,   571,   572,   520,
     575,   576,   135,   577,   147,   148,   580,   583,   459,   460,
     337,   104,   135,   135,   135,   203,   204,   364,   135,   205,
     273,   273,   206,   365,   207,   273,    54,   470,   273,   114,
     122,   346,   469,    26,    97,   581,   536,   495,     0,   475,
       0,     0,     0,     0,   135,   486,   487,     0,     0,     0,
     491,     0,   493,     0,     0,     0,   497,     0,     0,     0,
       0,     0,   501,   502,   503,   127,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
       0,    77,    78,     0,     0,     0,     0,     0,     0,     0,
      19,     0,    20,     0,     0,     0,     0,   525,   526,     0,
       0,     0,     0,     0,   531,     0,     0,     0,     0,     0,
       0,     0,     0,   537,   127,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
      77,    78,     0,     0,     0,     0,     0,     0,     0,    19,
     557,    20,     0,   127,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,    75,    76,     0,   564,    77,
      78,     0,     0,     0,     0,     0,     0,     0,    19,     0,
      20,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   578,   579,     0,     0,     0,   582,     0,
       0,   584,     0,     0,   127,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
      77,    78,     0,     0,    79,     0,     0,    80,     0,    19,
      81,    20,    82,   128,     0,     0,     0,     0,     0,     0,
       0,   246,     0,   127,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,     0,     0,    77,
      78,     0,     0,     0,     0,     0,     0,     0,    19,     0,
      20,     0,     0,    79,     0,     0,    80,     0,     0,    81,
     355,    82,   241,     0,     0,     0,     0,   127,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,    75,
      76,     0,    79,    77,    78,    80,     0,     0,    81,     0,
      82,   411,    19,     0,    20,   127,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
       0,    77,    78,     0,     0,     0,     0,     0,     0,     0,
      19,     0,    20,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   421,    79,     0,     0,    80,     0,     0,    81,
       0,    82,   127,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,     0,     0,    77,    78,
       0,     0,     0,     0,     0,     0,     0,    19,     0,    20,
       0,     0,    79,     0,     0,    80,     0,     0,    81,   468,
      82,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,     0,     0,    77,    78,     0,
       0,     0,     0,     0,     0,     0,    19,     0,    20,     0,
       0,     0,     0,     0,     0,     0,    79,     0,     0,    80,
       0,   408,    81,     0,    82,     0,   134,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
       0,     0,    77,    78,    79,     0,     0,    80,     0,     0,
      81,    19,    82,    20,   127,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
      77,    78,     0,     0,     0,     0,     0,     0,     0,    19,
       0,    20,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    79,     0,     0,    80,     0,     0,    81,     0,    82,
     127,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,    75,    76,     0,     0,    77,    78,     0,     0,
       0,     0,     0,     0,     0,    19,     0,    20,     0,     0,
      79,     0,     0,    80,     0,     0,    81,     0,    82,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    77,    78,     0,   339,   340,   341,     0,     0,
       0,    19,     0,    20,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    79,     0,     0,    80,     0,
       0,    81,     0,    82,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    79,     0,     0,    80,     0,     0,    81,
       0,    82,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   258,   259,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    79,
       0,     0,    80,     0,     0,    81,     0,    82,     0,   260,
       0,   261,   182,   183,   184,   185,     0,   262,   263,   264,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,     0,     0,     0,     0,     0,   342,     0,
       0,   343,     0,   344,     0,     0,   345,   249,   250,    77,
      78,   251,   252,   253,   254,   255,   256,     0,    19,     0,
      20,     0,   -82,    19,     0,    20,     0,     0,     0,     6,
     -82,   -82,     0,     0,     0,     0,     0,   -82,   -82,   -82,
     -82,   -82,   -82,   -82,   -82,    21,     0,     0,     0,     0,
       0,   257,   -82,    22,     0,     0,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   258,
     259,     0,     0,     0,     0,     0,   249,   250,     0,     0,
     251,   252,   253,   254,   255,   256,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   260,     0,   261,   182,
     183,   184,   185,     0,   262,   263,   264,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     257,     0,     0,     0,     0,     0,     0,     0,   265,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   258,   259,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   260,     0,   261,   182,   183,
     184,   185,   150,   262,   263,   264,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,     0,
       0,     0,     0,   151,   152,     0,     0,   265,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   153,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,   177,   178,     0,     0,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202
};

static const short int yycheck[] =
{
      36,   100,   100,    82,    49,   221,   309,     3,    32,   120,
      98,    10,    18,    49,    29,   522,   552,    10,    33,   153,
     151,   237,   238,    51,    52,    53,    35,    36,   159,    37,
     135,   567,   137,   138,     5,     6,     7,     8,     9,    10,
      11,    12,   151,    71,   149,    41,   553,   126,    56,     4,
     153,   157,   161,   132,   151,   159,   162,    56,   162,   162,
      15,     0,    98,    56,   161,     5,     6,     7,     8,     9,
      10,    11,    12,   151,   208,     0,    28,   151,    30,    61,
     151,   159,   118,   119,    29,   121,   157,   161,    84,   150,
     178,   151,    31,   181,    61,    34,   126,   157,   186,   187,
     188,   189,   132,    42,    43,    44,    45,    46,    47,    48,
     150,   101,   102,   103,   104,   105,   106,    30,   206,   207,
      72,    73,    74,    62,    76,    77,    78,   117,   118,   119,
     120,   236,   342,   343,   344,    18,   160,    25,    26,   150,
     176,   177,   178,   179,   180,   181,   161,    45,   150,    47,
     186,   187,   188,   189,   160,    51,   150,    27,    54,    55,
     239,   240,   150,    28,   243,    30,   155,   203,   204,   205,
     206,   207,    42,    43,    44,    45,    46,    47,    48,    49,
      54,    55,    18,   124,   125,   153,   157,    57,   491,    18,
     493,   407,    25,    26,   153,   137,   138,     5,     6,     7,
       8,     9,    10,    11,    12,    30,   311,   149,    18,   245,
      17,    18,    17,    18,   319,   320,   321,   157,    30,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    30,   279,    17,    18,   156,   326,    17,
      18,    17,    18,   279,    64,    65,    66,    67,    68,    69,
      70,    17,    18,   156,   290,   366,   367,   368,   369,   370,
      17,    18,   373,   374,   375,   376,   377,    17,    18,    17,
      18,   307,    76,    77,   153,   380,   381,   382,    59,   324,
     151,   360,    21,   388,    21,    21,   159,   151,   324,   325,
     326,   154,    63,   153,   153,   400,   401,   153,   153,   153,
     153,   153,   390,   153,   392,   393,   394,   153,   153,   151,
     398,   151,   423,   424,   151,    39,   151,   155,    30,   430,
     151,   151,    30,   151,   151,   151,    30,   151,   151,   151,
      15,    15,   437,   438,    30,   154,   153,   442,   159,   444,
     153,   155,   151,   448,    18,   151,    37,    39,   151,   454,
     455,   456,   151,   151,   390,   391,   392,   393,   394,   151,
     356,   151,   398,   399,   151,   476,   477,   478,   479,   311,
     481,   482,   483,   484,   151,    18,   151,   319,   320,   321,
     153,   151,   151,   419,   489,   490,   151,   151,   151,   151,
     151,   496,   151,   151,    56,   151,    30,   151,   509,   510,
     505,   153,   151,   154,   151,   151,   151,   151,    18,   445,
     498,   499,   500,   155,   154,    15,   151,   151,   151,    56,
      39,   151,   154,   522,   522,   461,   154,   532,   154,   154,
     541,   154,   543,   544,   154,   157,   154,   154,   380,   381,
     382,   154,   530,   157,   154,   550,   388,   154,   154,   485,
      15,    15,   488,   151,   553,   553,    15,    15,   400,   401,
     234,    41,   498,   499,   500,   104,   104,   258,   504,   104,
     575,   576,   104,   259,   104,   580,    24,   420,   583,    48,
      59,   236,   419,     3,    39,   578,   504,   445,    -1,   425,
      -1,    -1,    -1,    -1,   530,   437,   438,    -1,    -1,    -1,
     442,    -1,   444,    -1,    -1,    -1,   448,    -1,    -1,    -1,
      -1,    -1,   454,   455,   456,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    -1,
      -1,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    30,    -1,    -1,    -1,    -1,   489,   490,    -1,
      -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    -1,    -1,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
     532,    30,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    -1,   550,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   575,   576,    -1,    -1,    -1,   580,    -1,
      -1,   583,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    -1,    -1,
      19,    20,    -1,    -1,   152,    -1,    -1,   155,    -1,    28,
     158,    30,   160,   161,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    -1,    -1,    19,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      30,    -1,    -1,   152,    -1,    -1,   155,    -1,    -1,   158,
      40,   160,   161,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    -1,   152,    19,    20,   155,    -1,    -1,   158,    -1,
     160,   161,    28,    -1,    30,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    -1,
      -1,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,   152,    -1,    -1,   155,    -1,    -1,   158,
      -1,   160,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    -1,    -1,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    30,
      -1,    -1,   152,    -1,    -1,   155,    -1,    -1,   158,    40,
     160,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    -1,    -1,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,   155,
      -1,   157,   158,    -1,   160,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      -1,    -1,    19,    20,   152,    -1,    -1,   155,    -1,    -1,
     158,    28,   160,    30,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    -1,    -1,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,    -1,    -1,   158,    -1,   160,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    -1,    -1,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    30,    -1,    -1,
     152,    -1,    -1,   155,    -1,    -1,   158,    -1,   160,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    20,    -1,    22,    23,    24,    -1,    -1,
      -1,    28,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   152,    -1,    -1,   155,    -1,
      -1,   158,    -1,   160,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,    -1,    -1,   158,
      -1,   160,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
      -1,    -1,   155,    -1,    -1,   158,    -1,   160,    -1,   126,
      -1,   128,   129,   130,   131,   132,    -1,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,    -1,    -1,    -1,    -1,    -1,   155,    -1,
      -1,   158,    -1,   160,    -1,    -1,   163,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    28,    -1,
      30,    -1,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      35,    36,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    61,    57,    58,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    -1,
      21,    22,    23,    24,    25,    26,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,   132,    -1,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
      61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   158,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   126,    -1,   128,   129,   130,
     131,   132,    38,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,    -1,
      -1,    -1,    -1,    59,    60,    -1,    -1,   158,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,   122,   123,    -1,    -1,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,   198,   199,   201,     0,    31,    34,    42,    43,    44,
      45,    46,    47,    48,    62,   179,   214,   216,   218,    28,
      30,    50,    58,    62,   178,   207,   218,   219,    61,    64,
      65,    66,    67,    68,    69,    70,   180,   212,    29,   225,
     226,   227,    51,    52,    53,    71,   204,   150,    61,    27,
      45,    47,    49,    57,   179,   200,   150,    45,    47,   217,
      30,   202,    18,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    19,    20,   152,
     155,   158,   160,   165,   187,   188,   189,   190,   191,   207,
     222,    32,   160,   213,    33,   161,   215,   226,    72,    73,
      74,    76,    77,    78,   178,   228,   229,   231,   150,   150,
     150,   150,   155,   205,   202,   187,    35,    36,   197,   197,
     197,   197,   212,    18,    18,    18,   160,     3,   161,   191,
     192,   207,   153,   162,     3,   189,   224,     4,    15,     5,
       6,     7,     8,     9,    10,    11,    12,   174,   175,   176,
      38,    59,    60,    75,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   121,   122,   123,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   167,   168,   169,   172,   173,   235,   236,
     238,   239,    30,    54,    55,   203,    18,    30,    30,   206,
     189,   189,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,   174,   175,   177,   189,   194,   189,   156,
     156,   161,   192,   151,   161,   153,    40,   192,   193,    17,
      18,    21,    22,    23,    24,    25,    26,    61,    99,   100,
     126,   128,   134,   135,   136,   158,   167,   168,   169,   172,
     173,   195,   221,   222,   223,   223,   223,   223,    59,   180,
     101,   102,   103,   104,   105,   106,   117,   118,   119,   120,
     170,    25,    26,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   171,   189,   189,
     224,   189,   189,   232,   224,   224,   224,   224,   224,   189,
     189,   189,   224,   224,   180,   124,   125,   151,   157,   151,
     185,   185,    25,    26,    17,    18,   166,   166,    21,    22,
      23,    24,   155,   158,   160,   163,   195,   222,   185,   185,
     191,   191,   159,   161,   191,    40,   189,   209,   210,   211,
     151,   154,    63,   220,   170,   171,   153,   153,   153,   153,
     153,   194,   196,   153,   153,   153,   153,   153,   151,   151,
     187,   189,   189,   151,   182,   151,   182,   223,   155,   151,
     151,   151,   151,   151,   151,   223,   223,   223,   151,    39,
     187,   189,   224,    30,    37,    56,   183,   186,   157,   196,
     196,   161,   196,    30,   157,   159,   159,   207,   208,   151,
     154,    40,    30,   153,   153,   194,   194,   194,   194,   194,
     151,   159,   194,   194,   194,   194,   194,    15,    15,   223,
     223,   223,    10,    56,    10,   151,   237,   223,   155,   224,
     189,   224,   224,   224,   151,   151,   151,   224,   189,   223,
     223,   151,    30,    18,   185,   157,   159,   161,    40,   209,
     183,   184,   151,   194,   194,   237,   151,   151,   151,   151,
     194,   151,   151,   151,   151,    39,   223,   223,   153,   151,
     151,   223,    18,   223,   224,   233,   151,   223,   151,   151,
     151,   223,   223,   223,   153,   189,    56,   181,    30,   151,
     151,   154,   194,   194,   194,   194,   194,   194,   194,   194,
     189,   151,   155,   233,   234,   223,   223,   151,   182,   182,
     151,   223,   151,   224,   224,   224,   234,   223,    18,   194,
     194,   151,   154,   151,   151,   154,   154,   154,   154,   154,
      15,   157,   176,   230,   154,   224,   157,   223,   154,   154,
     154,   194,   194,   194,   223,   221,   157,   176,    39,   157,
     154,   154,   154,   151,   221,    15,    15,   151,   223,   223,
      15,   228,   223,    15,   223
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (0)


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (N)								\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (0)
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
              (Loc).first_line, (Loc).first_column,	\
              (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr,					\
                  Type, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short int *bottom, short int *top)
#else
static void
yy_stack_print (bottom, top)
    short int *bottom;
    short int *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname[yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);


# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  short int *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short int *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short int *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a look-ahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to look-ahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 81:
#line 1061 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = (yyvsp[-1].String);
  ;}
    break;

  case 82:
#line 1064 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = new std::string(""); 
  ;}
    break;

  case 90:
#line 1071 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(""); ;}
    break;

  case 97:
#line 1076 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    *(yyvsp[-1].String) += *(yyvsp[0].String); 
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-1].String); 
    ;}
    break;

  case 98:
#line 1081 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(""); ;}
    break;

  case 99:
#line 1086 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 100:
#line 1087 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { *(yyvsp[-1].String) += " " + *(yyvsp[0].String); delete (yyvsp[0].String); (yyval.String) = (yyvsp[-1].String); ;}
    break;

  case 101:
#line 1090 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 102:
#line 1091 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    (yyvsp[-1].String)->insert(0, ", "); 
    *(yyvsp[-1].String) += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-1].String);
  ;}
    break;

  case 103:
#line 1099 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    *(yyvsp[-1].String) += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-1].String);
  ;}
    break;

  case 104:
#line 1105 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 106:
#line 1109 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 107:
#line 1110 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
      (yyvsp[-1].String)->insert(0, ", ");
      if (!(yyvsp[0].String)->empty())
        *(yyvsp[-1].String) += " " + *(yyvsp[0].String);
      delete (yyvsp[0].String);
      (yyval.String) = (yyvsp[-1].String);
    ;}
    break;

  case 109:
#line 1120 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
      *(yyvsp[-1].String) += " " + *(yyvsp[0].String);
      delete (yyvsp[0].String);
      (yyval.String) = (yyvsp[-1].String);
    ;}
    break;

  case 127:
#line 1142 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    (yyval.Ty) = Type::get(*(yyvsp[0].String), OpaqueTy);
  ;}
    break;

  case 128:
#line 1145 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    (yyval.Ty) = Type::get(*(yyvsp[0].String), UnresolvedTy);
  ;}
    break;

  case 129:
#line 1148 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    (yyval.Ty) = (yyvsp[0].Ty); 
  ;}
    break;

  case 130:
#line 1151 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                   // Type UpReference
    (yyvsp[0].String)->insert(0, "\\");
    (yyval.Ty) = Type::get(*(yyvsp[0].String), UpRefTy);
  ;}
    break;

  case 131:
#line 1155 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {           // Function derived type?
    std::string newTy( (yyvsp[-3].Ty)->getNewTy() + "(");
    for (unsigned i = 0; i < (yyvsp[-1].TypeVec)->size(); ++i) {
      if (i != 0)
        newTy +=  ", ";
      if ((*(yyvsp[-1].TypeVec))[i]->isVoid())
        newTy += "...";
      else
        newTy += (*(yyvsp[-1].TypeVec))[i]->getNewTy();
    }
    newTy += ")";
    (yyval.Ty) = Type::get(newTy, (yyvsp[-3].Ty), (yyvsp[-1].TypeVec));
  ;}
    break;

  case 132:
#line 1168 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {          // Sized array type?
    uint64_t elems = atoi((yyvsp[-3].String)->c_str());
    (yyvsp[-3].String)->insert(0,"[ ");
    *(yyvsp[-3].String) += " x " + (yyvsp[-1].Ty)->getNewTy() + " ]";
    (yyval.Ty) = Type::get(*(yyvsp[-3].String), ArrayTy, (yyvsp[-1].Ty), elems);
  ;}
    break;

  case 133:
#line 1174 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {          // Packed array type?
    uint64_t elems = atoi((yyvsp[-3].String)->c_str());
    (yyvsp[-3].String)->insert(0,"< ");
    *(yyvsp[-3].String) += " x " + (yyvsp[-1].Ty)->getNewTy() + " >";
    (yyval.Ty) = Type::get(*(yyvsp[-3].String), PackedTy, (yyvsp[-1].Ty), elems);
  ;}
    break;

  case 134:
#line 1180 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                        // Structure type?
    std::string newTy("{");
    for (unsigned i = 0; i < (yyvsp[-1].TypeVec)->size(); ++i) {
      if (i != 0)
        newTy +=  ", ";
      newTy += (*(yyvsp[-1].TypeVec))[i]->getNewTy();
    }
    newTy += "}";
    (yyval.Ty) = Type::get(newTy, StructTy, (yyvsp[-1].TypeVec));
  ;}
    break;

  case 135:
#line 1190 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                                  // Empty structure type?
    (yyval.Ty) = Type::get("{}", StructTy, new TypeList());
  ;}
    break;

  case 136:
#line 1193 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                // Packed Structure type?
    std::string newTy("<{");
    for (unsigned i = 0; i < (yyvsp[-2].TypeVec)->size(); ++i) {
      if (i != 0)
        newTy +=  ", ";
      newTy += (*(yyvsp[-2].TypeVec))[i]->getNewTy();
    }
    newTy += "}>";
    (yyval.Ty) = Type::get(newTy, PackedStructTy, (yyvsp[-2].TypeVec));
  ;}
    break;

  case 137:
#line 1203 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                          // Empty packed structure type?
    (yyval.Ty) = Type::get("<{}>", PackedStructTy, new TypeList());
  ;}
    break;

  case 138:
#line 1206 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                             // Pointer type?
    (yyval.Ty) = (yyvsp[-1].Ty)->getPointerType();
  ;}
    break;

  case 139:
#line 1214 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.TypeVec) = new TypeList();
    (yyval.TypeVec)->push_back((yyvsp[0].Ty));
  ;}
    break;

  case 140:
#line 1218 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.TypeVec) = (yyvsp[-2].TypeVec);
    (yyval.TypeVec)->push_back((yyvsp[0].Ty));
  ;}
    break;

  case 142:
#line 1226 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.TypeVec) = (yyvsp[-2].TypeVec);
    (yyval.TypeVec)->push_back(Type::get("void",VoidTy));
    delete (yyvsp[0].String);
  ;}
    break;

  case 143:
#line 1231 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.TypeVec) = new TypeList();
    (yyval.TypeVec)->push_back(Type::get("void",VoidTy));
    delete (yyvsp[0].String);
  ;}
    break;

  case 144:
#line 1236 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.TypeVec) = new TypeList();
  ;}
    break;

  case 145:
#line 1246 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { // Nonempty unsized arr
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-3].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-3].Ty)->getNewTy());
    *(yyval.Const)->cnst += " [ " + *(yyvsp[-1].String) + " ]";
    delete (yyvsp[-1].String);
  ;}
    break;

  case 146:
#line 1253 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-2].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-2].Ty)->getNewTy());
    *(yyval.Const)->cnst += "[ ]";
  ;}
    break;

  case 147:
#line 1259 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-2].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-2].Ty)->getNewTy());
    *(yyval.Const)->cnst += " c" + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 148:
#line 1266 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { // Nonempty unsized arr
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-3].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-3].Ty)->getNewTy());
    *(yyval.Const)->cnst += " < " + *(yyvsp[-1].String) + " >";
    delete (yyvsp[-1].String);
  ;}
    break;

  case 149:
#line 1273 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-3].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-3].Ty)->getNewTy());
    *(yyval.Const)->cnst += " { " + *(yyvsp[-1].String) + " }";
    delete (yyvsp[-1].String);
  ;}
    break;

  case 150:
#line 1280 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-2].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-2].Ty)->getNewTy());
    *(yyval.Const)->cnst += " {}";
  ;}
    break;

  case 151:
#line 1286 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst +=  " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 152:
#line 1293 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 153:
#line 1300 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    std::string Name = getUniqueName((yyvsp[0].String), (yyvsp[-1].Ty)->resolve(), true);
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + Name;
    delete (yyvsp[0].String);
  ;}
    break;

  case 154:
#line 1308 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 155:
#line 1315 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 156:
#line 1322 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {      // integral constants
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 157:
#line 1329 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {            // integral constants
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 158:
#line 1336 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                      // Boolean constants
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 159:
#line 1343 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                     // Boolean constants
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 160:
#line 1350 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                   // Float & Double constants
    (yyval.Const) = new Constant;
    (yyval.Const)->type = (yyvsp[-1].Ty);
    (yyval.Const)->cnst = new std::string((yyvsp[-1].Ty)->getNewTy());
    *(yyval.Const)->cnst += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 161:
#line 1358 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string source = *(yyvsp[-3].Const)->cnst;
    const Type* SrcTy = (yyvsp[-3].Const)->type->resolve();
    const Type* DstTy = (yyvsp[-1].Ty)->resolve(); 
    if (*(yyvsp[-5].String) == "cast") {
      // Call getCastUpgrade to upgrade the old cast
      (yyval.String) = new std::string(getCastUpgrade(source, SrcTy, DstTy, true));
    } else {
      // Nothing to upgrade, just create the cast constant expr
      (yyval.String) = new std::string(*(yyvsp[-5].String));
      *(yyval.String) += "( " + source + " to " + (yyvsp[-1].Ty)->getNewTy() + ")";
    }
    delete (yyvsp[-5].String); delete (yyvsp[-3].Const); delete (yyvsp[-2].String);
  ;}
    break;

  case 162:
#line 1372 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-4].String) += "(" + *(yyvsp[-2].Const)->cnst;
    for (unsigned i = 0; i < (yyvsp[-1].ValList)->size(); ++i) {
      Value* V = (*(yyvsp[-1].ValList))[i];
      *(yyvsp[-4].String) += ", " + *V->val;
      delete V;
    }
    *(yyvsp[-4].String) += ")";
    (yyval.String) = (yyvsp[-4].String);
    delete (yyvsp[-2].Const);
    delete (yyvsp[-1].ValList);
  ;}
    break;

  case 163:
#line 1384 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-7].String) += "(" + *(yyvsp[-5].Const)->cnst + "," + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-5].Const); delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
    (yyval.String) = (yyvsp[-7].String);
  ;}
    break;

  case 164:
#line 1389 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    const char* op = getDivRemOpcode(*(yyvsp[-5].String), (yyvsp[-3].Const)->type); 
    (yyval.String) = new std::string(op);
    *(yyval.String) += "(" + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-5].String); delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
  ;}
    break;

  case 165:
#line 1395 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-5].String) += "(" + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
    (yyval.String) = (yyvsp[-5].String);
  ;}
    break;

  case 166:
#line 1400 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-5].String) = getCompareOp(*(yyvsp[-5].String), (yyvsp[-3].Const)->type);
    *(yyvsp[-5].String) += "(" + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
    (yyval.String) = (yyvsp[-5].String);
  ;}
    break;

  case 167:
#line 1406 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-6].String) += " " + *(yyvsp[-5].String) + " (" +  *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-5].String); delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
    (yyval.String) = (yyvsp[-6].String);
  ;}
    break;

  case 168:
#line 1411 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-6].String) += " " + *(yyvsp[-5].String) + " (" + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-5].String); delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
    (yyval.String) = (yyvsp[-6].String);
  ;}
    break;

  case 169:
#line 1416 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    const char* shiftop = (yyvsp[-5].String)->c_str();
    if (*(yyvsp[-5].String) == "shr")
      shiftop = ((yyvsp[-3].Const)->type->isUnsigned()) ? "lshr" : "ashr";
    (yyval.String) = new std::string(shiftop);
    *(yyval.String) += "(" + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-5].String); delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
  ;}
    break;

  case 170:
#line 1424 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-5].String) += "(" + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
    (yyval.String) = (yyvsp[-5].String);
  ;}
    break;

  case 171:
#line 1429 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-7].String) += "(" + *(yyvsp[-5].Const)->cnst + "," + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-5].Const); delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
    (yyval.String) = (yyvsp[-7].String);
  ;}
    break;

  case 172:
#line 1434 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-7].String) += "(" + *(yyvsp[-5].Const)->cnst + "," + *(yyvsp[-3].Const)->cnst + "," + *(yyvsp[-1].Const)->cnst + ")";
    delete (yyvsp[-5].Const); delete (yyvsp[-3].Const); delete (yyvsp[-1].Const);
    (yyval.String) = (yyvsp[-7].String);
  ;}
    break;

  case 173:
#line 1444 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += ", " + *(yyvsp[0].Const)->cnst;
    delete (yyvsp[0].Const);
    (yyval.String) = (yyvsp[-2].String);
  ;}
    break;

  case 174:
#line 1449 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(*(yyvsp[0].Const)->cnst); delete (yyvsp[0].Const); ;}
    break;

  case 177:
#line 1464 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
;}
    break;

  case 178:
#line 1469 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = 0;
  ;}
    break;

  case 179:
#line 1472 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << *(yyvsp[0].String) << '\n';
    delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 180:
#line 1477 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << "module asm " << ' ' << *(yyvsp[0].String) << '\n';
    (yyval.String) = 0;
  ;}
    break;

  case 181:
#line 1481 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << "implementation\n";
    (yyval.String) = 0;
  ;}
    break;

  case 182:
#line 1485 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = 0; ;}
    break;

  case 184:
#line 1487 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = (yyvsp[0].String); *(yyval.String) = "external"; ;}
    break;

  case 185:
#line 1490 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    Type::EnumeratedTypes.push_back((yyvsp[0].Ty));
    if (!(yyvsp[-2].String)->empty()) {
      Type::NamedTypes[*(yyvsp[-2].String)] = (yyvsp[0].Ty);
      *O << *(yyvsp[-2].String) << " = ";
    }
    *O << "type " << (yyvsp[0].Ty)->getNewTy() << '\n';
    delete (yyvsp[-2].String); delete (yyvsp[-1].String);
    (yyval.String) = 0;
  ;}
    break;

  case 186:
#line 1500 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {       // Function prototypes can be in const pool
    *O << *(yyvsp[0].String) << '\n';
    delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 187:
#line 1505 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {  // Asm blocks can be in the const pool
    *O << *(yyvsp[-2].String) << ' ' << *(yyvsp[-1].String) << ' ' << *(yyvsp[0].String) << '\n';
    delete (yyvsp[-2].String); delete (yyvsp[-1].String); delete (yyvsp[0].String); 
    (yyval.String) = 0;
  ;}
    break;

  case 188:
#line 1510 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    if (!(yyvsp[-4].String)->empty()) {
      std::string Name = getGlobalName((yyvsp[-4].String),*(yyvsp[-3].String), (yyvsp[-1].Const)->type->getPointerType(),
                                       *(yyvsp[-2].String) == "constant");
      *O << Name << " = ";
    }
    *O << *(yyvsp[-3].String) << ' ' << *(yyvsp[-2].String) << ' ' << *(yyvsp[-1].Const)->cnst << ' ' << *(yyvsp[0].String) << '\n';
    delete (yyvsp[-4].String); delete (yyvsp[-3].String); delete (yyvsp[-2].String); delete (yyvsp[0].String); 
    (yyval.String) = 0;
  ;}
    break;

  case 189:
#line 1520 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    if (!(yyvsp[-4].String)->empty()) {
      std::string Name = getGlobalName((yyvsp[-4].String),*(yyvsp[-3].String),(yyvsp[-1].Ty)->getPointerType(),
                                       *(yyvsp[-2].String) == "constant");
      *O << Name << " = ";
    }
    *O <<  *(yyvsp[-3].String) << ' ' << *(yyvsp[-2].String) << ' ' << (yyvsp[-1].Ty)->getNewTy() << ' ' << *(yyvsp[0].String) << '\n';
    delete (yyvsp[-4].String); delete (yyvsp[-3].String); delete (yyvsp[-2].String); delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 190:
#line 1530 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    if (!(yyvsp[-4].String)->empty()) {
      std::string Name = getGlobalName((yyvsp[-4].String),*(yyvsp[-3].String),(yyvsp[-1].Ty)->getPointerType(),
                                       *(yyvsp[-2].String) == "constant");
      *O << Name << " = ";
    }
    *O << *(yyvsp[-3].String) << ' ' << *(yyvsp[-2].String) << ' ' << (yyvsp[-1].Ty)->getNewTy() << ' ' << *(yyvsp[0].String) << '\n';
    delete (yyvsp[-4].String); delete (yyvsp[-3].String); delete (yyvsp[-2].String); delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 191:
#line 1540 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    if (!(yyvsp[-4].String)->empty()) {
      std::string Name = getGlobalName((yyvsp[-4].String),*(yyvsp[-3].String),(yyvsp[-1].Ty)->getPointerType(),
                                       *(yyvsp[-2].String) == "constant");
      *O << Name << " = ";
    }
    *O << *(yyvsp[-3].String) << ' ' << *(yyvsp[-2].String) << ' ' << (yyvsp[-1].Ty)->getNewTy() << ' ' << *(yyvsp[0].String) << '\n';
    delete (yyvsp[-4].String); delete (yyvsp[-3].String); delete (yyvsp[-2].String); delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 192:
#line 1550 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    *O << *(yyvsp[-1].String) << ' ' << *(yyvsp[0].String) << '\n';
    delete (yyvsp[-1].String); delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 193:
#line 1555 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << *(yyvsp[-2].String) << " = " << *(yyvsp[0].String) << '\n';
    delete (yyvsp[-2].String); delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 194:
#line 1560 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    (yyval.String) = 0;
  ;}
    break;

  case 198:
#line 1570 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += " = " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-2].String);
  ;}
    break;

  case 199:
#line 1575 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += " = " + *(yyvsp[0].String);
    if (*(yyvsp[0].String) == "64")
      SizeOfPointer = 64;
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-2].String);
  ;}
    break;

  case 200:
#line 1582 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += " = " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-2].String);
  ;}
    break;

  case 201:
#line 1587 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += " = " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-2].String);
  ;}
    break;

  case 202:
#line 1594 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyvsp[-1].String)->insert(0, "[ ");
    *(yyvsp[-1].String) += " ]";
    (yyval.String) = (yyvsp[-1].String);
  ;}
    break;

  case 203:
#line 1601 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += ", " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-2].String);
  ;}
    break;

  case 205:
#line 1607 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = new std::string();
  ;}
    break;

  case 209:
#line 1616 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 210:
#line 1618 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
  (yyval.String) = new std::string((yyvsp[-1].Ty)->getNewTy());
  if (!(yyvsp[0].String)->empty()) {
    std::string Name = getUniqueName((yyvsp[0].String), (yyvsp[-1].Ty)->resolve());
    *(yyval.String) += " " + Name;
  }
  delete (yyvsp[0].String);
;}
    break;

  case 211:
#line 1627 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += ", " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 212:
#line 1631 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = (yyvsp[0].String);
  ;}
    break;

  case 213:
#line 1635 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = (yyvsp[0].String);
  ;}
    break;

  case 214:
#line 1638 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += ", ...";
    (yyval.String) = (yyvsp[-2].String);
    delete (yyvsp[0].String);
  ;}
    break;

  case 215:
#line 1643 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = (yyvsp[0].String);
  ;}
    break;

  case 216:
#line 1646 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 217:
#line 1649 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    if (*(yyvsp[-5].String) == "%llvm.va_start" || *(yyvsp[-5].String) == "%llvm.va_end") {
      *(yyvsp[-3].String) = "i8*";
    } else if (*(yyvsp[-5].String) == "%llvm.va_copy") {
      *(yyvsp[-3].String) = "i8*, i8*";
    }
    if (!(yyvsp[-7].String)->empty()) {
      *(yyvsp[-7].String) += " ";
    }
    *(yyvsp[-7].String) += (yyvsp[-6].Ty)->getNewTy() + " " + *(yyvsp[-5].String) + "(" + *(yyvsp[-3].String) + ")";
    if (!(yyvsp[-1].String)->empty()) {
      *(yyvsp[-7].String) += " " + *(yyvsp[-1].String);
    }
    if (!(yyvsp[0].String)->empty()) {
      *(yyvsp[-7].String) += " " + *(yyvsp[0].String);
    }
    delete (yyvsp[-5].String);
    delete (yyvsp[-3].String);
    delete (yyvsp[-1].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-7].String);
  ;}
    break;

  case 218:
#line 1672 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string("{"); delete (yyvsp[0].String); ;}
    break;

  case 219:
#line 1673 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string ("{"); ;}
    break;

  case 220:
#line 1676 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << "define ";
    if (!(yyvsp[-2].String)->empty()) {
      *O << *(yyvsp[-2].String) << ' ';
    }
    *O << *(yyvsp[-1].String) << ' ' << *(yyvsp[0].String) << '\n';
    delete (yyvsp[-2].String); delete (yyvsp[-1].String); delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 221:
#line 1687 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string("}"); delete (yyvsp[0].String); ;}
    break;

  case 222:
#line 1688 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string("}"); ;}
    break;

  case 223:
#line 1690 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
  if ((yyvsp[-1].String))
    *O << *(yyvsp[-1].String);
  *O << *(yyvsp[0].String) << "\n\n";
  delete (yyvsp[-2].String); delete (yyvsp[-1].String); delete (yyvsp[0].String);
  (yyval.String) = 0;
;}
    break;

  case 224:
#line 1699 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 227:
#line 1705 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { isDeclare = true; ;}
    break;

  case 228:
#line 1705 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    if (!(yyvsp[-1].String)->empty())
      *(yyvsp[-3].String) += " " + *(yyvsp[-1].String);
    *(yyvsp[-3].String) += " " + *(yyvsp[0].String);
    delete (yyvsp[-1].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-3].String);
    isDeclare = false;
  ;}
    break;

  case 229:
#line 1719 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 239:
#line 1725 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { 
    (yyvsp[-1].String)->insert(0, "<");
    *(yyvsp[-1].String) += ">";
    (yyval.String) = (yyvsp[-1].String);
  ;}
    break;

  case 241:
#line 1731 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    if (!(yyvsp[-3].String)->empty()) {
      *(yyvsp[-4].String) += " " + *(yyvsp[-3].String);
    }
    *(yyvsp[-4].String) += " " + *(yyvsp[-2].String) + ", " + *(yyvsp[0].String);
    delete (yyvsp[-3].String); delete (yyvsp[-2].String); delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-4].String);
  ;}
    break;

  case 244:
#line 1744 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Val) = new Value;
    (yyval.Val)->val = (yyvsp[0].String);
    (yyval.Val)->constant = false;
    (yyval.Val)->type = 0;
  ;}
    break;

  case 245:
#line 1750 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.Val) = new Value;
    (yyval.Val)->val = (yyvsp[0].String);
    (yyval.Val)->constant = true;
    (yyval.Val)->type = 0;
  ;}
    break;

  case 246:
#line 1761 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyvsp[-1].Ty) = (yyvsp[-1].Ty)->resolve();
    std::string Name = getUniqueName((yyvsp[0].Val)->val, (yyvsp[-1].Ty));
    (yyval.Val) = (yyvsp[0].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = new std::string((yyvsp[-1].Ty)->getNewTy() + " " + Name);
    (yyval.Val)->type = (yyvsp[-1].Ty);
  ;}
    break;

  case 247:
#line 1770 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = 0;
  ;}
    break;

  case 248:
#line 1773 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { // Do not allow functions with 0 basic blocks   
    (yyval.String) = 0;
  ;}
    break;

  case 249:
#line 1781 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = 0;
  ;}
    break;

  case 250:
#line 1785 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << "    " << *(yyvsp[0].String) << '\n';
    delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 251:
#line 1790 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.String) = 0;
  ;}
    break;

  case 252:
#line 1793 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << *(yyvsp[0].String) << '\n';
    delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 254:
#line 1799 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = (yyvsp[0].String); *(yyval.String) = "unwind"; ;}
    break;

  case 255:
#line 1801 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {              // Return with a result...
    *O << "    " << *(yyvsp[-1].String) << ' ' << *(yyvsp[0].Val)->val << '\n';
    delete (yyvsp[-1].String); delete (yyvsp[0].Val);
    (yyval.String) = 0;
  ;}
    break;

  case 256:
#line 1806 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                                       // Return with no result...
    *O << "    " << *(yyvsp[-1].String) << ' ' << (yyvsp[0].Ty)->getNewTy() << '\n';
    delete (yyvsp[-1].String);
    (yyval.String) = 0;
  ;}
    break;

  case 257:
#line 1811 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {                         // Unconditional Branch...
    *O << "    " << *(yyvsp[-2].String) << ' ' << (yyvsp[-1].Ty)->getNewTy() << ' ' << *(yyvsp[0].Val)->val << '\n';
    delete (yyvsp[-2].String); delete (yyvsp[0].Val);
    (yyval.String) = 0;
  ;}
    break;

  case 258:
#line 1816 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {  
    std::string Name = getUniqueName((yyvsp[-6].Val)->val, (yyvsp[-7].Ty));
    *O << "    " << *(yyvsp[-8].String) << ' ' << (yyvsp[-7].Ty)->getNewTy() << ' ' << Name << ", " 
       << (yyvsp[-4].Ty)->getNewTy() << ' ' << *(yyvsp[-3].Val)->val << ", " << (yyvsp[-1].Ty)->getNewTy() << ' ' 
       << *(yyvsp[0].Val)->val << '\n';
    delete (yyvsp[-8].String); delete (yyvsp[-6].Val); delete (yyvsp[-3].Val); delete (yyvsp[0].Val);
    (yyval.String) = 0;
  ;}
    break;

  case 259:
#line 1824 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name = getUniqueName((yyvsp[-6].Val)->val, (yyvsp[-7].Ty));
    *O << "    " << *(yyvsp[-8].String) << ' ' << (yyvsp[-7].Ty)->getNewTy() << ' ' << Name << ", " 
       << (yyvsp[-4].Ty)->getNewTy() << ' ' << *(yyvsp[-3].Val)->val << " [" << *(yyvsp[-1].String) << " ]\n";
    delete (yyvsp[-8].String); 
    delete (yyvsp[-6].Val);
    delete (yyvsp[-3].Val); 
    delete (yyvsp[-1].String);
    (yyval.String) = 0;
  ;}
    break;

  case 260:
#line 1834 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name = getUniqueName((yyvsp[-5].Val)->val, (yyvsp[-6].Ty));
    *O << "    " << *(yyvsp[-7].String) << ' ' << (yyvsp[-6].Ty)->getNewTy() << ' ' << Name << ", " 
       << (yyvsp[-3].Ty)->getNewTy() << ' ' << *(yyvsp[-2].Val)->val << "[]\n";
    delete (yyvsp[-7].String); 
    delete (yyvsp[-5].Val); 
    delete (yyvsp[-2].Val);
    (yyval.String) = 0;
  ;}
    break;

  case 261:
#line 1844 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    const Type* ResTy = getFunctionReturnType((yyvsp[-10].Ty));
    *O << "    ";
    if (!(yyvsp[-13].String)->empty()) {
      std::string Name = getUniqueName((yyvsp[-13].String), ResTy);
      *O << Name << " = ";
    }
    *O << *(yyvsp[-12].String) << ' ' << *(yyvsp[-11].String) << ' ' << (yyvsp[-10].Ty)->getNewTy() << ' ' << *(yyvsp[-9].Val)->val << " (";
    for (unsigned i = 0; i < (yyvsp[-7].ValList)->size(); ++i) {
      Value* V = (*(yyvsp[-7].ValList))[i];
      *O << *V->val;
      if (i+1 < (yyvsp[-7].ValList)->size())
        *O << ", ";
      delete V;
    }
    *O << ") " << *(yyvsp[-5].String) << ' ' << (yyvsp[-4].Ty)->getNewTy() << ' ' << *(yyvsp[-3].Val)->val << ' ' 
       << *(yyvsp[-2].String) << ' ' << (yyvsp[-1].Ty)->getNewTy() << ' ' << *(yyvsp[0].Val)->val << '\n';
    delete (yyvsp[-13].String); delete (yyvsp[-12].String); delete (yyvsp[-11].String); delete (yyvsp[-9].Val); delete (yyvsp[-7].ValList); 
    delete (yyvsp[-5].String); delete (yyvsp[-3].Val); delete (yyvsp[-2].String); delete (yyvsp[0].Val); 
    (yyval.String) = 0;
  ;}
    break;

  case 262:
#line 1865 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << "    " << *(yyvsp[0].String) << '\n';
    delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 263:
#line 1870 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *O << "    " << *(yyvsp[0].String) << '\n';
    delete (yyvsp[0].String);
    (yyval.String) = 0;
  ;}
    break;

  case 264:
#line 1876 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-5].String) += " " + (yyvsp[-4].Ty)->getNewTy() + " " + *(yyvsp[-3].String) + ", " + (yyvsp[-1].Ty)->getNewTy() + " " + 
           *(yyvsp[0].Val)->val;
    delete (yyvsp[-3].String); delete (yyvsp[0].Val);
    (yyval.String) = (yyvsp[-5].String);
  ;}
    break;

  case 265:
#line 1882 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyvsp[-3].String)->insert(0, (yyvsp[-4].Ty)->getNewTy() + " " );
    *(yyvsp[-3].String) += ", " + (yyvsp[-1].Ty)->getNewTy() + " " + *(yyvsp[0].Val)->val;
    delete (yyvsp[0].Val);
    (yyval.String) = (yyvsp[-3].String);
  ;}
    break;

  case 266:
#line 1890 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    if (!(yyvsp[-1].String)->empty()) {
      // Get a unique name for this value, based on its type.
      std::string Name = getUniqueName((yyvsp[-1].String), (yyvsp[0].Val)->type);
      *(yyvsp[-1].String) = Name + " = ";
      if (deleteUselessCastFlag && *deleteUselessCastName == Name) {
        // don't actually delete it, just comment it out
        (yyvsp[-1].String)->insert(0, "; USELSS BITCAST: "); 
        delete deleteUselessCastName;
      }
    }
    *(yyvsp[-1].String) += *(yyvsp[0].Val)->val;
    delete (yyvsp[0].Val);
    deleteUselessCastFlag = false;
    (yyval.String) = (yyvsp[-1].String); 
  ;}
    break;

  case 267:
#line 1908 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {    // Used for PHI nodes
    std::string Name = getUniqueName((yyvsp[-3].Val)->val, (yyvsp[-5].Ty));
    Name.insert(0, (yyvsp[-5].Ty)->getNewTy() + "[");
    Name += "," + *(yyvsp[-1].Val)->val + "]";
    (yyval.Val) = new Value;
    (yyval.Val)->val = new std::string(Name);
    (yyval.Val)->type = (yyvsp[-5].Ty);
    delete (yyvsp[-3].Val); delete (yyvsp[-1].Val);
  ;}
    break;

  case 268:
#line 1917 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name = getUniqueName((yyvsp[-3].Val)->val, (yyvsp[-6].Val)->type);
    *(yyvsp[-6].Val)->val += ", [" + Name + "," + *(yyvsp[-1].Val)->val + "]";
    delete (yyvsp[-3].Val); 
    delete (yyvsp[-1].Val);
    (yyval.Val) = (yyvsp[-6].Val);
  ;}
    break;

  case 269:
#line 1927 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.ValList) = new ValueList();
    (yyval.ValList)->push_back((yyvsp[0].Val));
  ;}
    break;

  case 270:
#line 1931 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    (yyval.ValList) = (yyvsp[-2].ValList);
    (yyval.ValList)->push_back((yyvsp[0].Val));
  ;}
    break;

  case 271:
#line 1938 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.ValList) = (yyvsp[0].ValList); ;}
    break;

  case 272:
#line 1939 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.ValList) = new ValueList(); ;}
    break;

  case 273:
#line 1943 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-1].String) += " " + *(yyvsp[0].String);
    delete (yyvsp[0].String);
    (yyval.String) = (yyvsp[-1].String);
  ;}
    break;

  case 275:
#line 1951 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    const char* op = getDivRemOpcode(*(yyvsp[-4].String), (yyvsp[-3].Ty)); 
    std::string Name1 = getUniqueName((yyvsp[-2].Val)->val, (yyvsp[-3].Ty));
    std::string Name2 = getUniqueName((yyvsp[0].Val)->val, (yyvsp[-3].Ty));
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = new std::string(op);
    *(yyval.Val)->val += " " + (yyvsp[-3].Ty)->getNewTy() + " " + Name1 + ", " + Name2;
    (yyval.Val)->type = (yyvsp[-3].Ty);
    delete (yyvsp[-4].String); delete (yyvsp[0].Val);
  ;}
    break;

  case 276:
#line 1962 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name1 = getUniqueName((yyvsp[-2].Val)->val, (yyvsp[-3].Ty));
    std::string Name2 = getUniqueName((yyvsp[0].Val)->val, (yyvsp[-3].Ty));
    *(yyvsp[-4].String) += " " + (yyvsp[-3].Ty)->getNewTy() + " " + Name1 + ", " + Name2;
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-4].String);
    (yyval.Val)->type = (yyvsp[-3].Ty);
    delete (yyvsp[0].Val);
  ;}
    break;

  case 277:
#line 1972 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name1 = getUniqueName((yyvsp[-2].Val)->val, (yyvsp[-3].Ty));
    std::string Name2 = getUniqueName((yyvsp[0].Val)->val, (yyvsp[-3].Ty));
    *(yyvsp[-4].String) = getCompareOp(*(yyvsp[-4].String), (yyvsp[-3].Ty));
    *(yyvsp[-4].String) += " " + (yyvsp[-3].Ty)->getNewTy() + " " + Name1 + ", " + Name2;
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-4].String);
    (yyval.Val)->type = Type::get("i1",BoolTy);
    delete (yyvsp[0].Val);
  ;}
    break;

  case 278:
#line 1983 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name1 = getUniqueName((yyvsp[-2].Val)->val, (yyvsp[-3].Ty));
    std::string Name2 = getUniqueName((yyvsp[0].Val)->val, (yyvsp[-3].Ty));
    *(yyvsp[-5].String) += " " + *(yyvsp[-4].String) + " " + (yyvsp[-3].Ty)->getNewTy() + " " + Name1 + "," + Name2;
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-5].String);
    (yyval.Val)->type = Type::get("i1",BoolTy);
    delete (yyvsp[-4].String); delete (yyvsp[0].Val);
  ;}
    break;

  case 279:
#line 1993 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name1 = getUniqueName((yyvsp[-2].Val)->val, (yyvsp[-3].Ty));
    std::string Name2 = getUniqueName((yyvsp[0].Val)->val, (yyvsp[-3].Ty));
    *(yyvsp[-5].String) += " " + *(yyvsp[-4].String) + " " + (yyvsp[-3].Ty)->getNewTy() + " " + Name1 + "," + Name2;
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-5].String);
    (yyval.Val)->type = Type::get("i1",BoolTy);
    delete (yyvsp[-4].String); delete (yyvsp[0].Val);
  ;}
    break;

  case 280:
#line 2003 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    const char* shiftop = (yyvsp[-3].String)->c_str();
    if (*(yyvsp[-3].String) == "shr")
      shiftop = ((yyvsp[-2].Val)->type->isUnsigned()) ? "lshr" : "ashr";
    std::string *val = new std::string(shiftop);
    *val += " " + *(yyvsp[-2].Val)->val + ", " + *(yyvsp[0].Val)->val;
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = val;
    delete (yyvsp[-3].String); delete (yyvsp[0].Val);
  ;}
    break;

  case 281:
#line 2014 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string source = *(yyvsp[-2].Val)->val;
    const Type* SrcTy = (yyvsp[-2].Val)->type->resolve();
    const Type* DstTy = (yyvsp[0].Ty)->resolve();
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = new std::string();
    (yyval.Val)->type = DstTy;
    if (*(yyvsp[-3].String) == "cast") {
      *(yyval.Val)->val += getCastUpgrade(source, SrcTy, DstTy, false);
    } else {
      *(yyval.Val)->val += *(yyvsp[-3].String) + " " + source + " to " + DstTy->getNewTy();
    }
    // Check to see if this is a useless cast of a value to the same name
    // and the same type. Such casts will probably cause redefinition errors
    // when assembled and perform no code gen action so just remove them.
    if (*(yyvsp[-3].String) == "cast" || *(yyvsp[-3].String) == "bitcast")
      if (SrcTy->isInteger() && DstTy->isInteger() &&
          SrcTy->getBitWidth() == DstTy->getBitWidth()) {
        deleteUselessCastFlag = true; // Flag the "Inst" rule
        deleteUselessCastName = new std::string(*(yyvsp[-2].Val)->val); // save the name
        size_t pos = deleteUselessCastName->find_first_of("%\"",0);
        if (pos != std::string::npos) {
          // remove the type portion before val
          deleteUselessCastName->erase(0, pos);
        }
      }
    delete (yyvsp[-3].String); 
    delete (yyvsp[-1].String);
  ;}
    break;

  case 282:
#line 2044 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-5].String) += " " + *(yyvsp[-4].Val)->val + ", " + *(yyvsp[-2].Val)->val + ", " + *(yyvsp[0].Val)->val;
    (yyval.Val) = (yyvsp[-4].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-5].String);
    (yyval.Val)->type = (yyvsp[-2].Val)->type;
    delete (yyvsp[-2].Val);
    delete (yyvsp[0].Val);
  ;}
    break;

  case 283:
#line 2053 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-3].String) += " " + *(yyvsp[-2].Val)->val + ", " + (yyvsp[0].Ty)->getNewTy();
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-3].String);
    (yyval.Val)->type = (yyvsp[0].Ty);
  ;}
    break;

  case 284:
#line 2060 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-3].String) += " " + *(yyvsp[-2].Val)->val + ", " + *(yyvsp[0].Val)->val;
    (yyval.Val) = (yyvsp[-2].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-3].String);
    (yyval.Val)->type = (yyval.Val)->type->resolve();
    (yyval.Val)->type = (yyval.Val)->type->getElementType();
    delete (yyvsp[0].Val);
  ;}
    break;

  case 285:
#line 2069 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-5].String) += " " + *(yyvsp[-4].Val)->val + ", " + *(yyvsp[-2].Val)->val + ", " + *(yyvsp[0].Val)->val;
    (yyval.Val) = (yyvsp[-4].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-5].String);
    delete (yyvsp[-2].Val); delete (yyvsp[0].Val);
  ;}
    break;

  case 286:
#line 2076 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-5].String) += " " + *(yyvsp[-4].Val)->val + ", " + *(yyvsp[-2].Val)->val + ", " + *(yyvsp[0].Val)->val;
    (yyval.Val) = (yyvsp[-4].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-5].String);
    delete (yyvsp[-2].Val); delete (yyvsp[0].Val);
  ;}
    break;

  case 287:
#line 2083 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-1].String) += " " + *(yyvsp[0].Val)->val;
    (yyval.Val) = (yyvsp[0].Val);
    delete (yyvsp[0].Val)->val;
    (yyval.Val)->val = (yyvsp[-1].String);
  ;}
    break;

  case 288:
#line 2089 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    // map llvm.isunordered to "fcmp uno" 
    (yyval.Val) = new Value;
    if (*(yyvsp[-3].Val)->val == "%llvm.isunordered.f32" ||
        *(yyvsp[-3].Val)->val == "%llvm.isunordered.f64") {
      (yyval.Val)->val = new std::string( "fcmp uno " + *(*(yyvsp[-1].ValList))[0]->val + ", ");
      size_t pos = (*(yyvsp[-1].ValList))[1]->val->find(' ');
      assert(pos != std::string::npos && "no space?");
      *(yyval.Val)->val += (*(yyvsp[-1].ValList))[1]->val->substr(pos+1);
      (yyval.Val)->type = Type::get("i1", BoolTy);
    } else {
      static unsigned upgradeCount = 1;
      if (*(yyvsp[-3].Val)->val == "%llvm.va_start" || *(yyvsp[-3].Val)->val == "%llvm.va_end") {
        if (!(yyvsp[-1].ValList)->empty()) {
          std::string name("%va_upgrade");
          name += llvm::utostr(upgradeCount++);
          (yyvsp[-6].String)->insert(0, name + " = bitcast " + *(*(yyvsp[-1].ValList))[0]->val + " to i8*\n    ");
          *(*(yyvsp[-1].ValList))[0]->val = "i8* " + name;
          (*(yyvsp[-1].ValList))[0]->type = Type::get("i8", UByteTy)->getPointerType();
        }
      } else if (*(yyvsp[-3].Val)->val == "%llvm.va_copy") {
        std::string name0("%va_upgrade");
        name0 += llvm::utostr(upgradeCount++);
        std::string name1("%va_upgrade");
        name1 += llvm::utostr(upgradeCount++);
        (yyvsp[-6].String)->insert(0, name0 + " = bitcast " + *(*(yyvsp[-1].ValList))[0]->val + " to i8*\n    " +
                      name1 + " = bitcast " + *(*(yyvsp[-1].ValList))[1]->val + " to i8*\n    ");
        *(*(yyvsp[-1].ValList))[0]->val = "i8* " + name0;
        (*(yyvsp[-1].ValList))[0]->type = Type::get("i8", UByteTy)->getPointerType();
        *(*(yyvsp[-1].ValList))[1]->val = "i8* " + name1;
        (*(yyvsp[-1].ValList))[0]->type = Type::get("i8", UByteTy)->getPointerType();
      }
      if (!(yyvsp[-5].String)->empty())
        *(yyvsp[-6].String) += " " + *(yyvsp[-5].String);
      if (!(yyvsp[-6].String)->empty())
        *(yyvsp[-6].String) += " ";
      *(yyvsp[-6].String) += (yyvsp[-4].Ty)->getNewTy() + " " + *(yyvsp[-3].Val)->val + "(";
      for (unsigned i = 0; i < (yyvsp[-1].ValList)->size(); ++i) {
        Value* V = (*(yyvsp[-1].ValList))[i];
        *(yyvsp[-6].String) += *V->val;
        if (i+1 < (yyvsp[-1].ValList)->size())
          *(yyvsp[-6].String) += ", ";
        delete V;
      }
      *(yyvsp[-6].String) += ")";
      (yyval.Val) = new Value;
      (yyval.Val)->val = (yyvsp[-6].String);
      (yyval.Val)->type = getFunctionReturnType((yyvsp[-4].Ty));
    }
    delete (yyvsp[-5].String); delete (yyvsp[-3].Val); delete (yyvsp[-1].ValList);
  ;}
    break;

  case 290:
#line 2145 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.ValList) = (yyvsp[0].ValList); ;}
    break;

  case 291:
#line 2146 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {  (yyval.ValList) = new ValueList(); ;}
    break;

  case 293:
#line 2151 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    { (yyval.String) = new std::string(); ;}
    break;

  case 294:
#line 2154 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += " " + (yyvsp[-1].Ty)->getNewTy();
    if (!(yyvsp[0].String)->empty())
      *(yyvsp[-2].String) += " " + *(yyvsp[0].String);
    (yyval.Val) = new Value;
    (yyval.Val)->val = (yyvsp[-2].String);
    (yyval.Val)->type = (yyvsp[-1].Ty)->getPointerType();
    delete (yyvsp[0].String);
  ;}
    break;

  case 295:
#line 2163 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name = getUniqueName((yyvsp[-1].Val)->val, (yyvsp[-2].Ty));
    *(yyvsp[-5].String) += " " + (yyvsp[-4].Ty)->getNewTy() + ", " + (yyvsp[-2].Ty)->getNewTy() + " " + Name;
    if (!(yyvsp[0].String)->empty())
      *(yyvsp[-5].String) += " " + *(yyvsp[0].String);
    (yyval.Val) = new Value;
    (yyval.Val)->val = (yyvsp[-5].String);
    (yyval.Val)->type = (yyvsp[-4].Ty)->getPointerType();
    delete (yyvsp[-1].Val); delete (yyvsp[0].String);
  ;}
    break;

  case 296:
#line 2173 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-2].String) += " " + (yyvsp[-1].Ty)->getNewTy();
    if (!(yyvsp[0].String)->empty())
      *(yyvsp[-2].String) += " " + *(yyvsp[0].String);
    (yyval.Val) = new Value;
    (yyval.Val)->val = (yyvsp[-2].String);
    (yyval.Val)->type = (yyvsp[-1].Ty)->getPointerType();
    delete (yyvsp[0].String);
  ;}
    break;

  case 297:
#line 2182 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name = getUniqueName((yyvsp[-1].Val)->val, (yyvsp[-2].Ty));
    *(yyvsp[-5].String) += " " + (yyvsp[-4].Ty)->getNewTy() + ", " + (yyvsp[-2].Ty)->getNewTy() + " " + Name;
    if (!(yyvsp[0].String)->empty())
      *(yyvsp[-5].String) += " " + *(yyvsp[0].String);
    (yyval.Val) = (yyvsp[-1].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-5].String);
    (yyval.Val)->type = (yyvsp[-4].Ty)->getPointerType();
    delete (yyvsp[0].String);
  ;}
    break;

  case 298:
#line 2193 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    *(yyvsp[-1].String) += " " + *(yyvsp[0].Val)->val;
    (yyval.Val) = (yyvsp[0].Val);
    delete (yyvsp[0].Val)->val;
    (yyval.Val)->val = (yyvsp[-1].String);
    (yyval.Val)->type = Type::get("void", VoidTy); 
  ;}
    break;

  case 299:
#line 2200 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name = getUniqueName((yyvsp[0].Val)->val, (yyvsp[-1].Ty));
    if (!(yyvsp[-3].String)->empty())
      *(yyvsp[-3].String) += " ";
    *(yyvsp[-3].String) += *(yyvsp[-2].String) + " " + (yyvsp[-1].Ty)->getNewTy() + " " + Name;
    (yyval.Val) = (yyvsp[0].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-3].String);
    (yyval.Val)->type = (yyvsp[-1].Ty)->getElementType();
    delete (yyvsp[-2].String);
  ;}
    break;

  case 300:
#line 2211 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name = getUniqueName((yyvsp[0].Val)->val, (yyvsp[-1].Ty));
    if (!(yyvsp[-5].String)->empty())
      *(yyvsp[-5].String) += " ";
    *(yyvsp[-5].String) += *(yyvsp[-4].String) + " " + *(yyvsp[-3].Val)->val + ", " + (yyvsp[-1].Ty)->getNewTy() + " " + Name;
    (yyval.Val) = (yyvsp[-3].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-5].String);
    (yyval.Val)->type = Type::get("void", VoidTy);
    delete (yyvsp[-4].String); delete (yyvsp[0].Val);
  ;}
    break;

  case 301:
#line 2222 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"
    {
    std::string Name = getUniqueName((yyvsp[-1].Val)->val, (yyvsp[-2].Ty));
    // Upgrade the indices
    for (unsigned i = 0; i < (yyvsp[0].ValList)->size(); ++i) {
      Value* V = (*(yyvsp[0].ValList))[i];
      if (V->type->isUnsigned() && !V->isConstant() && 
          V->type->getBitWidth() < 64) {
        *O << "    %gep_upgrade" << UniqueNameCounter << " = zext " << *V->val 
           << " to i64\n";
        *V->val = "i64 %gep_upgrade" + llvm::utostr(UniqueNameCounter++);
        V->type = Type::get("i64",ULongTy);
      }
    }
    *(yyvsp[-3].String) += " " + (yyvsp[-2].Ty)->getNewTy() + " " + Name;
    for (unsigned i = 0; i < (yyvsp[0].ValList)->size(); ++i) {
      Value* V = (*(yyvsp[0].ValList))[i];
      *(yyvsp[-3].String) += ", " + *V->val;
    }
    (yyval.Val) = (yyvsp[-1].Val);
    delete (yyval.Val)->val;
    (yyval.Val)->val = (yyvsp[-3].String);
    (yyval.Val)->type = getGEPIndexedType((yyvsp[-2].Ty),(yyvsp[0].ValList)); 
    for (unsigned i = 0; i < (yyvsp[0].ValList)->size(); ++i)
      delete (*(yyvsp[0].ValList))[i];
    delete (yyvsp[0].ValList);
  ;}
    break;


      default: break;
    }

/* Line 1126 of yacc.c.  */
#line 4754 "UpgradeParser.tab.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  int yytype = YYTRANSLATE (yychar);
	  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
	  YYSIZE_T yysize = yysize0;
	  YYSIZE_T yysize1;
	  int yysize_overflow = 0;
	  char *yymsg = 0;
#	  define YYERROR_VERBOSE_ARGS_MAXIMUM 5
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;

#if 0
	  /* This is so xgettext sees the translatable formats that are
	     constructed on the fly.  */
	  YY_("syntax error, unexpected %s");
	  YY_("syntax error, unexpected %s, expecting %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
#endif
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytname[yytype];
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytname[yyx];
		yysize1 = yysize + yytnamerr (0, yytname[yyx]);
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + yystrlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow && yysize <= YYSTACK_ALLOC_MAXIMUM)
	    yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg)
	    {
	      /* Avoid sprintf, as that infringes on the user's name space.
		 Don't have undefined behavior even if the translation
		 produced a string with the wrong number of "%s"s.  */
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      goto yyexhaustedlab;
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
        }
      else
	{
	  yydestruct ("Error: discarding", yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (0)
     goto yyerrorlab;

yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping", yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token. */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK;
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 2249 "/proj/llvm/llvm-2/tools/llvm-upgrade/UpgradeParser.y"


int yyerror(const char *ErrorMsg) {
  std::string where 
    = std::string((CurFilename == "-") ? std::string("<stdin>") : CurFilename)
                  + ":" + llvm::utostr((unsigned) Upgradelineno) + ": ";
  std::string errMsg = where + "error: " + std::string(ErrorMsg) + 
                       " while reading ";
  if (yychar == YYEMPTY || yychar == 0)
    errMsg += "end-of-file.";
  else
    errMsg += "token: '" + std::string(Upgradetext, Upgradeleng) + "'";
  std::cerr << "llvm-upgrade: " << errMsg << '\n';
  *O << "llvm-upgrade parse failed.\n";
  exit(1);
}

void warning(const std::string& ErrorMsg) {
  std::string where 
    = std::string((CurFilename == "-") ? std::string("<stdin>") : CurFilename)
                  + ":" + llvm::utostr((unsigned) Upgradelineno) + ": ";
  std::string errMsg = where + "warning: " + std::string(ErrorMsg) + 
                       " while reading ";
  if (yychar == YYEMPTY || yychar == 0)
    errMsg += "end-of-file.";
  else
    errMsg += "token: '" + std::string(Upgradetext, Upgradeleng) + "'";
  std::cerr << "llvm-upgrade: " << errMsg << '\n';
}

