#line 2 "Lexer.cpp"

#line 4 "Lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE llvmAsmrestart(llvmAsmin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (16384*64)
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int llvmAsmleng;

extern FILE *llvmAsmin, *llvmAsmout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE llvmAsmlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-llvmAsmlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < llvmAsmleng; ++yyl )\
                    if ( llvmAsmtext[yyl] == '\n' )\
                        --llvmAsmlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up llvmAsmtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up llvmAsmtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via llvmAsmrestart()), so that the user can continue scanning by
	 * just pointing llvmAsmin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when llvmAsmtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int llvmAsmleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow llvmAsmwrap()'s to do buffer switches
 * instead of setting up a fresh llvmAsmin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void llvmAsmrestart (FILE *input_file  );
void llvmAsm_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE llvmAsm_create_buffer (FILE *file,int size  );
void llvmAsm_delete_buffer (YY_BUFFER_STATE b  );
void llvmAsm_flush_buffer (YY_BUFFER_STATE b  );
void llvmAsmpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void llvmAsmpop_buffer_state (void );

static void llvmAsmensure_buffer_stack (void );
static void llvmAsm_load_buffer_state (void );
static void llvmAsm_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER llvmAsm_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE llvmAsm_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE llvmAsm_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE llvmAsm_scan_bytes (yyconst char *bytes,int len  );

void *llvmAsmalloc (yy_size_t  );
void *llvmAsmrealloc (void *,yy_size_t  );
void llvmAsmfree (void *  );

#define yy_new_buffer llvmAsm_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        llvmAsmensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            llvmAsm_create_buffer(llvmAsmin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        llvmAsmensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            llvmAsm_create_buffer(llvmAsmin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define llvmAsmwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *llvmAsmin = (FILE *) 0, *llvmAsmout = (FILE *) 0;

typedef int yy_state_type;

extern int llvmAsmlineno;

int llvmAsmlineno = 1;

extern char *llvmAsmtext;
#define yytext_ptr llvmAsmtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up llvmAsmtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	llvmAsmleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 111
#define YY_END_OF_BUFFER 112
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[479] =
    {   0,
        0,    0,  112,  110,  109,  109,  110,  110,  110,  110,
      110,  110,  102,  102,    1,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,    0,  101,    0,   99,
       98,   98,  105,    0,  103,    0,  107,  102,    0,    1,
        0,    0,    0,    0,    0,    0,    0,    0,   84,    0,
       40,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   66,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   23,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  101,   98,   98,  107,   20,  107,    0,  108,   60,
        0,    0,   65,    0,   38,    0,   33,    0,    0,    0,
       41,    0,    0,    0,    0,    0,   63,    0,    0,    3,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       51,    0,    0,    0,    0,    0,    0,    0,    0,   62,
       25,    0,    0,   74,    0,   64,   83,    0,    0,    0,
        0,    0,   78,    0,   79,    0,    0,    0,   61,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   67,

        0,  100,  107,    0,    0,    0,  107,    0,    0,    0,
        0,   46,   75,   76,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
       53,    0,    0,   22,    0,    0,  104,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   26,
        0,    0,    4,   58,    0,   52,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   45,    0,   11,    0,  107,
       35,    0,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,    0,   55,    0,

        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,   47,    0,    0,   69,   73,   71,   72,   70,
       68,   49,    0,    0,   93,    0,    0,    0,   48,   54,
       21,    0,    0,    0,    0,    0,   81,    0,    0,    0,
       90,    0,   44,    0,    0,    0,    0,    0,    0,   56,
       30,   24,    0,    0,   43,    0,    7,    0,    0,    0,
       86,    0,   32,   89,   37,   59,    0,    0,   77,    0,
        0,   85,   27,   28,    0,    0,   87,   50,   82,   80,
        0,    0,    0,    0,   42,    6,   29,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   36,    0,

        0,    0,    0,    0,    0,    0,    8,    0,    0,    0,
       17,    0,    0,    0,    0,    9,   10,    0,    0,    0,
        0,    0,   34,    0,   12,   14,   13,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   39,    0,    0,    0,   15,
        0,    0,    0,    0,   31,    0,    0,   88,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   94,    0,   96,
       97,   16,    0,   95,   18,    0,   19,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   13,    1,
        1,    1,    1,    1,   14,   14,   14,   14,   15,   14,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   16,    1,   17,   18,   19,   20,

       21,   22,   23,   24,   25,    5,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3
    } ;

static yyconst flex_int16_t yy_base[484] =
    {   0,
        0,    0,  998,  999,  999,  999,  993,  984,   34,   36,
       38,   42,   46,   50,    0,   52,   57,   54,   68,   62,
       80,   82,   87,   93,   94,   40,   88,   84,   56,  121,
      108,  150,  105,  115,  114,  116,  991,  999,  982,  999,
        0,  139,  141,  144,  154,  120,  159,  176,  179,    0,
       55,  180,   92,  164,  155,  135,  149,  190,  981,  191,
      192,  194,  196,  197,  198,  200,  201,  161,  203,  205,
      212,  122,  214,  218,  202,  219,  222,  229,  233,  224,
      232,  234,  231,  243,  248,  980,  247,  251,  245,  235,
      255,  256,  257,  259,  266,  270,  269,  273,  979,  274,

      277,  265,  280,  285,  291,   41,  301,  295,  302,  288,
      290,  978,    0,  315,  317,  977,  324,  336,    0,  976,
      289,  319,  975,  321,  974,  325,  973,  328,  329,  339,
      972,  340,  341,  342,  345,  346,  971,  355,  347,  352,
      349,  350,  354,  356,  367,  357,  369,  374,  370,  373,
      375,  377,  381,  383,  386,  388,  387,  389,  391,  970,
      969,  392,   31,  968,  393,  967,  966,  418,  399,  406,
      394,  430,  965,  411,  964,  402,  405,  413,  963,  408,
      418,  435,  400,  440,  442,  436,  437,  438,  443,  444,
      448,  450,  453,  462,  454,  456,  458,  464,  468,  962,

      470,  999,  474,  491,  480,  493,  496,  480,  474,  484,
      485,  961,  960,  959,  498,  476,  500,  503,  504,  506,
      509,  507,  510,  511,  513,  514,  512,  520,  516,  958,
      526,  524,  528,  531,  532,  535,  536,  538,  540,  957,
      956,  542,  543,  955,  544,  546,    0,  545,  548,  550,
      547,  562,  563,  564,  559,  565,  570,  574,  577,  954,
      578,  566,  953,  952,  580,  951,  588,  590,  591,  592,
      576,  594,  595,  596,  598,  950,  601,  949,  605,  604,
      948,  606,  609,  947,  612,  608,  614,  610,  620,  622,
      623,  627,  628,  629,  630,  632,  946,  633,  945,  634,

      635,  637,  638,  646,  648,  944,  649,  651,  655,  656,
      658,  659,  943,  654,  664,  942,  941,  940,  939,  938,
      937,  936,  669,  670,  935,  671,  673,  676,  934,  933,
      932,  674,  675,  678,  677,  679,  931,  681,  688,  689,
      930,  692,  929,  691,  695,  694,  693,  698,  699,  928,
      927,  926,  707,  709,  925,  710,  924,  713,  714,  719,
      923,  718,  922,  921,  920,  919,  720,  721,  918,  727,
      729,  917,  916,  915,  730,  728,  914,  913,  912,  911,
      731,  734,  733,  735,  910,  907,  898,  742,  744,  745,
      737,  748,  751,  749,  753,  754,  755,  756,  896,  759,

      761,  762,  772,  773,  774,  775,  895,  776,  779,  780,
      894,  781,  783,  785,  792,  893,  891,  790,  795,  787,
      791,  805,  890,  807,  888,  887,  884,  788,  809,  798,
      810,  812,  813,  816,  814,  817,  819,  822,  824,  825,
      826,  829,  831,  835,  832,  882,  833,  839,  836,  881,
      847,  843,  846,  850,  880,  853,  849,  876,  857,  860,
      854,  861,  863,  864,  865,  868,  869,  644,  872,  518,
      401,  292,  874,  207,  170,  878,  166,  999,  911,  913,
      137,  917,   99
    } ;

static yyconst flex_int16_t yy_def[484] =
    {   0,
      478,    1,  478,  478,  478,  478,  479,  480,  481,  478,
      480,  480,  480,  480,  482,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  479,  478,  480,  478,
      483,  483,  478,  478,  480,  480,  480,  480,  480,  482,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  478,  483,  483,  478,  480,  480,  480,   49,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,   49,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  478,  478,  478,  478,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  168,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  478,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,    0,  478,  478,
      478,  478,  478
    } ;

static yyconst flex_int16_t yy_nxt[1041] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,    4,   15,    8,    8,    8,   16,   17,   18,   19,
       20,   21,   22,    8,   23,    8,   24,   25,   26,   27,
       28,    8,   29,   30,   31,   32,   33,   34,   35,    8,
       36,   42,   40,   43,   43,   44,   44,   45,   45,   40,
       46,   40,   40,   40,   47,   48,   48,   40,   47,   48,
       48,   40,  245,   40,  193,   40,   40,   40,   40,   83,
       60,   51,   61,   40,  120,   84,   89,   56,   52,   40,
       53,   57,   54,   62,   49,   55,   58,   63,   64,   59,
       68,   40,   65,   40,   66,   40,   70,   67,   40,   40,

       69,  113,   73,   40,   40,   40,   71,   87,   74,   77,
       80,  123,   72,   88,   75,   76,   40,   78,   85,   40,
       86,  107,   79,   81,   98,   40,   40,   40,  116,   82,
       90,   40,   40,   40,  108,  109,  111,   99,   91,   41,
      100,   92,  146,  110,   93,   94,   40,  101,  114,  114,
       43,   43,  115,   44,   44,   95,   96,  126,   97,   90,
       40,   40,   47,   45,   45,   40,   40,  102,  117,  117,
       40,  127,   40,  118,  103,   40,  104,   40,  105,  118,
      140,   40,  125,  106,   47,   48,   48,   40,  119,  119,
       40,   40,  119,  119,  124,  119,  119,  119,  119,  119,

      119,   40,   40,   40,  121,   40,  122,   40,   40,   40,
      131,   40,   40,   40,   40,  135,   40,  129,   40,  128,
      132,  141,  133,   40,  130,   40,  138,  136,  134,   40,
       40,  143,  149,   40,  137,   40,  139,  142,  144,  153,
       40,  145,   40,   40,   40,   40,   40,  148,  147,  156,
      158,  159,  150,  151,   40,  152,   40,  154,   40,   40,
      160,  157,   40,  155,  163,  161,   40,   40,   40,  162,
       40,  164,  166,  168,  170,  165,   40,   40,  177,  167,
       40,   40,  171,  173,   40,   40,  174,  179,   40,  175,
      172,   40,  176,  180,  169,  178,   40,  181,  183,   40,

       40,   40,   40,   40,  186,  182,   40,  185,  187,  184,
      189,  208,   40,   40,  188,  190,  194,  195,  199,  197,
      200,  198,  201,  191,  114,  114,  203,  203,  192,  196,
       40,  204,   40,  117,  117,   40,   40,  204,  118,   40,
       40,  210,  205,  206,  118,  207,  207,   40,  209,  211,
       40,   40,   40,   40,  212,  213,   40,   40,   40,  215,
       40,   40,  217,   40,  222,   40,   40,   40,   40,  224,
      225,  218,  219,  214,  216,  220,  223,  230,   40,  221,
       40,   40,  226,  229,   40,   40,   40,  227,   40,  231,
      228,  232,   40,  234,   40,  235,  233,   40,   40,   40,

       40,  237,   40,   40,   40,   40,  236,  240,  238,  241,
       40,   40,   40,   40,  250,  242,   40,   40,  244,   40,
      239,  246,   40,  256,   40,  257,  243,  247,  247,   40,
      262,  247,  247,  248,  247,  247,  247,  247,  247,  247,
      249,   40,  259,  255,  260,  258,   40,   40,   40,   40,
      251,   40,  252,   40,   40,   40,  253,  261,  254,   40,
      263,   40,  264,  268,   40,   40,  267,   40,  270,   40,
      265,  266,  269,   40,  271,   40,  275,  276,  273,   40,
      277,   40,  272,  203,  203,   40,  274,   40,  204,  280,
      280,   40,  282,  278,  204,   40,   40,  205,  205,  279,

      280,  280,  207,  207,   40,  207,  207,   40,  281,   40,
      286,   40,  283,  284,   40,   40,  285,   40,   40,  288,
       40,   40,   40,   40,   40,   40,  293,   40,  289,   40,
      296,   40,  297,  292,  287,   40,  291,   40,  298,   40,
      301,  294,   40,   40,  290,  295,   40,   40,  302,   40,
      299,   40,  300,   40,   40,   40,   40,   40,   40,   40,
      305,   40,  306,  303,  304,  313,  308,  307,  315,  310,
       40,  309,  314,   40,   40,   40,   40,   40,  316,  311,
      312,   40,  317,  319,  321,   40,  323,   40,   40,   40,
      324,   40,  328,  322,  325,  326,  318,  320,  327,   40,

      329,   40,   40,   40,  334,   40,   40,   40,  333,   40,
      330,  331,   40,  280,  280,  332,   40,   40,  337,   40,
       40,   40,  341,   40,  344,   40,  335,  336,  342,  340,
      343,   40,  345,   40,   40,  339,  338,  347,   40,   40,
       40,   40,  346,   40,   40,   40,   40,  350,   40,   40,
      354,  355,  348,  349,  356,   40,  351,   40,  353,   40,
       40,  357,   40,  352,  358,   40,   40,   40,  361,   40,
       40,  363,  359,  364,  360,   40,  365,  362,  366,  367,
       40,   40,   40,  368,   40,   40,   40,   40,   40,   40,
       40,  371,   40,  376,  372,  370,  374,  377,  369,   40,

       40,  379,   40,   40,   40,   40,   40,  373,  375,   40,
       40,  378,  381,  385,  386,  380,  383,  382,   40,  384,
       40,   40,  390,  391,   40,   40,  387,  388,  389,   40,
       40,   40,   40,  394,  395,  396,  397,  393,   40,   40,
       40,   40,   40,  392,   40,   40,   40,  400,   40,  399,
      401,  403,  398,   40,  402,   40,   40,  404,  405,   40,
       40,  406,   40,  411,   40,   40,   40,   40,  412,  407,
       40,  413,   40,   40,  408,  417,  409,  414,  421,  415,
      416,  420,  410,   40,   40,   40,   40,   40,  422,  418,
       40,   40,   40,  423,   40,  419,   40,  425,   40,   40,

      428,   40,   40,   40,  439,  435,   40,  429,  424,   40,
      426,  430,  432,  427,  433,  434,   40,  436,   40,  431,
       40,   40,  437,   40,   40,   40,  442,   40,   40,  440,
       40,  438,  441,   40,  445,   40,   40,   40,  449,  443,
       40,  447,   40,   40,   40,  448,   40,   40,  446,  450,
       40,  454,  451,  444,   40,  455,  452,   40,   40,  458,
       40,   40,  459,  453,   40,   40,  456,  460,   40,  465,
      462,   40,   40,  457,   40,   40,   40,  461,  463,   40,
       40,  466,  464,   40,  472,   40,  468,   40,  467,   40,
      469,   40,   40,   40,  476,   40,  471,  470,   40,   40,

      475,   40,   40,  474,   40,   40,   40,   40,  473,   40,
      477,   37,   37,   37,   37,   39,   39,   50,   40,   50,
       50,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,  202,
       40,   40,   40,   40,  112,   40,   38,  478,    3,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478
    } ;

static yyconst flex_int16_t yy_chk[1041] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    9,  163,    9,    9,   10,   10,   11,   11,   11,
       12,   26,  106,   12,   13,   13,   13,   13,   14,   14,
       14,   14,  163,   16,  106,   18,   51,   29,   17,   26,
       18,   16,   18,   20,   51,   26,   29,   17,   16,   19,
       16,   17,   16,   18,   13,   16,   17,   18,   19,   17,
       20,   21,   19,   22,   19,   28,   21,   19,   23,   27,

       20,  483,   22,   53,   24,   25,   21,   28,   22,   24,
       25,   53,   21,   28,   23,   23,   33,   24,   27,   31,
       27,   33,   24,   25,   31,   35,   34,   36,   46,   25,
       30,   46,   30,   72,   33,   34,   36,   31,   30,  481,
       31,   30,   72,   35,   30,   30,   56,   31,   42,   42,
       43,   43,   44,   44,   44,   30,   30,   56,   30,   32,
       57,   32,   45,   45,   45,   45,   55,   32,   47,   47,
       47,   57,   68,   47,   32,   54,   32,  477,   32,   47,
       68,  475,   55,   32,   48,   48,   48,   48,   49,   49,
       49,   52,   49,   49,   54,   49,   49,   49,   49,   49,

       49,   58,   60,   61,   52,   62,   52,   63,   64,   65,
       61,   66,   67,   75,   69,   64,   70,   60,  474,   58,
       62,   69,   62,   71,   60,   73,   66,   64,   63,   74,
       76,   70,   75,   77,   65,   80,   67,   69,   70,   77,
       78,   71,   83,   81,   79,   82,   90,   74,   73,   79,
       80,   81,   76,   76,   84,   76,   89,   78,   87,   85,
       82,   79,   88,   78,   85,   83,   91,   92,   93,   84,
       94,   87,   89,   90,   92,   88,  102,   95,   94,   89,
       97,   96,   92,   93,   98,  100,   93,   96,  101,   93,
       92,  103,   93,   97,   91,   95,  104,   98,  100,  110,

      121,  111,  105,  472,  102,   98,  108,  101,  103,  100,
      105,  121,  107,  109,  104,  105,  107,  107,  109,  108,
      110,  108,  111,  105,  114,  114,  115,  115,  105,  107,
      122,  115,  124,  117,  117,  117,  126,  115,  117,  128,
      129,  124,  118,  118,  117,  118,  118,  118,  122,  126,
      130,  132,  133,  134,  128,  129,  135,  136,  139,  132,
      141,  142,  134,  140,  139,  143,  138,  144,  146,  141,
      142,  135,  136,  130,  133,  138,  140,  146,  145,  138,
      147,  149,  142,  145,  150,  148,  151,  143,  152,  147,
      144,  148,  153,  150,  154,  151,  149,  155,  157,  156,

      158,  153,  159,  162,  165,  171,  152,  156,  154,  157,
      169,  183,  471,  176,  171,  158,  177,  170,  162,  180,
      155,  165,  174,  176,  178,  177,  159,  168,  168,  181,
      183,  168,  168,  169,  168,  168,  168,  168,  168,  168,
      170,  172,  180,  174,  181,  178,  182,  186,  187,  188,
      172,  184,  172,  185,  189,  190,  172,  182,  172,  191,
      184,  192,  185,  189,  193,  195,  188,  196,  191,  197,
      186,  187,  190,  194,  192,  198,  196,  197,  194,  199,
      198,  201,  193,  203,  203,  209,  195,  216,  203,  205,
      205,  208,  209,  199,  203,  210,  211,  204,  204,  201,

      204,  204,  206,  206,  206,  207,  207,  207,  208,  215,
      216,  217,  210,  211,  218,  219,  215,  220,  222,  218,
      221,  223,  224,  227,  225,  226,  223,  229,  219,  470,
      226,  228,  227,  222,  217,  232,  221,  231,  228,  233,
      232,  224,  234,  235,  220,  225,  236,  237,  233,  238,
      229,  239,  231,  242,  243,  245,  248,  246,  251,  249,
      236,  250,  237,  234,  235,  248,  239,  238,  250,  243,
      255,  242,  249,  252,  253,  254,  256,  262,  251,  245,
      246,  257,  252,  253,  254,  258,  256,  271,  259,  261,
      257,  265,  262,  255,  258,  259,  252,  253,  261,  267,

      265,  268,  269,  270,  271,  272,  273,  274,  270,  275,
      267,  268,  277,  280,  280,  269,  279,  282,  274,  286,
      283,  288,  282,  285,  286,  287,  272,  273,  283,  279,
      285,  289,  287,  290,  291,  277,  275,  289,  292,  293,
      294,  295,  288,  296,  298,  300,  301,  292,  302,  303,
      296,  298,  290,  291,  300,  468,  293,  304,  295,  305,
      307,  301,  308,  294,  302,  314,  309,  310,  305,  311,
      312,  308,  303,  309,  304,  315,  310,  307,  311,  312,
      323,  324,  326,  314,  327,  332,  333,  328,  335,  334,
      336,  324,  338,  333,  326,  323,  328,  334,  315,  339,

      340,  336,  344,  342,  347,  346,  345,  327,  332,  348,
      349,  335,  339,  345,  346,  338,  342,  340,  353,  344,
      354,  356,  353,  353,  358,  359,  347,  348,  349,  362,
      360,  367,  368,  358,  359,  360,  362,  356,  370,  376,
      371,  375,  381,  354,  383,  382,  384,  370,  391,  368,
      371,  376,  367,  388,  375,  389,  390,  381,  382,  392,
      394,  383,  393,  391,  395,  396,  397,  398,  392,  384,
      400,  393,  401,  402,  388,  397,  389,  394,  402,  395,
      396,  401,  390,  403,  404,  405,  406,  408,  403,  398,
      409,  410,  412,  404,  413,  400,  414,  406,  420,  428,

      410,  418,  421,  415,  428,  420,  419,  412,  405,  430,
      408,  413,  415,  409,  418,  419,  422,  421,  424,  414,
      429,  431,  422,  432,  433,  435,  431,  434,  436,  429,
      437,  424,  430,  438,  434,  439,  440,  441,  438,  432,
      442,  436,  443,  445,  447,  437,  444,  449,  435,  439,
      448,  443,  440,  433,  452,  444,  441,  453,  451,  448,
      457,  454,  449,  442,  456,  461,  445,  451,  459,  457,
      453,  460,  462,  447,  463,  464,  465,  452,  454,  466,
      467,  459,  456,  469,  465,  473,  461,  458,  460,  476,
      462,  455,  450,  446,  473,  427,  464,  463,  426,  425,

      469,  423,  417,  467,  416,  411,  407,  399,  466,  387,
      476,  479,  479,  479,  479,  480,  480,  482,  386,  482,
      482,  385,  380,  379,  378,  377,  374,  373,  372,  369,
      366,  365,  364,  363,  361,  357,  355,  352,  351,  350,
      343,  341,  337,  331,  330,  329,  325,  322,  321,  320,
      319,  318,  317,  316,  313,  306,  299,  297,  284,  281,
      278,  276,  266,  264,  263,  260,  244,  241,  240,  230,
      214,  213,  212,  200,  179,  175,  173,  167,  166,  164,
      161,  160,  137,  131,  127,  125,  123,  120,  116,  112,
       99,   86,   59,   39,   37,    8,    7,    3,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[112] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int llvmAsm_flex_debug;
int llvmAsm_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *llvmAsmtext;
#line 1 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
/*===-- Lexer.l - Scanner for llvm assembly files --------------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by the LLVM research group and is distributed under
// the University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM assembly languages files.
//
//===----------------------------------------------------------------------===*/
#line 28 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
#include "ParserInternals.h"
#include "llvm/Module.h"
#include <list>
#include "llvmAsmParser.h"
#include <cctype>
#include <cstdlib>

void set_scan_file(FILE * F){
  llvmAsm_switch_to_buffer(llvmAsm_create_buffer(F,YY_BUF_SIZE ) );
}
void set_scan_string (const char * str) {
  llvmAsm_scan_string (str);
}

#define RET_TOK(type, Enum, sym) \
  llvmAsmlval.type = Instruction::Enum; return sym

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size


// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  // Behave nicely in the face of C TBAA rules... see:
  // http://www.nullstone.com/htmls/category/aliastyp.htm
  union {
    uint64_t UI;
    double FP;
  } UIntToFP;
  UIntToFP.UI = HexIntToVal(Buffer);

  assert(sizeof(double) == sizeof(uint64_t) &&
         "Data sizes incompatible on this target!");
  return UIntToFP.FP;   // Cast Hex constant to double
}


// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.  If AllowNull is set to false, a \00 value will cause
// an exception to be thrown.
//
// If AllowNull is set to true, the return value of the function points to the
// last character of the string in memory.
//
char *UnEscapeLexed(char *Buffer, bool AllowNull) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\' && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
      char Tmp = BIn[3]; BIn[3] = 0;     // Terminate string
      *BOut = (char)strtol(BIn+1, 0, 16);  // Convert to number
      if (!AllowNull && !*BOut)
        GenerateError("String literal cannot accept \\00 escape!");

      BIn[3] = Tmp;                  // Restore character
      BIn += 3;                      // Skip over handled chars
      ++BOut;
    } else {
      *BOut++ = *BIn++;
    }
  }

  return BOut;
}

} // End llvm namespace

using namespace llvm;

#define YY_NEVER_INTERACTIVE 1
/* Comments start with a ; and go till end of line */
/* Variable(Value) identifiers start with a % sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* [PN]Integer: match positive and negative literal integer values that
 * are preceeded by a '%' character.  These represent unnamed variable slots.
 */
/* E[PN]Integer: match positive and negative literal integer values */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 1003 "Lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int llvmAsmwrap (void );
#else
extern int llvmAsmwrap (void );
#endif
#endif

    static inline void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( llvmAsmtext, llvmAsmleng, 1, llvmAsmout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( llvmAsmin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( llvmAsmin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, llvmAsmin))==0 && ferror(llvmAsmin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(llvmAsmin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int llvmAsmlex (void);

#define YY_DECL int llvmAsmlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after llvmAsmtext and llvmAsmleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 179 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"


#line 1159 "Lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! llvmAsmin )
			llvmAsmin = stdin;

		if ( ! llvmAsmout )
			llvmAsmout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			llvmAsmensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				llvmAsm_create_buffer(llvmAsmin,YY_BUF_SIZE );
		}

		llvmAsm_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of llvmAsmtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 479 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 478 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < llvmAsmleng; ++yyl )
				if ( llvmAsmtext[yyl] == '\n' )
					   
    llvmAsmlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 181 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 183 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 184 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 185 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 186 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 187 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 188 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return GLOBAL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 189 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return CONSTANT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 190 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return INTERNAL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 191 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return LINKONCE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 192 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return WEAK; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 193 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return APPENDING; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 194 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 195 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 196 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 197 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return EXTERNAL; }    /* Deprecated, turn into external */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 198 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 199 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return IMPLEMENTATION; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 200 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 201 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 202 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return UNDEF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 203 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 204 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 205 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unwind, UNWIND); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 206 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return NOT; }  /* Deprecated, turned into XOR */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 207 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TAIL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 208 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TARGET; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 209 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TRIPLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 210 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 211 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ENDIAN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return POINTERSIZE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 213 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return LITTLE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 214 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return BIG; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 215 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return VOLATILE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 216 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ALIGN;  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 217 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return SECTION; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 218 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return MODULE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 219 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 220 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 222 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return CC_TOK; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 223 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 224 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return CSRETCC_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 225 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 226 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 228 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::VoidTy  ; return VOID;   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 229 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::BoolTy  ; return BOOL;   }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 230 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::SByteTy ; return SBYTE;  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 231 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::UByteTy ; return UBYTE;  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 232 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::ShortTy ; return SHORT;  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 233 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::UShortTy; return USHORT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 234 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::IntTy   ; return INT;    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 235 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::UIntTy  ; return UINT;   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 236 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::LongTy  ; return LONG;   }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 237 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::ULongTy ; return ULONG;  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 238 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::FloatTy ; return FLOAT;  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 239 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::DoubleTy; return DOUBLE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 240 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.PrimType = Type::LabelTy ; return LABEL;  }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 241 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TYPE;   }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 242 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return OPAQUE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 244 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Add, ADD); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 245 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Sub, SUB); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 246 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Mul, MUL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 247 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Div, DIV); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 248 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Rem, REM); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 249 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, And, AND); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 250 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Or , OR ); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 251 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Xor, XOR); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 252 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SetNE, SETNE); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 253 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SetEQ, SETEQ); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 254 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SetLT, SETLT); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 255 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SetGT, SETGT); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 256 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SetLE, SETLE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 257 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SetGE, SETGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 259 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, PHI, PHI_TOK); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 260 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Call, CALL); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 261 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Cast, CAST); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 262 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Select, SELECT); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 263 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Shl, SHL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 264 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Shr, SHR); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 265 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return VANEXT_old; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 266 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return VAARG_old; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 267 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 268 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Ret, RET); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 269 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Br, BR); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 270 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Switch, SWITCH); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 271 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Invoke, INVOKE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 272 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unwind, UNWIND); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 273 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unreachable, UNREACHABLE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 275 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Malloc, MALLOC); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 276 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Alloca, ALLOCA); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 277 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Free, FREE); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 278 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Load, LOAD); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 279 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Store, STORE); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 280 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, GetElementPtr, GETELEMENTPTR); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 282 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ExtractElement, EXTRACTELEMENT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 283 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, InsertElement, INSERTELEMENT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 284 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ShuffleVector, SHUFFLEVECTOR); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 287 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  UnEscapeLexed(llvmAsmtext+1);
                  llvmAsmlval.StrVal = strdup(llvmAsmtext+1);             // Skip %
                  return VAR_ID;
                }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 292 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  llvmAsmtext[strlen(llvmAsmtext)-1] = 0;  // nuke colon
                  UnEscapeLexed(llvmAsmtext);
                  llvmAsmlval.StrVal = strdup(llvmAsmtext);
                  return LABELSTR;
                }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 298 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  llvmAsmtext[strlen(llvmAsmtext)-2] = 0;  // nuke colon, end quote
                  UnEscapeLexed(llvmAsmtext+1);
                  llvmAsmlval.StrVal = strdup(llvmAsmtext+1);
                  return LABELSTR;
                }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 305 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ // Note that we cannot unescape a string constant here!  The
                   // string constant might contain a \00 which would not be
                   // understood by the string stuff.  It is valid to make a
                   // [sbyte] c"Hello World\00" constant, for example.
                   //
                   llvmAsmtext[strlen(llvmAsmtext)-1] = 0;           // nuke end quote
                   llvmAsmlval.StrVal = strdup(llvmAsmtext+1);  // Nuke start quote
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 316 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.UInt64Val = atoull(llvmAsmtext); return EUINT64VAL; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 317 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(llvmAsmtext+1);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT64_MAX+1)
                    GenerateError("Constant too large for signed 64 bits!");
                  llvmAsmlval.SInt64Val = -Val;
                  return ESINT64VAL;
                }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 325 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                   llvmAsmlval.UInt64Val = HexIntToVal(llvmAsmtext+3);
                   return llvmAsmtext[0] == 's' ? ESINT64VAL : EUINT64VAL;
                 }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 330 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(llvmAsmtext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return UINTVAL;
                }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 337 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(llvmAsmtext+2);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT32_MAX+1)
                    GenerateError("Constant too large for signed 32 bits!");
                  llvmAsmlval.SIntVal = (int)-Val;
                  return SINTVAL;
                }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 346 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = atof(llvmAsmtext); return FPVAL; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 347 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = HexToFP(llvmAsmtext); return FPVAL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 349 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  llvmAsm_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 357 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 358 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return llvmAsmtext[0]; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 360 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1861 "Lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed llvmAsmin at a new source and called
			 * llvmAsmlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = llvmAsmin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( llvmAsmwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * llvmAsmtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of llvmAsmlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					llvmAsmrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			llvmAsmrestart(llvmAsmin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 479 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 479 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 478);

	return yy_is_jam ? 0 : yy_current_state;
}

    static inline void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up llvmAsmtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --llvmAsmlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					llvmAsmrestart(llvmAsmin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( llvmAsmwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve llvmAsmtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    llvmAsmlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void llvmAsmrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        llvmAsmensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            llvmAsm_create_buffer(llvmAsmin,YY_BUF_SIZE );
	}

	llvmAsm_init_buffer(YY_CURRENT_BUFFER,input_file );
	llvmAsm_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void llvmAsm_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		llvmAsmpop_buffer_state();
	 *		llvmAsmpush_buffer_state(new_buffer);
     */
	llvmAsmensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	llvmAsm_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (llvmAsmwrap()) processing, but the only time this flag
	 * is looked at is after llvmAsmwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void llvmAsm_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	llvmAsmin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE llvmAsm_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) llvmAsmalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in llvmAsm_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) llvmAsmalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in llvmAsm_create_buffer()" );

	b->yy_is_our_buffer = 1;

	llvmAsm_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with llvmAsm_create_buffer()
 * 
 */
    void llvmAsm_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		llvmAsmfree((void *) b->yy_ch_buf  );

	llvmAsmfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a llvmAsmrestart() or at EOF.
 */
    static void llvmAsm_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	llvmAsm_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then llvmAsm_init_buffer was _probably_
     * called from llvmAsmrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void llvmAsm_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		llvmAsm_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void llvmAsmpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	llvmAsmensure_buffer_stack();

	/* This block is copied from llvmAsm_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from llvmAsm_switch_to_buffer. */
	llvmAsm_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void llvmAsmpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	llvmAsm_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		llvmAsm_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void llvmAsmensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)llvmAsmalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)llvmAsmrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE llvmAsm_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) llvmAsmalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in llvmAsm_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	llvmAsm_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to llvmAsmlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       llvmAsm_scan_bytes() instead.
 */
YY_BUFFER_STATE llvmAsm_scan_string (yyconst char * yystr )
{
    
	return llvmAsm_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to llvmAsmlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE llvmAsm_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) llvmAsmalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in llvmAsm_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = llvmAsm_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in llvmAsm_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up llvmAsmtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		llvmAsmtext[llvmAsmleng] = (yy_hold_char); \
		(yy_c_buf_p) = llvmAsmtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		llvmAsmleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int llvmAsmget_lineno  (void)
{
        
    return llvmAsmlineno;
}

/** Get the input stream.
 * 
 */
FILE *llvmAsmget_in  (void)
{
        return llvmAsmin;
}

/** Get the output stream.
 * 
 */
FILE *llvmAsmget_out  (void)
{
        return llvmAsmout;
}

/** Get the length of the current token.
 * 
 */
int llvmAsmget_leng  (void)
{
        return llvmAsmleng;
}

/** Get the current token.
 * 
 */

char *llvmAsmget_text  (void)
{
        return llvmAsmtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void llvmAsmset_lineno (int  line_number )
{
    
    llvmAsmlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see llvmAsm_switch_to_buffer
 */
void llvmAsmset_in (FILE *  in_str )
{
        llvmAsmin = in_str ;
}

void llvmAsmset_out (FILE *  out_str )
{
        llvmAsmout = out_str ;
}

int llvmAsmget_debug  (void)
{
        return llvmAsm_flex_debug;
}

void llvmAsmset_debug (int  bdebug )
{
        llvmAsm_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from llvmAsmlex_destroy(), so don't allocate here.
     */

    /* We do not touch llvmAsmlineno unless the option is enabled. */
    llvmAsmlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    llvmAsmin = stdin;
    llvmAsmout = stdout;
#else
    llvmAsmin = (FILE *) 0;
    llvmAsmout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * llvmAsmlex_init()
     */
    return 0;
}

/* llvmAsmlex_destroy is for both reentrant and non-reentrant scanners. */
int llvmAsmlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		llvmAsm_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		llvmAsmpop_buffer_state();
	}

	/* Destroy the stack itself. */
	llvmAsmfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * llvmAsmlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *llvmAsmalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *llvmAsmrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void llvmAsmfree (void * ptr )
{
	free( (char *) ptr );	/* see llvmAsmrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 360 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"



