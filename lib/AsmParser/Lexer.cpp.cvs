#define yy_create_buffer llvmAsm_create_buffer
#define yy_delete_buffer llvmAsm_delete_buffer
#define yy_scan_buffer llvmAsm_scan_buffer
#define yy_scan_string llvmAsm_scan_string
#define yy_scan_bytes llvmAsm_scan_bytes
#define yy_flex_debug llvmAsm_flex_debug
#define yy_init_buffer llvmAsm_init_buffer
#define yy_flush_buffer llvmAsm_flush_buffer
#define yy_load_buffer_state llvmAsm_load_buffer_state
#define yy_switch_to_buffer llvmAsm_switch_to_buffer
#define yyin llvmAsmin
#define yyleng llvmAsmleng
#define yylex llvmAsmlex
#define yyout llvmAsmout
#define yyrestart llvmAsmrestart
#define yytext llvmAsmtext
#define yylineno llvmAsmlineno

#line 20 "Lexer.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE (16384*64)

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static inline void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
static yyconst short int yy_acclist[217] =
    {   0,
      137,  135,  136,  134,  135,  136,  134,  136,  135,  136,
      135,  136,  135,  136,  135,  136,  135,  136,  135,  136,
      127,  135,  136,  127,  135,  136,    1,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  135,  136,  135,  136,  135,
      136,  135,  136,  135,  136,  125,  123,  121,  130,  128,
      132,  127,    1,  122,  131,  107,   36,   70,   52,   71,
       66,   24,  125,  121,  132,   21,  132,  133,  126,  122,

       53,   65,   34,   37,    3,   55,   80,   85,   83,   84,
       82,   81,   86,   90,  106,   75,   73,   62,   74,   72,
       54,   88,   79,   77,   78,   76,   89,   87,   67,  124,
      132,  132,   64,   91,   69,   58,  114,   61,   68,  115,
       63,   23,  129,   57,   94,   60,   43,   25,    4,   50,
       56,   59,   46,   12,   93,  132,   31,    2,    5,   47,
       96,   42,   49,  116,   92,   22,  113,   39,    7,   48,
       38,  100,   99,    8,   16,  109,  112,   33,   51,  104,
       98,  108,   26,   27,   97,  110,  105,  103,    6,   28,
       95,   32,    9,   18,   10,  101,   11,   45,   44,  102,

       30,   13,   15,   14,   29,   35,   17,  111,  117,  119,
      120,   40,  118,   19,   41,   20
    } ;

static yyconst short int yy_accept[553] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   24,   27,   30,   32,   34,   36,   38,
       40,   42,   44,   46,   48,   50,   52,   54,   56,   58,
       60,   62,   64,   66,   68,   70,   72,   74,   76,   76,
       77,   77,   78,   79,   80,   80,   81,   81,   82,   83,
       83,   84,   84,   85,   86,   86,   86,   86,   86,   86,
       86,   86,   87,   87,   88,   88,   88,   88,   88,   88,
       88,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   91,   91,   91,   91,   91,   91,   91,

       91,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   94,   95,   96,   97,   98,   98,   99,
       99,  100,  101,  102,  102,  102,  103,  103,  103,  104,
      104,  104,  104,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  107,  107,  107,
      107,  108,  109,  110,  111,  112,  113,  113,  114,  115,

      115,  116,  116,  116,  116,  116,  116,  117,  118,  119,
      119,  119,  119,  120,  121,  121,  121,  122,  122,  122,
      122,  122,  122,  122,  122,  123,  124,  125,  125,  126,
      127,  127,  128,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  130,  130,  130,  131,  132,  132,  132,  132,
      133,  133,  133,  133,  134,  134,  134,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  136,  137,  137,  137,  137,  137,  138,  139,  139,
      139,  139,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  141,  142,  142,  142,  142,  142,  143,  143,  143,

      144,  145,  145,  145,  146,  146,  146,  146,  147,  148,
      148,  148,  149,  149,  149,  150,  150,  151,  152,  152,
      152,  152,  152,  153,  153,  154,  154,  155,  155,  155,
      156,  157,  158,  158,  158,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  160,  160,
      161,  162,  162,  162,  162,  162,  162,  162,  162,  163,
      163,  163,  163,  163,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  165,  165,  165,
      165,  166,  166,  167,  167,  167,  167,  167,  167,  167,
      167,  168,  168,  168,  169,  169,  169,  169,  170,  170,

      170,  170,  171,  171,  171,  172,  173,  174,  174,  174,
      175,  176,  176,  176,  176,  176,  177,  177,  178,  179,
      179,  179,  180,  180,  180,  181,  181,  181,  182,  183,
      184,  185,  186,  186,  187,  188,  188,  188,  188,  188,
      188,  189,  189,  189,  190,  191,  191,  191,  191,  191,
      191,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      194,  194,  194,  194,  194,  195,  195,  195,  195,  195,
      196,  197,  198,  199,  200,  201,  201,  201,  201,  202,
      202,  202,  202,  203,  203,  204,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  206,  206,
      206,  206,  206,  206,  206,  207,  207,  207,  207,  207,
      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  210,
      210,  211,  212,  212,  213,  213,  214,  215,  216,  216,
      217,  217
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,   16,   17,   17,   17,   17,   18,   17,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,    5,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    4,    4,    4,
        4,    4,    4,    5,    1,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4
    } ;

static yyconst short int yy_base[560] =
    {   0,
        0,    0, 1199, 1200, 1200, 1200, 1194, 1183,   35,   39,
       43,   49,   55,   61,    0,   72,   64,   67,   66,   86,
       76,  106,   91,   65,  133,  121,  117,   99,  152,   95,
       78,  179,  137,  211,  139,   90,  148,   93, 1192, 1200,
     1181, 1200,    0,   49,  185,  217,  116,  238,  254,  259,
        0, 1190,    0,  200,  125,  149,  146,  153,  177,   63,
      154, 1179,  160,  161,  208,  185,  264,  171,  113,  210,
     1178,  222,  260,  228,  186,  261,  271,  110,  273,  274,
      230,  223,  277,  278,  279,  282,  286,  285,  205,  290,
      287,  292, 1177,  288,  299,  300,  307,  309,  312,  314,

      316,  318,  323,  311,  324,  326,  328,  327,  330,  329,
      339,  347,  341,  343,  334,  354, 1176,  358,  342,  359,
      361,  364,  365,  367,  371,  369,  370,  378,  395,  386,
      385,  387, 1175,    0,  406, 1174,  421,  439,    0, 1183,
     1200,    0, 1172,  232,  408, 1171,  396,  400, 1170,  397,
      426,  412, 1169,  414,  424,  440,  413,  430,  441,  442,
      443, 1168,  445,  448,  449,  454,  451,  453,  458,  460,
      466,  462,  461,  469,  464,  465,  470,  475,  487,  488,
      489,  490,  491,  492,  493,  494, 1167,  496,  495,  501,
     1166, 1165, 1164, 1163, 1162, 1161,  502, 1160, 1159,  498,

     1158,  528,  503,  504,  508,  516, 1157, 1156, 1155,  510,
      520,  533, 1154, 1153,  541,  542, 1152,  543,  544,  545,
      546,  551,  549,  547, 1151, 1150, 1149,  553, 1148, 1147,
      568, 1146, 1145,  570,  548,  554,  550,  574,  575,  576,
      577, 1144,  579,  563, 1200,  596,  611,  615,  619,  624,
      584,  588,  585, 1143,  625,  626, 1142,  589,  627,  628,
      629,  630,  631,  633,  636,  634,  637,  640,  639,  647,
     1141, 1140,  638,  641,  652,  642, 1139, 1138,  654,  657,
      656, 1137,  658,  660,  664,  669,  671,  586,  673,  674,
     1136, 1135,  676,  678,  679,  680, 1134,  681,  682,    0,

     1133,  683,  684, 1132,  685,  688,  699, 1131, 1130,  702,
      700, 1129,  704,  705, 1128,  709, 1127, 1126,  711,  713,
      719,  715, 1125,  716, 1124,  718, 1123,  720,  723, 1122,
      730, 1121,  730,  590, 1120,  732,  739,  734,  735,  744,
      746,  745,  748,  749,  750,  753,  751, 1119,  754, 1118,
     1117,  758,  761,  763,  757,  764,  765,  770, 1116,  773,
      774,  776,  778, 1115,  777,  782,  779,  784,  785,  791,
      786,  793,  794,  798,  802,  803, 1114,  804,  805,  806,
     1113,  807, 1112,  811,  815,  808,  821,  822,  810,  825,
     1111,  826,  830, 1110,  831,  832,  836, 1109,  833,  838,

      839, 1108,  842,  841, 1107, 1106, 1105,  837,  850, 1104,
     1103,  852,  853,  860,  844, 1102,  851, 1101, 1100,  855,
      864, 1099,  869,  870, 1098,  871,  872, 1097, 1096, 1095,
     1094, 1093,  873, 1092, 1091,  874,  875,  876,  878,  879,
     1090,  880,  884, 1089, 1088,  889,  891,  893,  894,  895,
     1087,  896,  899,  900,  902,  901,  909,  907,  912,  908,
     1076,  914,  924,  922,  926,  915,  927,  929,  930, 1066,
      931,  933,  937,  938, 1065,  943,  944,  941,  945, 1064,
     1063, 1062, 1059, 1058, 1057,  950,  946,  951, 1056,  963,
      964,  952, 1054,  949, 1053, 1052,  968,  967,  969,  972,

      975,  976,  979,  980,  981,  982,  983, 1047,  985,  988,
      986,  990,  991,  994, 1046,  997,  995,  999, 1004,  947,
     1002, 1008, 1009, 1010, 1016,  687, 1013, 1017, 1019, 1021,
     1022, 1024, 1026, 1027, 1030, 1034, 1031, 1036,  555, 1037,
      515,  512, 1040,  463, 1041,  399,  366,  247, 1045,  243,
     1200, 1081, 1083,  212, 1088, 1091,  167, 1095,  108
    } ;

static yyconst short int yy_def[560] =
    {   0,
      551,    1,  551,  551,  551,  551,  552,  553,  554,  551,
      553,  553,  553,  553,  555,  556,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  552,  551,
      553,  551,  557,  551,  551,  553,  553,  553,  553,  553,
      555,  558,  559,  551,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,   25,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  551,  557,  551,  553,  553,  553,   50,  558,
      551,  559,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,   50,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  551,  551,  551,  551,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  202,

      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      551,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
        0,  551,  551,  551,  551,  551,  551,  551,  551
    } ;

static yyconst short int yy_nxt[1245] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,   16,    8,    8,    8,   17,
       18,   19,   20,   21,   22,   23,   24,   25,    8,   26,
       27,   28,   29,   30,    8,   31,   32,   33,   34,   35,
       36,   37,    8,   38,   44,   44,   44,   44,   45,   45,
       45,   45,   46,   46,   46,   46,   42,   47,   44,   44,
       44,   44,   42,   48,   49,   49,   49,   49,   42,   48,
       49,   49,   49,   49,   42,   52,   42,   42,   42,   42,
       42,   54,   54,   54,   54,   63,   55,   64,  150,   42,
       60,   42,   81,   56,   61,   57,   50,   58,   65,   42,

       59,  104,   62,   42,   42,   66,   42,   70,   42,   67,
       71,  142,   42,  129,   79,   68,  132,   72,   69,   42,
       80,  102,   93,   42,  136,   73,   42,   74,   75,   42,
       42,   94,  103,  171,   42,   76,   90,   95,   42,   77,
       86,   78,   82,   82,   82,   82,   42,  143,   87,   91,
       42,  161,   42,   88,   83,   92,  116,   89,  127,   42,
      130,   42,   42,   84,   85,   42,   42,   42,  146,  117,
      134,  128,  118,   42,   42,   96,  144,   97,  145,  119,
      131,   98,  153,   99,   42,  100,  147,  101,  105,  152,
       42,  151,   42,  135,   45,   45,   45,   45,   42,   42,

      160,  106,  107,  148,  108,  109,  110,  149,  111,   54,
       54,   54,   54,  167,  112,   43,  113,  114,   42,  115,
      105,   42,  156,   42,   42,   48,   46,   46,   46,   46,
       42,  184,  162,  120,  121,   42,  122,  154,  123,  155,
      124,   42,  125,   42,   41,   42,  126,  137,  137,  137,
      137,   42,  174,   41,   41,  138,   42,  251,  166,  163,
       42,  138,   48,   49,   49,   49,   49,   42,  139,  139,
      139,  139,   42,   42,   42,  139,  139,   42,  139,  139,
      139,  139,  139,  139,   42,  157,   42,   42,  158,  164,
       42,   42,   42,  168,  169,   42,  165,  159,   42,   42,

       42,   42,  181,   42,  183,   42,  173,  175,  170,  186,
      172,  176,   42,   42,  177,  178,  179,  182,  180,  185,
       42,  187,   42,  188,   42,   42,  189,   42,  190,   42,
      192,   42,  194,  197,  191,  196,   42,   42,  198,   42,
       42,   42,   42,   42,  193,  199,  195,   42,  201,  204,
      207,  211,   42,  203,   42,   42,   42,  205,  200,  209,
       42,  218,  213,  217,  208,  202,  212,   42,  210,  206,
      215,   42,   42,  216,   42,  223,  214,   42,   42,   42,
       42,  219,   42,   42,   42,  221,  224,  226,  237,  220,
      229,   42,  236,  231,  232,  225,  222,  241,   42,   42,

       42,  227,  228,  233,  230,  238,  234,  239,   42,   42,
       42,  235,   42,   42,  240,  246,  246,  246,  246,  253,
      242,   42,  243,  247,  255,   42,   42,   42,  244,  247,
      137,  137,  137,  137,   42,  254,  258,   42,  138,   42,
      252,  257,  261,   42,  138,  248,  249,  256,  250,  250,
      250,  250,   42,   42,   42,   42,   42,  262,   42,  260,
      259,   42,   42,  266,   42,  264,   42,   42,  267,  265,
      263,   42,  273,   42,   42,   42,   42,   42,   42,   42,
      268,  280,   42,   42,  269,  279,  270,  271,   42,  277,
      272,  281,  275,  284,  283,  276,  278,  282,  285,  274,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
      286,   42,  289,  291,   42,   42,   42,   42,  290,  295,
      288,   42,  293,   42,  287,   42,  296,  292,   42,   42,
      297,  303,  294,   42,  305,  299,  298,  300,  300,  300,
      300,  302,  301,  306,  300,  300,   42,  300,  300,  300,
      300,  300,  300,  304,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,  307,   42,   42,   42,  324,
      313,  308,  317,  312,  315,  322,   42,  310,  309,  314,
      311,   42,  316,   42,  323,  319,  318,   42,   42,   42,
       42,  320,   42,  321,  326,  328,  325,   42,   42,   42,

      330,   42,   42,   42,  327,  246,  246,  246,  246,  333,
      337,  329,  392,  247,  363,  332,  334,  248,  248,  247,
      331,  331,  331,  331,  331,  331,  331,  331,  250,  250,
      250,  250,   42,  250,  250,  250,  250,   42,   42,   42,
       42,   42,   42,   42,   42,  336,   42,   42,  340,   42,
       42,   42,   42,   42,   42,   42,  335,  339,  342,  347,
       42,  341,  348,  345,  338,   42,  344,   42,  349,   42,
       42,   42,  346,   42,  343,  350,  356,   42,  351,  357,
      354,  358,   42,  355,   42,  359,   42,   42,  352,   42,
      353,   42,   42,   42,   42,   42,   42,   42,   42,  360,

       42,   42,  364,  362,  361,  373,  365,  367,  366,  374,
      372,  375,   42,   42,  371,   42,  368,   42,   42,  370,
      369,  378,   42,  376,   42,  377,   42,  379,   42,   42,
      381,   42,   42,   42,  380,  382,   42,  383,  384,  331,
      331,  331,  331,   42,  388,   42,  385,   42,   42,  391,
      390,  386,   42,  395,  396,  387,  389,   42,   42,   42,
      394,   42,   42,   42,   42,  399,   42,   42,  393,  398,
       42,   42,  404,  402,   42,  405,   42,   42,   42,  397,
      409,  400,  401,   42,  403,  406,   42,   42,  407,   42,
       42,   42,   42,  410,  408,   42,  411,   42,   42,   42,

      412,  416,  419,  418,   42,  414,   42,   42,  417,  415,
      413,   42,  421,  423,  422,   42,   42,   42,   42,   42,
       42,   42,  420,   42,   42,  424,  427,  426,   42,  431,
      429,  425,  433,  435,   42,   42,  428,  434,   42,   42,
      432,  437,  430,   42,   42,   42,   42,  438,  436,   42,
       42,   42,   42,  440,   42,   42,  439,   42,  451,  444,
      448,  449,  442,   42,   42,   42,   42,  441,   42,  445,
      446,  447,  457,   42,  443,  453,  454,   42,  450,  455,
      452,  456,   42,   42,   42,   42,   42,   42,   42,   42,
      458,   42,   42,   42,  462,  459,  463,   42,  467,  464,

      460,  461,   42,  465,   42,  468,   42,   42,   42,   42,
      469,  466,   42,   42,   42,   42,  471,  470,  476,  477,
       42,   42,   42,  475,  472,   42,  473,   42,   42,  479,
      478,  480,  482,  474,  484,   42,  481,   42,  483,   42,
       42,  488,   42,   42,   42,  485,   42,  487,  491,  489,
       42,   42,  490,  486,   42,  493,   42,   42,   42,   42,
       42,  497,   42,   42,   42,   42,  492,  503,  501,  494,
      495,  504,  498,  502,  496,  499,   42,   42,  500,  507,
       42,   42,   42,  506,  505,   42,  508,  509,   42,   42,
      510,  512,   42,   42,   42,   42,   42,  514,   42,   42,

      517,   42,  519,   42,   42,  513,  511,   42,   42,  516,
       42,  518,   42,  520,  524,   42,  515,   42,  521,  522,
      526,   42,   42,   42,  527,  530,   42,  523,  528,   42,
       42,  525,   42,  529,   42,   42,  532,   42,  536,   42,
       42,  533,  535,   42,   42,  531,  537,   42,  534,   42,
       42,  543,  538,   42,   42,  544,  540,  539,   42,   42,
       42,  548,  542,  541,  549,   42,   42,   42,  547,   42,
       42,   42,   42,  546,  545,   42,   42,   42,   42,   42,
      550,   39,   39,   39,   39,   39,   41,   41,   51,   42,
       51,   51,   51,   53,   53,  140,  140,  140,  140,  140,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,  141,   42,  245,   42,
       42,   42,   42,  141,   42,  133,   42,   40,  551,    3,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551
    } ;

static yyconst short int yy_chk[1245] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,    9,    9,   10,   10,
       10,   10,   11,   11,   11,   11,   11,   12,   44,   44,
       44,   44,   12,   13,   13,   13,   13,   13,   13,   14,
       14,   14,   14,   14,   14,   16,   60,   17,   24,   19,
       18,   16,   16,   16,   16,   19,   17,   19,   60,   21,
       18,   31,   24,   17,   18,   17,   13,   17,   19,   20,

       17,   31,   18,   36,   23,   20,   38,   21,   30,   20,
       21,  559,   28,   36,   23,   20,   38,   21,   20,   22,
       23,   30,   28,   78,   47,   22,   69,   22,   22,   47,
       27,   28,   30,   78,   26,   22,   27,   28,   55,   22,
       26,   22,   25,   25,   25,   25,   25,   55,   26,   27,
       33,   69,   35,   26,   25,   27,   33,   26,   35,   57,
       37,   37,   56,   25,   25,   29,   58,   61,   57,   33,
      557,   35,   33,   63,   64,   29,   56,   29,   56,   33,
       37,   29,   64,   29,   68,   29,   58,   29,   32,   63,
       59,   61,   32,   45,   45,   45,   45,   45,   66,   75,

       68,   32,   32,   59,   32,   32,   32,   59,   32,   54,
       54,   54,   54,   75,   32,  554,   32,   32,   89,   32,
       34,   65,   66,   70,   34,   46,   46,   46,   46,   46,
       46,   89,   70,   34,   34,   72,   34,   65,   34,   65,
       34,   74,   34,   81,   82,  144,   34,   48,   48,   48,
       48,   48,   81,   82,   82,   48,  550,  144,   74,   72,
      548,   48,   49,   49,   49,   49,   49,   49,   50,   50,
       50,   50,   50,   73,   76,   50,   50,   67,   50,   50,
       50,   50,   50,   50,   77,   67,   79,   80,   67,   73,
       83,   84,   85,   76,   77,   86,   73,   67,   88,   87,

       91,   94,   86,   90,   88,   92,   80,   83,   77,   91,
       79,   84,   95,   96,   85,   85,   85,   87,   85,   90,
       97,   92,   98,   94,  104,   99,   94,  100,   95,  101,
       97,  102,   98,  100,   96,   99,  103,  105,  101,  106,
      108,  107,  110,  109,   97,  102,   98,  115,  104,  107,
      108,  110,  111,  106,  113,  119,  114,  107,  103,  109,
      112,  115,  111,  114,  108,  105,  110,  116,  109,  107,
      112,  118,  120,  113,  121,  119,  111,  122,  123,  547,
      124,  116,  126,  127,  125,  118,  120,  122,  127,  116,
      124,  128,  126,  125,  125,  121,  118,  130,  131,  130,

      132,  122,  123,  125,  124,  128,  125,  128,  129,  147,
      150,  125,  546,  148,  129,  135,  135,  135,  135,  147,
      131,  145,  132,  135,  150,  152,  157,  154,  132,  135,
      137,  137,  137,  137,  137,  148,  154,  155,  137,  151,
      145,  152,  157,  158,  137,  138,  138,  151,  138,  138,
      138,  138,  138,  156,  159,  160,  161,  158,  163,  156,
      155,  164,  165,  161,  167,  160,  168,  166,  163,  160,
      159,  169,  168,  170,  173,  172,  544,  175,  176,  171,
      163,  173,  174,  177,  164,  172,  165,  166,  178,  171,
      167,  174,  170,  177,  176,  170,  171,  175,  178,  169,

      179,  180,  181,  182,  183,  184,  185,  186,  189,  188,
      179,  200,  181,  183,  190,  197,  203,  204,  182,  188,
      180,  205,  185,  210,  179,  542,  189,  184,  541,  206,
      190,  205,  186,  211,  210,  200,  197,  202,  202,  202,
      202,  204,  203,  211,  202,  202,  212,  202,  202,  202,
      202,  202,  202,  206,  215,  216,  218,  219,  220,  221,
      224,  235,  223,  237,  222,  212,  228,  236,  539,  237,
      220,  215,  223,  219,  222,  235,  244,  216,  215,  221,
      218,  231,  222,  234,  236,  228,  224,  238,  239,  240,
      241,  231,  243,  234,  239,  241,  238,  251,  253,  288,

      244,  252,  258,  334,  240,  246,  246,  246,  246,  252,
      258,  243,  334,  246,  288,  251,  253,  247,  247,  246,
      247,  247,  247,  247,  248,  248,  248,  248,  249,  249,
      249,  249,  249,  250,  250,  250,  250,  250,  255,  256,
      259,  260,  261,  262,  263,  256,  264,  266,  261,  265,
      267,  273,  269,  268,  274,  276,  255,  260,  263,  268,
      270,  262,  269,  266,  259,  275,  265,  279,  270,  281,
      280,  283,  267,  284,  264,  273,  280,  285,  274,  281,
      276,  283,  286,  279,  287,  284,  289,  290,  275,  293,
      275,  294,  295,  296,  298,  299,  302,  303,  305,  285,

      526,  306,  289,  287,  286,  303,  290,  294,  293,  305,
      302,  306,  307,  311,  299,  310,  295,  313,  314,  298,
      296,  311,  316,  307,  319,  310,  320,  313,  322,  324,
      316,  326,  321,  328,  314,  319,  329,  320,  321,  331,
      331,  331,  331,  333,  328,  336,  322,  338,  339,  333,
      329,  324,  337,  338,  339,  326,  328,  340,  342,  341,
      337,  343,  344,  345,  347,  342,  346,  349,  336,  341,
      355,  352,  347,  345,  353,  349,  354,  356,  357,  340,
      355,  343,  344,  358,  346,  352,  360,  361,  353,  362,
      365,  363,  367,  356,  354,  366,  357,  368,  369,  371,

      358,  363,  367,  366,  370,  361,  372,  373,  365,  362,
      360,  374,  369,  371,  370,  375,  376,  378,  379,  380,
      382,  386,  368,  389,  384,  372,  375,  374,  385,  380,
      378,  373,  384,  386,  387,  388,  376,  385,  390,  392,
      382,  388,  379,  393,  395,  396,  399,  389,  387,  397,
      408,  400,  401,  392,  404,  403,  390,  415,  408,  397,
      403,  403,  395,  409,  417,  412,  413,  393,  420,  399,
      400,  401,  417,  414,  396,  412,  413,  421,  404,  414,
      409,  415,  423,  424,  426,  427,  433,  436,  437,  438,
      420,  439,  440,  442,  426,  421,  427,  443,  438,  433,

      423,  424,  446,  436,  447,  439,  448,  449,  450,  452,
      440,  437,  453,  454,  456,  455,  443,  442,  450,  452,
      458,  460,  457,  449,  446,  459,  447,  462,  466,  454,
      453,  455,  457,  448,  459,  464,  456,  463,  458,  465,
      467,  464,  468,  469,  471,  460,  472,  463,  467,  465,
      473,  474,  466,  462,  478,  469,  476,  477,  479,  487,
      520,  474,  494,  486,  488,  492,  468,  487,  479,  471,
      472,  488,  476,  486,  473,  477,  490,  491,  478,  492,
      498,  497,  499,  491,  490,  500,  494,  497,  501,  502,
      498,  500,  503,  504,  505,  506,  507,  502,  509,  511,

      505,  510,  507,  512,  513,  501,  499,  514,  517,  504,
      516,  506,  518,  509,  513,  521,  503,  519,  510,  511,
      516,  522,  523,  524,  517,  521,  527,  512,  518,  525,
      528,  514,  529,  519,  530,  531,  523,  532,  528,  533,
      534,  524,  527,  535,  537,  522,  529,  536,  525,  538,
      540,  535,  530,  543,  545,  536,  532,  531,  549,  515,
      508,  543,  534,  533,  545,  496,  495,  493,  540,  489,
      485,  484,  483,  538,  537,  482,  481,  480,  475,  470,
      549,  552,  552,  552,  552,  552,  553,  553,  555,  461,
      555,  555,  555,  556,  556,  558,  558,  558,  558,  558,

      451,  445,  444,  441,  435,  434,  432,  431,  430,  429,
      428,  425,  422,  419,  418,  416,  411,  410,  407,  406,
      405,  402,  398,  394,  391,  383,  381,  377,  364,  359,
      351,  350,  348,  335,  332,  330,  327,  325,  323,  318,
      317,  315,  312,  309,  308,  304,  301,  297,  292,  291,
      282,  278,  277,  272,  271,  257,  254,  242,  233,  232,
      230,  229,  227,  226,  225,  217,  214,  213,  209,  208,
      207,  201,  199,  198,  196,  195,  194,  193,  192,  191,
      187,  162,  153,  149,  146,  143,  140,  136,  133,  117,
       93,   71,   62,   52,   41,   39,    8,    7,    3,  551,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
#define INITIAL 0
/*===-- Lexer.l - Scanner for llvm assembly files --------------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by the LLVM research group and is distributed under
// the University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM assembly languages files.
//
//===----------------------------------------------------------------------===*/
#define YY_NEVER_INTERACTIVE 1
#line 28 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
#include "ParserInternals.h"
#include "llvm/Module.h"
#include <list>
#include "llvmAsmParser.h"
#include <cctype>
#include <cstdlib>

void set_scan_file(FILE * F){
  yy_switch_to_buffer(yy_create_buffer( F, YY_BUF_SIZE ) );
}
void set_scan_string (const char * str) {
  yy_scan_string (str);
}

// Construct a token value for a non-obsolete token
#define RET_TOK(type, Enum, sym) \
  llvmAsmlval.type = Instruction::Enum; \
  return sym

// Construct a token value for an obsolete token
#define RET_TY(CTYPE, SYM) \
  llvmAsmlval.PrimType = CTYPE;\
  return SYM

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size


// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  // Behave nicely in the face of C TBAA rules... see:
  // http://www.nullstone.com/htmls/category/aliastyp.htm
  union {
    uint64_t UI;
    double FP;
  } UIntToFP;
  UIntToFP.UI = HexIntToVal(Buffer);

  assert(sizeof(double) == sizeof(uint64_t) &&
         "Data sizes incompatible on this target!");
  return UIntToFP.FP;   // Cast Hex constant to double
}


// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.  If AllowNull is set to false, a \00 value will cause
// an exception to be thrown.
//
// If AllowNull is set to true, the return value of the function points to the
// last character of the string in memory.
//
char *UnEscapeLexed(char *Buffer, bool AllowNull) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\' && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
      char Tmp = BIn[3]; BIn[3] = 0;     // Terminate string
      *BOut = (char)strtol(BIn+1, 0, 16);  // Convert to number
      if (!AllowNull && !*BOut)
        GenerateError("String literal cannot accept \\00 escape!");

      BIn[3] = Tmp;                  // Restore character
      BIn += 3;                      // Skip over handled chars
      ++BOut;
    } else {
      *BOut++ = *BIn++;
    }
  }

  return BOut;
}

} // End llvm namespace

using namespace llvm;

#define YY_NEVER_INTERACTIVE 1
/* Comments start with a ; and go till end of line */
/* Local Values and Type identifiers start with a % sign */
/* Global Value identifiers start with an @ sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* LocalVarID/GlobalVarID: match an unnamed local variable slot ID. */
/* Integer types are specified with i and a bitwidth */
/* E[PN]Integer: match positive and negative literal integer values. */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 1031 "Lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static inline void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 190 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"


#line 1185 "Lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 552 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 551 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 192 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 194 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 195 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 196 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 197 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 198 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 199 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return DEFINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 200 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return GLOBAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 201 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return CONSTANT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 202 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return INTERNAL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 203 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return LINKONCE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 204 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return WEAK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 205 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return APPENDING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 206 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 207 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 208 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return HIDDEN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 209 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 210 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 211 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return IMPLEMENTATION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 212 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 213 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 214 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return UNDEF; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 215 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 216 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return TO; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 217 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return TAIL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 218 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return TARGET; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 219 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return TRIPLE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 220 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 221 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return DATALAYOUT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 222 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return VOLATILE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 223 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return ALIGN;  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 224 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return SECTION; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 225 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return MODULE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 226 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 227 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 229 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return CC_TOK; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 230 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 231 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 232 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 233 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return X86_STDCALLCC_TOK; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 234 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return X86_FASTCALLCC_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 236 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return INREG; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 237 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return SRET;  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 238 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return NOUNWIND; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 239 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return NORETURN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 241 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TY(Type::VoidTy,  VOID);  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 242 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TY(Type::FloatTy, FLOAT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 243 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TY(Type::DoubleTy,DOUBLE);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 244 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TY(Type::LabelTy, LABEL); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 245 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return TYPE;   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 246 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return OPAQUE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 247 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ uint64_t NumBits = atoull(yytext+1);
                  if (NumBits < IntegerType::MIN_INT_BITS || 
                      NumBits > IntegerType::MAX_INT_BITS)
                    GenerateError("Bitwidth for integer type out of range!");
                  const Type* Ty = IntegerType::get(NumBits);
                  RET_TY(Ty, INTTYPE);
                }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 255 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Add, ADD); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 256 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Sub, SUB); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 257 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Mul, MUL); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 258 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, UDiv, UDIV); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SDiv, SDIV); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FDiv, FDIV); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 261 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, URem, UREM); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 262 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SRem, SREM); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 263 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FRem, FREM); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 264 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Shl, SHL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 265 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, LShr, LSHR); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 266 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, AShr, ASHR); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 267 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, And, AND); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Or , OR ); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 269 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Xor, XOR); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 270 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  ICmp,  ICMP); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 271 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  FCmp,  FCMP); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 273 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return EQ;  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 274 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return NE;  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 275 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return SLT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 276 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return SGT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 277 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return SLE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 278 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return SGE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 279 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return ULT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 280 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return UGT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 281 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return ULE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 282 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return UGE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 283 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return OEQ; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 284 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return ONE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 285 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return OLT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 286 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return OGT; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 287 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return OLE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 288 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return OGE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 289 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return ORD; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 290 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return UNO; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 291 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return UEQ; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 292 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return UNE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 294 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, PHI, PHI_TOK); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 295 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Call, CALL); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 296 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, Trunc, TRUNC); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 297 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, ZExt, ZEXT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 298 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SExt, SEXT); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 299 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPTrunc, FPTRUNC); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 300 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPExt, FPEXT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 301 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, UIToFP, UITOFP); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 302 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SIToFP, SITOFP); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 303 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToUI, FPTOUI); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 304 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToSI, FPTOSI); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 305 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, IntToPtr, INTTOPTR); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 306 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, PtrToInt, PTRTOINT); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 307 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, BitCast, BITCAST); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 308 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Select, SELECT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 309 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 310 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Ret, RET); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 311 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Br, BR); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 312 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Switch, SWITCH); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 313 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Invoke, INVOKE); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 314 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unwind, UNWIND); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 315 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unreachable, UNREACHABLE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 317 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Malloc, MALLOC); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 318 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Alloca, ALLOCA); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 319 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Free, FREE); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 320 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Load, LOAD); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 321 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Store, STORE); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 322 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, GetElementPtr, GETELEMENTPTR); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 324 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ExtractElement, EXTRACTELEMENT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 325 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, InsertElement, INSERTELEMENT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 326 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ShuffleVector, SHUFFLEVECTOR); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 329 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{
                  UnEscapeLexed(yytext+1);
                  llvmAsmlval.StrVal = strdup(yytext+1);             // Skip %
                  return LOCALVAR;
                }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 334 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{
                  UnEscapeLexed(yytext+1);
                  llvmAsmlval.StrVal = strdup(yytext+1);             // Skip @
                  return GLOBALVAR;
                }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 339 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{
                  yytext[strlen(yytext)-1] = 0;  // nuke colon
                  UnEscapeLexed(yytext);
                  llvmAsmlval.StrVal = strdup(yytext);
                  return LABELSTR;
                }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 345 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{
                  yytext[strlen(yytext)-2] = 0;  // nuke colon, end quote
                  UnEscapeLexed(yytext+1);
                  llvmAsmlval.StrVal = strdup(yytext+1);
                  return LABELSTR;
                }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 352 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ // Note that we cannot unescape a string constant here!  The
                   // string constant might contain a \00 which would not be
                   // understood by the string stuff.  It is valid to make a
                   // [sbyte] c"Hello World\00" constant, for example.
                   //
                   yytext[strlen(yytext)-1] = 0;           // nuke end quote
                   llvmAsmlval.StrVal = strdup(yytext+1);  // Nuke start quote
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 361 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{
                     yytext[strlen(yytext)-1] = 0;           // nuke end quote
                     llvmAsmlval.StrVal = strdup(yytext+2);  // Nuke @, quote
                     return ATSTRINGCONSTANT;
                   }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 367 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ int len = strlen(yytext); 
                  uint32_t numBits = ((len * 64) / 19) + 1;
                  APInt Tmp(numBits, yytext, len, 10);
                  uint32_t activeBits = Tmp.getActiveBits();
                  if (activeBits > 0 && activeBits < numBits)
                    Tmp.trunc(activeBits);
                  if (Tmp.getBitWidth() > 64) {
                    llvmAsmlval.APIntVal = new APInt(Tmp);
                    return EUAPINTVAL; 
                  } else {
                    llvmAsmlval.UInt64Val = Tmp.getZExtValue();
                    return EUINT64VAL;
                  }
                }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 381 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ int len = strlen(yytext); 
                  uint32_t numBits = (((len-1) * 64) / 19) + 2;
                  APInt Tmp(numBits, yytext, len, 10);
                  uint32_t minBits = Tmp.getMinSignedBits();
                  if (minBits > 0 && minBits < numBits)
                    Tmp.trunc(minBits);
                  if (Tmp.getBitWidth() > 64) {
                    llvmAsmlval.APIntVal = new APInt(Tmp);
                    return ESAPINTVAL;
                  } else {
                    llvmAsmlval.SInt64Val = Tmp.getSExtValue();
                    return ESINT64VAL;
                  }
                }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 396 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ int len = strlen(yytext+3) - 3;
                   uint32_t bits = len * 4;
                   APInt Tmp(bits, yytext+3, len, 16);
                   uint32_t activeBits = Tmp.getActiveBits();
                   if (activeBits > 0 && activeBits < bits)
                     Tmp.trunc(activeBits);
                   if (Tmp.getBitWidth() > 64) {
                     llvmAsmlval.APIntVal = new APInt(Tmp);
                     return yytext[0] == 's' ? ESAPINTVAL : EUAPINTVAL;
                   } else if (yytext[0] == 's') {
                     llvmAsmlval.SInt64Val = Tmp.getSExtValue();
                     return ESINT64VAL;
                   } else {
                     llvmAsmlval.UInt64Val = Tmp.getZExtValue();
                     return EUINT64VAL;
                   }
                 }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 414 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return LOCALVAL_ID;
                }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 421 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return GLOBALVAL_ID;
                }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 429 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = atof(yytext); return FPVAL; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 430 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = HexToFP(yytext); return FPVAL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 432 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  yy_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 440 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 441 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 443 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2056 "Lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 552 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 552 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 551);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static inline void yyunput( int c, register char *yy_bp )
#else
static inline void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static inline void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static inline void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 443 "/proj/llvm/llvm-1/lib/AsmParser/Lexer.l"

