#define yy_create_buffer llvmAsm_create_buffer
#define yy_delete_buffer llvmAsm_delete_buffer
#define yy_scan_buffer llvmAsm_scan_buffer
#define yy_scan_string llvmAsm_scan_string
#define yy_scan_bytes llvmAsm_scan_bytes
#define yy_flex_debug llvmAsm_flex_debug
#define yy_init_buffer llvmAsm_init_buffer
#define yy_flush_buffer llvmAsm_flush_buffer
#define yy_load_buffer_state llvmAsm_load_buffer_state
#define yy_switch_to_buffer llvmAsm_switch_to_buffer
#define yyin llvmAsmin
#define yyleng llvmAsmleng
#define yylex llvmAsmlex
#define yyout llvmAsmout
#define yyrestart llvmAsmrestart
#define yytext llvmAsmtext
#define yylineno llvmAsmlineno

#line 20 "Lexer.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE (16384*64)

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static inline void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
static yyconst short int yy_acclist[227] =
    {   0,
      147,  145,  146,  144,  145,  146,  144,  146,  145,  146,
      145,  146,  145,  146,  145,  146,  145,  146,  145,  146,
      137,  145,  146,  137,  145,  146,    1,  145,  146,  145,
      146,  145,  146,  145,  146,  145,  146,  145,  146,  145,
      146,  145,  146,  145,  146,  145,  146,  145,  146,  145,
      146,  145,  146,  145,  146,  145,  146,  145,  146,  145,
      146,  145,  146,  145,  146,  145,  146,  145,  146,  145,
      146,  145,  146,  145,  146,  134,  132,  130,  140,  138,
      142,  137,    1,  131,  141,  116,   38,   79,   61,   80,
       75,   25,  134,  136,  130,  142,   22,  142,  143,  135,

      131,   62,   74,   36,   39,    3,   64,   89,   94,   92,
       93,   91,   90,   95,   99,  115,   84,   82,   71,   83,
       81,   63,   97,   88,   86,   87,   85,   98,   96,   76,
      133,  142,  142,   73,  100,   78,   67,  123,   70,   77,
      124,   72,   52,   24,  139,   66,  103,   69,   47,   26,
        4,   59,   65,   68,   55,   12,  102,  142,   34,   32,
        2,   51,    5,   56,  105,   46,   58,   53,  125,  101,
       23,   54,  122,   41,    7,   57,   40,  109,  108,    8,
       16,  118,  121,   35,   60,  113,  107,  117,   27,   28,
      106,  119,  114,  112,    6,   29,  104,   50,   33,   44,

       45,    9,   19,   10,  110,   11,   49,   48,  111,   31,
       13,   15,   14,   17,   30,   37,   18,  120,   20,  126,
      128,  129,   42,  127,   43,   21
    } ;

static yyconst short int yy_accept[587] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   24,   27,   30,   32,   34,   36,   38,
       40,   42,   44,   46,   48,   50,   52,   54,   56,   58,
       60,   62,   64,   66,   68,   70,   72,   74,   76,   76,
       77,   77,   78,   78,   79,   80,   80,   81,   81,   82,
       83,   83,   84,   84,   85,   86,   86,   86,   86,   86,
       86,   86,   86,   87,   87,   87,   88,   88,   88,   88,
       88,   88,   88,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   91,   91,   91,   91,   91,   91,

       91,   91,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   94,   94,   95,   96,
       97,   98,   99,   99,  100,  100,  101,  102,  103,  103,
      103,  104,  104,  104,  105,  105,  105,  105,  105,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  108,  108,  108,  108,  108,  108,  109,  110,

      111,  112,  113,  114,  114,  115,  116,  116,  116,  117,
      117,  117,  117,  117,  117,  118,  119,  120,  120,  120,
      120,  120,  121,  122,  122,  122,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  124,  125,  126,  126,  127,
      128,  128,  129,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  131,  131,  131,  132,  133,  133,  133,  133,
      134,  134,  134,  134,  134,  135,  135,  135,  135,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  137,  138,  138,  138,  138,  138,  139,
      140,  140,  140,  140,  141,  141,  141,  141,  141,  141,

      141,  141,  142,  143,  143,  143,  144,  144,  144,  144,
      145,  145,  145,  145,  146,  147,  147,  147,  148,  148,
      148,  148,  148,  149,  150,  150,  150,  151,  151,  151,
      151,  152,  152,  153,  154,  154,  154,  154,  154,  155,
      155,  156,  156,  157,  157,  157,  158,  159,  160,  161,
      161,  161,  162,  162,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  164,  164,  165,  166,
      166,  166,  166,  166,  166,  166,  167,  167,  167,  167,
      167,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  169,  169,  169,  169,  169,  170,

      170,  170,  170,  170,  171,  171,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  173,  174,  174,  174,
      175,  175,  175,  175,  176,  176,  176,  176,  177,  177,
      177,  178,  179,  180,  180,  180,  181,  182,  182,  182,
      182,  183,  183,  184,  185,  185,  185,  185,  186,  186,
      186,  186,  187,  187,  187,  187,  188,  189,  190,  190,
      191,  192,  192,  193,  194,  194,  194,  194,  194,  194,
      194,  195,  195,  195,  196,  197,  197,  197,  197,  197,
      197,  198,  198,  198,  198,  198,  198,  199,  199,  199,
      199,  199,  200,  200,  200,  201,  201,  201,  201,  201,

      201,  202,  202,  202,  203,  203,  203,  203,  203,  204,
      204,  204,  204,  205,  206,  207,  208,  209,  209,  210,
      210,  210,  210,  210,  211,  211,  211,  211,  212,  212,
      213,  214,  214,  214,  214,  214,  215,  215,  215,  215,
      215,  215,  215,  215,  216,  216,  216,  216,  216,  216,
      217,  217,  217,  217,  217,  217,  218,  218,  218,  218,
      218,  218,  219,  219,  219,  219,  219,  219,  219,  219,
      220,  220,  220,  220,  220,  221,  222,  223,  223,  224,
      224,  225,  226,  226,  227,  227
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,   16,   17,   17,   17,   17,   18,   17,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,    5,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    4,    4,    4,
        4,    4,    4,    5,    1,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4
    } ;

static yyconst short int yy_base[595] =
    {   0,
        0,    0, 1276, 1277, 1277, 1277, 1271, 1260,   41,   36,
       45,   51,   57,   63,    0,   74,   66,   69,   68,   90,
       92,  121,   78,   36,  148,   93,  117,  114,  167,  138,
       67,  194,  152,  226,  134,   95,  103,  101, 1269, 1277,
     1258, 1277, 1267,    0,  199,  216,  232,  131,  253,  269,
      274,    0, 1266,    0,  203,  119,  154,  150,  115,  163,
      149,   80, 1255,  191,   49,  164,  157,  108,  279,   81,
      184,  169, 1254,  223,  239,  188,  220,  224,  276,  182,
      237,  241,  245,  295,  258,  288,  118,  289,  296,  233,
      297,  306,  301,  298,  303,  304,  305,  308,  319,  323,

      316,  327,  324,  330,  331,  334,  335,  337,  339,  340,
      341,  356,  352,  344,  342,  186,  345,  360,  348, 1253,
      369,  371,  372,  375,  377,  373,  378,  389,  385,  379,
      390,  403,  407,  392,  393, 1252, 1261, 1277,    0,  421,
     1250,  436,  454,    0, 1259, 1277,    0, 1248,  437,  381,
     1247,  412,  423, 1246,  410,  430,  455,  413, 1245,  456,
      439,  457,  426,  427,  428,  458,  459, 1244,  460,  464,
      467,  469,  471,  473,  474,  476,  475,  478,  477,  481,
      480,  483,  486,  494,  501,  499,  506,  503,  505,  507,
      508, 1243,  510,  513,  514,  517,  515, 1242, 1241, 1240,

     1239, 1238, 1237,  511, 1236, 1235,  516,  519, 1234,  548,
      522,  525,  526,  537, 1233, 1232, 1231,  528,  550,  553,
      562, 1230, 1229,  563,  542, 1228,  541,  566,  567,  568,
      569,  573,  574,  570, 1227, 1226, 1225,  575, 1224, 1223,
      576, 1222, 1221,  585,  588,  590,  592,  597,  593,  600,
      572, 1220,  601,  603, 1277,  612,  632,  636,  640,  645,
      623,  647,  530,  648, 1219,  649,  612,  605, 1218,  650,
      651,  652,  613,  653,  655,  654,  656,  660,  657,  664,
      604,  672, 1217, 1216,  659,  661,  663,  662, 1215, 1214,
      674,  678,  681, 1213,  677,  692,  693,  694,  695,  696,

      697, 1212, 1211,  698,  702, 1210,  705,  699,  700, 1209,
      701,  711,  703,    0, 1208,  706,  724,  740,  725,  731,
      733,  734, 1207, 1206,  737,  730, 1205,  739,  742,  735,
     1204,  744, 1203, 1202,  746,  750,  753,  754, 1201,  755,
     1200,  756, 1199,  758,  760,  775,  769, 1198, 1197,  773,
      762, 1196,  776, 1195,  778,  782,  783,  784,  785,  617,
      787,  790,  791,  793,  792, 1194,  794, 1193, 1192,  798,
      803,  796,  805,  797,  804, 1191,  808,  809,  816,  818,
     1190,  819,  821,  820,  825,  823,  824,  833,  826,  835,
      839,  840,   59,  719,  841,  842,  844,  845, 1189,  846,

      847,  851,  852, 1188,  850, 1187,  855,  866,  856,  867,
      873,  854,  861,  869,  888,  894, 1186,  874,  880, 1185,
      884,  885,  886, 1184,  890,  891,  892, 1183,  893,  894,
     1182, 1181, 1180,  895,  900, 1179, 1178,  897,  906,  901,
     1177,  908, 1176, 1175,  905,  909,  915, 1174,  919,  920,
      921, 1173,  922,  923,  924, 1172, 1171, 1170,  704, 1169,
     1168,  927, 1167, 1166,  926,  929,  935,  930,  936,  937,
     1165,  941,  945, 1164, 1163,  946,  947,  949,  951,  953,
     1162,  956,  957,  958,  959,  960, 1161,  961,  962,  972,
      975, 1160,  977,  978, 1159,  980,  983,  984,  985,  987,

     1158,  986,  990, 1157,  991,  993,  997,  998, 1156, 1004,
     1000, 1001, 1155, 1154, 1153, 1137, 1125, 1005, 1124, 1012,
     1007, 1006, 1019, 1122, 1023, 1024, 1013, 1121, 1028, 1120,
     1119, 1029, 1032, 1033, 1034, 1117, 1036, 1037, 1038, 1039,
     1041, 1040, 1043, 1116, 1045, 1048, 1050, 1053, 1054, 1115,
     1058, 1059, 1066, 1067, 1068, 1114, 1062, 1071, 1073, 1074,
     1076, 1113, 1080, 1077, 1075, 1079, 1081, 1086, 1087, 1112,
     1090, 1094, 1088, 1099, 1107, 1106, 1105, 1100,  992, 1101,
      346,  259, 1104,  256, 1277, 1140, 1142, 1145, 1149, 1152,
     1156,  235, 1161,  165

    } ;

static yyconst short int yy_def[595] =
    {   0,
      585,    1,  585,  585,  585,  585,  586,  587,  588,  585,
      587,  587,  587,  587,  589,  590,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  586,  585,
      587,  585,  591,  592,  585,  585,  587,  587,  587,  587,
      587,  589,  593,  594,  585,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  585,  591,  585,  592,  585,
      587,  587,  587,   51,  593,  585,  594,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,   51,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  585,  585,  585,  585,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  210,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  585,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  585,  585,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  585,  585,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,    0,  585,  585,  585,  585,  585,
      585,  585,  585,  585

    } ;

static yyconst short int yy_nxt[1322] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,   16,    8,    8,    8,   17,
       18,   19,   20,   21,   22,   23,   24,   25,    8,   26,
       27,   28,   29,   30,    8,   31,   32,   33,   34,   35,
       36,   37,    8,   38,   43,   46,   46,   46,   46,   42,
       45,   45,   45,   45,   47,   47,   47,   47,   42,   48,
      393,  394,   42,   83,   42,   49,   50,   50,   50,   50,
       42,   49,   50,   50,   50,   50,   42,   53,  158,   42,
       42,   42,   42,   55,   55,   55,   55,   65,   56,   66,
      106,   42,   61,   42,   42,   57,   62,   58,   51,   59,

       67,   81,   60,   42,   63,   42,   42,   82,   42,   68,
      166,   64,   87,   69,   42,  133,   42,  156,  132,   70,
       88,   42,   71,   72,  135,   89,   73,   42,   42,   90,
       42,   42,   42,   74,   42,  134,   91,   94,  186,  141,
       75,  148,   76,   77,   42,  162,   95,   42,  152,   92,
       78,   42,   96,  130,   79,   93,   80,   84,   84,   84,
       84,   42,   42,   42,  103,   42,  131,   42,  147,   85,
       42,  118,  151,  104,  155,  105,   42,   42,  119,   86,
       42,  149,   42,  150,  120,  159,  160,  121,  161,  153,
       97,  168,   98,  154,  122,   42,   99,   42,  100,   42,

      101,   42,  102,  107,   42,  177,  226,   42,   45,   45,
       45,   45,   55,   55,   55,   55,  108,  109,  172,  110,
      111,  112,  167,  113,  140,   46,   46,   46,   46,  114,
      157,  115,  116,   42,  117,  107,   42,   42,  139,   42,
       49,   47,   47,   47,   47,   42,   42,  173,  123,  124,
       42,  125,   42,  126,   42,  127,  174,  128,   42,  189,
      169,  129,  142,  142,  142,  142,   42,  180,  170,   42,
      143,   42,   42,  179,  178,  171,  143,   49,   50,   50,
       50,   50,   42,  144,  144,  144,  144,   42,  181,   42,
      144,  144,   42,  144,  144,  144,  144,  144,  144,  175,

      163,   42,   42,  164,   84,   84,   84,   84,   42,   42,
       42,   42,  165,  176,   42,  188,   42,   42,   42,   42,
      187,   42,  194,  182,  183,  184,  190,  185,  191,   42,
      192,  199,   42,  197,  193,  204,   42,   42,  195,  198,
       42,  196,  201,   42,   42,  200,  203,   42,   42,  205,
       42,  206,   42,   42,   42,   42,  202,   42,   42,   42,
      212,   42,  207,  215,  211,   42,  208,  224,  213,   42,
      217,  209,  227,   42,  225,  222,  210,  216,  219,  218,
      214,  220,   42,  230,   42,   42,   42,  228,   42,  223,
       42,   42,   42,  221,   42,  229,  231,  247,   42,  234,

      236,  239,   42,   42,  233,   42,   42,  232,  246,  235,
      238,  241,  242,  263,  237,  240,   42,  248,  251,  249,
       42,  243,  250,   42,  244,   42,   42,  252,  253,  245,
      256,  256,  256,  256,  254,  264,   42,  266,  257,   42,
       42,   42,  269,   42,  257,  142,  142,  142,  142,   42,
       42,  267,   42,  143,  274,  273,  261,  275,  265,  143,
      258,  259,  262,  260,  260,  260,  260,   42,   42,   42,
       42,   42,   42,   42,  268,  271,  272,   42,  270,  278,
       42,  276,   42,  279,   42,  277,   42,   42,   42,   42,
       42,   42,  285,   42,   42,  280,   42,  292,  289,   42,

      281,  291,  283,  293,  282,  290,  295,   42,  287,  296,
      284,  288,   42,  294,   42,  286,   42,  297,   42,   42,
       42,   42,  300,   42,   42,  302,   42,   42,   42,   42,
       42,  298,   42,  299,  301,   42,  304,  308,   42,   42,
      303,   42,  307,   42,  310,  311,  305,  306,  309,  317,
       42,  350,  319,  312,   42,   42,  313,  314,  314,  314,
      314,  315,  316,   42,  314,  314,   42,  314,  314,  314,
      314,  314,  314,  320,  318,   42,   42,  325,  326,   42,
       42,   42,   42,   42,  321,   42,   42,   42,   42,   42,
      344,  329,  328,  323,  322,  327,  331,  333,   42,  336,

      324,   42,  330,   42,  332,   42,   42,  335,  337,  334,
       42,  340,  342,   42,   42,  338,   42,   42,   42,  341,
      339,  256,  256,  256,  256,   42,   42,  366,  343,  257,
       42,  353,  358,  345,  354,  257,   42,  425,  258,  258,
      346,  347,  347,  347,  347,  347,  347,  347,  347,  260,
      260,  260,  260,   42,  260,  260,  260,  260,   42,  348,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,  355,   42,   42,   42,   42,   42,   42,  349,  351,
      352,  357,  360,  365,  359,   42,  362,   42,  356,  363,
       42,   42,  364,  367,   42,  361,  368,  374,  369,  370,

      372,  371,  376,  373,  375,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
      393,  394,  496,  380,   42,  381,  379,  377,  378,  382,
      383,  384,  385,  391,  389,  390,  386,   42,   42,  388,
      387,  393,  394,   42,   42,  392,   42,   42,   42,  395,
       42,  400,   42,   42,  396,   42,  397,   42,  398,   42,
      399,  402,  401,   42,  403,  404,   42,   42,   42,   42,
      405,   42,  407,   42,  406,   42,  415,  416,  347,  347,
      347,  347,  411,  413,  418,  408,   42,  414,   42,   42,
      409,   42,  417,  410,  412,   42,   42,   42,   42,  420,

       42,  421,  422,   42,   42,   42,   42,   42,  424,   42,
       42,   42,  419,  430,  428,  431,   42,   42,   42,  423,
      426,   42,   42,  427,  429,  432,  436,  434,  435,   42,
      433,   42,   42,   42,   42,  437,   42,   42,   42,   42,
      439,  441,  443,  444,  445,  438,   42,  449,   42,  440,
      442,  447,   42,   42,   42,   42,  448,   42,   42,   42,
       42,  446,  450,   42,   42,   42,  454,   42,   42,   42,
      453,  451,  457,  459,   42,  460,  462,  452,  456,   42,
       42,  464,   42,  461,  458,  455,   42,   42,  463,  415,
      416,  467,  466,   42,  465,  415,  416,   42,   42,   42,

      469,  470,  468,   42,   42,   42,   42,   42,   42,  474,
       42,  478,  479,   42,   42,  472,  481,  471,   42,   42,
      483,   42,   42,  476,  477,  484,  475,  473,   42,  486,
      482,  480,   42,   42,   42,   42,   42,   42,  485,   42,
       42,  487,   42,   42,  488,  493,  489,  494,   42,   42,
       42,  491,  492,  497,   42,  498,  490,  500,   42,   42,
       42,  495,   42,  502,   42,  499,   42,  501,  503,   42,
       42,   42,   42,   42,   42,   42,  510,  505,  504,  511,
      509,  506,  507,  515,  517,   42,  512,  513,   42,  508,
       42,   42,  516,   42,  514,  518,   42,   42,   42,   42,

       42,  521,  523,   42,   42,   42,   42,  524,  526,  522,
       42,   42,  519,   42,   42,  528,  520,   42,   42,   42,
       42,  532,  525,  527,  535,   42,   42,  536,  538,  529,
      530,  534,   42,  533,  531,  537,   42,   42,  539,  540,
      543,   42,   42,  542,  541,   42,   42,   42,  545,   42,
       42,   42,   42,   42,   42,  546,   42,  549,   42,  551,
      553,   42,  555,   42,  548,  544,   42,   42,  552,  554,
      547,   42,   42,  556,  550,   42,  559,  561,  557,   42,
       42,   42,  562,  558,   42,  566,   42,   42,   42,   42,
       42,  560,   42,   42,   42,  563,  564,  565,  572,   42,

       42,   42,  573,   42,  568,  570,  569,   42,  567,  571,
      574,  578,   42,   42,   42,  579,  575,   42,   42,   42,
       42,  582,  577,  576,  583,   42,   42,   42,   42,   42,
       42,  580,   42,   42,   42,   42,  581,   42,   42,  584,
       39,   39,   39,   39,   39,   41,   41,   44,   44,   52,
       42,   52,   52,   52,   54,   54,  137,  137,  137,  137,
      137,  145,  145,  145,  145,  145,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  146,   42,  138,  255,   42,   42,   42,  146,
      138,   42,  136,   42,   40,  585,    3,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585
    } ;

static yyconst short int yy_chk[1322] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,   10,   10,   10,   10,   24,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   12,
      393,  393,   65,   24,   12,   13,   13,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   16,   65,   17,
       31,   19,   18,   16,   16,   16,   16,   19,   17,   19,
       31,   23,   18,   62,   70,   17,   18,   17,   13,   17,

       19,   23,   17,   20,   18,   21,   26,   23,   36,   20,
       70,   18,   26,   20,   38,   37,   37,   62,   36,   20,
       26,   68,   20,   21,   38,   26,   21,   28,   59,   26,
       27,   87,   56,   21,   22,   37,   27,   28,   87,   48,
       22,   56,   22,   22,   48,   68,   28,   35,   59,   27,
       22,   30,   28,   35,   22,   27,   22,   25,   25,   25,
       25,   25,   61,   58,   30,   33,   35,   57,  594,   25,
       67,   33,   58,   30,   61,   30,   60,   66,   33,   25,
       29,   57,   72,   57,   33,   66,   67,   33,   67,   60,
       29,   72,   29,   60,   33,   80,   29,   71,   29,  116,

       29,   76,   29,   32,   64,   80,  116,   32,   45,   45,
       45,   45,   55,   55,   55,   55,   32,   32,   76,   32,
       32,   32,   71,   32,   46,   46,   46,   46,   46,   32,
       64,   32,   32,   77,   32,   34,   74,   78,  592,   34,
       47,   47,   47,   47,   47,   47,   90,   77,   34,   34,
       81,   34,   75,   34,   82,   34,   78,   34,   83,   90,
       74,   34,   49,   49,   49,   49,   49,   83,   75,  584,
       49,   85,  582,   82,   81,   75,   49,   50,   50,   50,
       50,   50,   50,   51,   51,   51,   51,   51,   85,   79,
       51,   51,   69,   51,   51,   51,   51,   51,   51,   79,

       69,   86,   88,   69,   84,   84,   84,   84,   84,   89,
       91,   94,   69,   79,   93,   89,   95,   96,   97,   92,
       88,   98,   95,   86,   86,   86,   91,   86,   92,  101,
       93,   98,   99,   96,   94,  101,  100,  103,   95,   97,
      102,   95,   99,  104,  105,   98,  100,  106,  107,  102,
      108,  103,  109,  110,  111,  115,   99,  114,  117,  581,
      109,  119,  104,  110,  108,  113,  105,  114,  109,  112,
      111,  106,  117,  118,  115,  113,  107,  110,  112,  111,
      109,  112,  121,  119,  122,  123,  126,  118,  124,  113,
      125,  127,  130,  112,  150,  118,  121,  130,  129,  123,

      125,  127,  128,  131,  122,  134,  135,  121,  129,  124,
      126,  128,  128,  150,  125,  127,  132,  131,  133,  131,
      133,  128,  132,  155,  128,  152,  158,  134,  135,  128,
      140,  140,  140,  140,  135,  152,  153,  155,  140,  163,
      164,  165,  158,  156,  140,  142,  142,  142,  142,  142,
      149,  156,  161,  142,  164,  163,  149,  165,  153,  142,
      143,  143,  149,  143,  143,  143,  143,  143,  157,  160,
      162,  166,  167,  169,  157,  161,  162,  170,  160,  167,
      171,  166,  172,  169,  173,  166,  174,  175,  177,  176,
      179,  178,  174,  181,  180,  169,  182,  179,  177,  183,

      170,  178,  172,  180,  171,  177,  182,  184,  176,  183,
      173,  176,  186,  181,  185,  175,  188,  184,  189,  187,
      190,  191,  186,  193,  204,  188,  194,  195,  197,  207,
      196,  184,  208,  185,  187,  211,  190,  195,  212,  213,
      189,  218,  194,  263,  197,  204,  191,  193,  196,  213,
      214,  263,  218,  207,  227,  225,  208,  210,  210,  210,
      210,  211,  212,  219,  210,  210,  220,  210,  210,  210,
      210,  210,  210,  219,  214,  221,  224,  225,  227,  228,
      229,  230,  231,  234,  220,  251,  232,  233,  238,  241,
      251,  230,  229,  224,  221,  228,  232,  233,  244,  241,

      224,  245,  231,  246,  232,  247,  249,  238,  244,  234,
      248,  247,  249,  250,  253,  245,  254,  281,  268,  248,
      246,  256,  256,  256,  256,  267,  273,  281,  250,  256,
      360,  267,  273,  253,  268,  256,  261,  360,  257,  257,
      254,  257,  257,  257,  257,  258,  258,  258,  258,  259,
      259,  259,  259,  259,  260,  260,  260,  260,  260,  261,
      262,  264,  266,  270,  271,  272,  274,  276,  275,  277,
      279,  270,  285,  278,  286,  288,  287,  280,  262,  264,
      266,  272,  275,  280,  274,  282,  277,  291,  271,  278,
      295,  292,  279,  282,  293,  276,  285,  292,  286,  287,

      288,  287,  295,  291,  293,  296,  297,  298,  299,  300,
      301,  304,  308,  309,  311,  305,  313,  459,  307,  316,
      394,  394,  459,  299,  312,  300,  298,  296,  297,  301,
      304,  305,  307,  316,  312,  313,  308,  317,  319,  311,
      309,  318,  318,  326,  320,  317,  321,  322,  330,  319,
      325,  326,  328,  318,  320,  329,  321,  332,  322,  335,
      325,  329,  328,  336,  330,  332,  337,  338,  340,  342,
      335,  344,  337,  345,  336,  351,  346,  346,  347,  347,
      347,  347,  344,  345,  351,  338,  350,  345,  346,  353,
      340,  355,  350,  342,  344,  356,  357,  358,  359,  355,

      361,  356,  357,  362,  363,  365,  364,  367,  359,  372,
      374,  370,  353,  365,  363,  367,  371,  375,  373,  358,
      361,  377,  378,  362,  364,  370,  374,  372,  373,  379,
      371,  380,  382,  384,  383,  375,  386,  387,  385,  389,
      378,  380,  383,  384,  385,  377,  388,  389,  390,  379,
      382,  387,  391,  392,  395,  396,  388,  397,  398,  400,
      401,  386,  390,  405,  402,  403,  396,  412,  407,  409,
      395,  391,  400,  402,  413,  403,  407,  392,  398,  408,
      410,  409,  414,  405,  401,  397,  411,  418,  408,  415,
      415,  412,  411,  419,  410,  416,  416,  421,  422,  423,

      414,  418,  413,  425,  426,  427,  429,  430,  434,  423,
      438,  429,  429,  435,  440,  421,  434,  419,  445,  439,
      438,  442,  446,  426,  427,  439,  425,  422,  447,  442,
      435,  430,  449,  450,  451,  453,  454,  455,  440,  465,
      462,  445,  466,  468,  446,  453,  447,  454,  467,  469,
      470,  450,  451,  462,  472,  465,  449,  467,  473,  476,
      477,  455,  478,  469,  479,  466,  480,  468,  470,  482,
      483,  484,  485,  486,  488,  489,  480,  473,  472,  482,
      479,  476,  477,  486,  489,  490,  483,  484,  491,  478,
      493,  494,  488,  496,  485,  490,  497,  498,  499,  502,

      500,  494,  497,  503,  505,  579,  506,  498,  500,  496,
      507,  508,  491,  511,  512,  503,  493,  510,  518,  522,
      521,  508,  499,  502,  512,  520,  527,  518,  521,  505,
      506,  511,  523,  510,  507,  520,  525,  526,  522,  523,
      527,  529,  532,  526,  525,  533,  534,  535,  532,  537,
      538,  539,  540,  542,  541,  533,  543,  537,  545,  539,
      541,  546,  543,  547,  535,  529,  548,  549,  540,  542,
      534,  551,  552,  545,  538,  557,  548,  551,  546,  553,
      554,  555,  552,  547,  558,  557,  559,  560,  565,  561,
      564,  549,  566,  563,  567,  553,  554,  555,  564,  568,

      569,  573,  565,  571,  559,  561,  560,  572,  558,  563,
      566,  571,  574,  578,  580,  572,  567,  583,  577,  576,
      575,  578,  569,  568,  580,  570,  562,  556,  550,  544,
      536,  573,  531,  530,  528,  524,  574,  519,  517,  583,
      586,  586,  586,  586,  586,  587,  587,  588,  588,  589,
      516,  589,  589,  589,  590,  590,  591,  591,  591,  591,
      591,  593,  593,  593,  593,  593,  515,  514,  513,  509,
      504,  501,  495,  492,  487,  481,  475,  474,  471,  464,
      463,  461,  460,  458,  457,  456,  452,  448,  444,  443,
      441,  437,  436,  433,  432,  431,  428,  424,  420,  417,

      406,  404,  399,  381,  376,  369,  368,  366,  354,  352,
      349,  348,  343,  341,  339,  334,  333,  331,  327,  324,
      323,  315,  310,  306,  303,  302,  294,  290,  289,  284,
      283,  269,  265,  252,  243,  242,  240,  239,  237,  236,
      235,  226,  223,  222,  217,  216,  215,  209,  206,  205,
      203,  202,  201,  200,  199,  198,  192,  168,  159,  154,
      151,  148,  145,  141,  137,  136,  120,   73,   63,   53,
       43,   41,   39,    8,    7,    3,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
#define INITIAL 0
/*===-- Lexer.l - Scanner for llvm assembly files --------------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by the LLVM research group and is distributed under
// the University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM assembly languages files.
//
//===----------------------------------------------------------------------===*/
#define YY_NEVER_INTERACTIVE 1
#line 28 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
#include "ParserInternals.h"
#include "llvm/Module.h"
#include "llvm/Support/MathExtras.h"
#include <list>
#include "llvmAsmParser.h"
#include <cctype>
#include <cstdlib>

void set_scan_file(FILE * F){
  yy_switch_to_buffer(yy_create_buffer( F, YY_BUF_SIZE ) );
}
void set_scan_string (const char * str) {
  yy_scan_string (str);
}

// Construct a token value for a non-obsolete token
#define RET_TOK(type, Enum, sym) \
  llvmAsmlval.type = Instruction::Enum; \
  return sym

// Construct a token value for an obsolete token
#define RET_TY(CTYPE, SYM) \
  llvmAsmlval.PrimType = CTYPE;\
  return SYM

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size


// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  return BitsToDouble(HexIntToVal(Buffer));   // Cast Hex constant to double
}


// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.
char *UnEscapeLexed(char *Buffer, char* EndBuffer) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\') {
      if (BIn < EndBuffer-1 && BIn[1] == '\\') {
        *BOut++ = '\\'; // Two \ becomes one
        BIn += 2;
      } else if (BIn < EndBuffer-2 && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
        char Tmp = BIn[3]; BIn[3] = 0;      // Terminate string
        *BOut = (char)strtol(BIn+1, 0, 16); // Convert to number
        BIn[3] = Tmp;                       // Restore character
        BIn += 3;                           // Skip over handled chars
        ++BOut;
      } else {
        *BOut++ = *BIn++;
      }
    } else {
      *BOut++ = *BIn++;
    }
  }
  return BOut;
}

} // End llvm namespace

using namespace llvm;

#define YY_NEVER_INTERACTIVE 1
/* Comments start with a ; and go till end of line */
/* Local Values and Type identifiers start with a % sign */
/* Global Value identifiers start with an @ sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* LocalVarID/GlobalVarID: match an unnamed local variable slot ID. */
/* Integer types are specified with i and a bitwidth */
/* E[PN]Integer: match positive and negative literal integer values. */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
/* WSNL - shorthand for newline followed by whitespace */
#line 1053 "Lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static inline void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 182 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"


#line 1207 "Lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 586 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 585 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 184 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 186 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 187 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 188 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 189 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 190 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 191 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return DEFINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 192 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return GLOBAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 193 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return CONSTANT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 194 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return INTERNAL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 195 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return LINKONCE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 196 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return WEAK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 197 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return APPENDING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 198 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 199 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 200 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return HIDDEN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 201 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return PROTECTED; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 202 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 203 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 204 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return THREAD_LOCAL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 205 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 206 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 207 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return UNDEF; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 208 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 209 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return TO; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 210 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return TAIL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 211 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return TARGET; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 212 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return TRIPLE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 213 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 214 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return DATALAYOUT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 215 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return VOLATILE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 216 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ALIGN;  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 217 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return SECTION; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 218 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ALIAS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 219 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return MODULE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 220 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 221 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 223 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return CC_TOK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 224 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 225 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 226 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 227 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return X86_STDCALLCC_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 228 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return X86_FASTCALLCC_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 230 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return SIGNEXT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 231 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ZEROEXT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 232 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return INREG; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 233 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return SRET;  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 234 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return NOUNWIND; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 235 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return NORETURN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 236 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return NOALIAS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 237 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return BYVAL; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 238 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return NEST; }
	YY_BREAK
case 53:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 239 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ // For auto-upgrade only, drop in LLVM 3.0 
                  return SIGNEXT; } 
	YY_BREAK
case 54:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 241 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ // For auto-upgrade only, drop in LLVM 3.0
                  return ZEROEXT; } 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 244 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TY(Type::VoidTy,  VOID);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 245 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TY(Type::FloatTy, FLOAT); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 246 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TY(Type::DoubleTy,DOUBLE);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 247 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TY(Type::LabelTy, LABEL); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 248 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return TYPE;   }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 249 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return OPAQUE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 250 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ uint64_t NumBits = atoull(yytext+1);
                  if (NumBits < IntegerType::MIN_INT_BITS || 
                      NumBits > IntegerType::MAX_INT_BITS)
                    GenerateError("Bitwidth for integer type out of range!");
                  const Type* Ty = IntegerType::get(NumBits);
                  RET_TY(Ty, INTTYPE);
                }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 258 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Add, ADD); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 259 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Sub, SUB); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 260 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Mul, MUL); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 261 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, UDiv, UDIV); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 262 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SDiv, SDIV); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 263 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FDiv, FDIV); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 264 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, URem, UREM); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 265 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SRem, SREM); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 266 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FRem, FREM); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 267 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Shl, SHL); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 268 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, LShr, LSHR); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 269 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, AShr, ASHR); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 270 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, And, AND); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 271 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Or , OR ); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 272 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Xor, XOR); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 273 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  ICmp,  ICMP); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 274 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  FCmp,  FCMP); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 276 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return EQ;  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 277 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return NE;  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 278 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return SLT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 279 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return SGT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 280 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return SLE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 281 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return SGE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 282 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ULT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 283 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return UGT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 284 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ULE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 285 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return UGE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 286 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return OEQ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 287 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ONE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 288 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return OLT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 289 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return OGT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 290 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return OLE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 291 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return OGE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 292 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return ORD; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 293 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return UNO; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 294 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return UEQ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 295 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return UNE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 297 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, PHI, PHI_TOK); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 298 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Call, CALL); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 299 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, Trunc, TRUNC); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 300 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, ZExt, ZEXT); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 301 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SExt, SEXT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 302 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPTrunc, FPTRUNC); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 303 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPExt, FPEXT); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 304 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, UIToFP, UITOFP); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 305 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SIToFP, SITOFP); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 306 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToUI, FPTOUI); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 307 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToSI, FPTOSI); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 308 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, IntToPtr, INTTOPTR); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 309 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, PtrToInt, PTRTOINT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 310 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, BitCast, BITCAST); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 311 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Select, SELECT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 312 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 313 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Ret, RET); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 314 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Br, BR); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 315 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Switch, SWITCH); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 316 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Invoke, INVOKE); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 317 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unwind, UNWIND); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 318 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unreachable, UNREACHABLE); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 320 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Malloc, MALLOC); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 321 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Alloca, ALLOCA); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 322 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Free, FREE); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 323 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Load, LOAD); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 324 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Store, STORE); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 325 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, GetElementPtr, GETELEMENTPTR); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 327 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ExtractElement, EXTRACTELEMENT); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 328 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, InsertElement, INSERTELEMENT); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 329 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ShuffleVector, SHUFFLEVECTOR); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 332 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                  llvmAsmlval.StrVal = new std::string(yytext+1);   // Skip %
                  return LOCALVAR;
                }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 336 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                  llvmAsmlval.StrVal = new std::string(yytext+1);   // Skip @
                  return GLOBALVAR;
                }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 340 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                  yytext[yyleng-1] = 0;            // nuke colon
                  llvmAsmlval.StrVal = new std::string(yytext);
                  return LABELSTR;
                }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 345 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                  yytext[yyleng-2] = 0;  // nuke colon, end quote
                  const char* EndChar = UnEscapeLexed(yytext+1, yytext+yyleng);
                  llvmAsmlval.StrVal = 
                    new std::string(yytext+1, EndChar - yytext - 1);
                  return LABELSTR;
                }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 353 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ yytext[yyleng-1] = 0;           // nuke end quote
                   const char* EndChar = UnEscapeLexed(yytext+1, yytext+yyleng);
                   llvmAsmlval.StrVal = 
                     new std::string(yytext+1, EndChar - yytext - 1);
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 359 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                     yytext[yyleng-1] = 0;         // nuke end quote
                     const char* EndChar = 
                       UnEscapeLexed(yytext+2, yytext+yyleng);
                     llvmAsmlval.StrVal = 
                       new std::string(yytext+2, EndChar - yytext - 2);
                     return ATSTRINGCONSTANT;
                   }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 367 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                     yytext[yyleng-1] = 0;           // nuke end quote
                     const char* EndChar = 
                       UnEscapeLexed(yytext+2, yytext+yyleng);
                     llvmAsmlval.StrVal = 
                       new std::string(yytext+2, EndChar - yytext - 2);
                     return PCTSTRINGCONSTANT;
                   }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 375 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ 
                  uint32_t numBits = ((yyleng * 64) / 19) + 1;
                  APInt Tmp(numBits, yytext, yyleng, 10);
                  uint32_t activeBits = Tmp.getActiveBits();
                  if (activeBits > 0 && activeBits < numBits)
                    Tmp.trunc(activeBits);
                  if (Tmp.getBitWidth() > 64) {
                    llvmAsmlval.APIntVal = new APInt(Tmp);
                    return EUAPINTVAL; 
                  } else {
                    llvmAsmlval.UInt64Val = Tmp.getZExtValue();
                    return EUINT64VAL;
                  }
                }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 389 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                  uint32_t numBits = (((yyleng-1) * 64) / 19) + 2;
                  APInt Tmp(numBits, yytext, yyleng, 10);
                  uint32_t minBits = Tmp.getMinSignedBits();
                  if (minBits > 0 && minBits < numBits)
                    Tmp.trunc(minBits);
                  if (Tmp.getBitWidth() > 64) {
                    llvmAsmlval.APIntVal = new APInt(Tmp);
                    return ESAPINTVAL;
                  } else {
                    llvmAsmlval.SInt64Val = Tmp.getSExtValue();
                    return ESINT64VAL;
                  }
                }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 404 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ int len = yyleng - 3;
                   uint32_t bits = len * 4;
                   APInt Tmp(bits, yytext+3, len, 16);
                   uint32_t activeBits = Tmp.getActiveBits();
                   if (activeBits > 0 && activeBits < bits)
                     Tmp.trunc(activeBits);
                   if (Tmp.getBitWidth() > 64) {
                     llvmAsmlval.APIntVal = new APInt(Tmp);
                     return yytext[0] == 's' ? ESAPINTVAL : EUAPINTVAL;
                   } else if (yytext[0] == 's') {
                     llvmAsmlval.SInt64Val = Tmp.getSExtValue();
                     return ESINT64VAL;
                   } else {
                     llvmAsmlval.UInt64Val = Tmp.getZExtValue();
                     return EUINT64VAL;
                   }
                 }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 422 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return LOCALVAL_ID;
                }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 429 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return GLOBALVAL_ID;
                }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 437 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = atof(yytext); return FPVAL; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 438 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = HexToFP(yytext); return FPVAL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 440 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  yy_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 448 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 449 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 451 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2141 "Lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 586 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 586 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 585);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static inline void yyunput( int c, register char *yy_bp )
#else
static inline void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static inline void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static inline void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 451 "/proj/llvm/head/llvm/lib/AsmParser/Lexer.l"

