#define yy_create_buffer llvmAsm_create_buffer
#define yy_delete_buffer llvmAsm_delete_buffer
#define yy_scan_buffer llvmAsm_scan_buffer
#define yy_scan_string llvmAsm_scan_string
#define yy_scan_bytes llvmAsm_scan_bytes
#define yy_flex_debug llvmAsm_flex_debug
#define yy_init_buffer llvmAsm_init_buffer
#define yy_flush_buffer llvmAsm_flush_buffer
#define yy_load_buffer_state llvmAsm_load_buffer_state
#define yy_switch_to_buffer llvmAsm_switch_to_buffer
#define yyin llvmAsmin
#define yyleng llvmAsmleng
#define yylex llvmAsmlex
#define yyout llvmAsmout
#define yyrestart llvmAsmrestart
#define yytext llvmAsmtext
#define yylineno llvmAsmlineno

#line 20 "Lexer.cpp"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE (16384*64)

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static inline void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 135
#define YY_END_OF_BUFFER 136
static yyconst short int yy_acclist[216] =
    {   0,
      136,  134,  135,  133,  134,  135,  133,  135,  134,  135,
      134,  135,  134,  135,  134,  135,  134,  135,  134,  135,
      126,  134,  135,  126,  134,  135,    1,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  134,  135,  134,  135,  134,
      135,  134,  135,  134,  135,  124,  122,  120,  129,  127,
      131,  126,    1,  121,  130,  106,   35,   69,   51,   70,
       65,   23,  124,  120,  131,   20,  131,  132,  125,  121,

       52,   64,   33,   36,    3,   54,   79,   84,   82,   83,
       81,   80,   85,   89,  105,   74,   72,   61,   73,   71,
       53,   87,   78,   76,   77,   75,   88,   86,   66,  123,
      131,  131,   63,   90,   68,   57,  113,   60,   67,  114,
       62,   22,  128,   56,   93,   59,   42,   24,    4,   49,
       55,   58,   45,   12,   92,  131,   30,    2,    5,   46,
       95,   41,   48,  115,   91,   21,  112,   38,    7,   47,
       37,   99,   98,    8,   16,  108,  111,   32,   50,  103,
       97,  107,   25,   26,   96,  109,  104,  102,    6,   27,
       94,   31,    9,   18,   10,  100,   11,   44,   43,  101,

       29,   13,   15,   14,   28,   34,   17,  110,  116,  118,
      119,   39,  117,   40,   19
    } ;

static yyconst short int yy_accept[540] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   24,   27,   30,   32,   34,   36,   38,
       40,   42,   44,   46,   48,   50,   52,   54,   56,   58,
       60,   62,   64,   66,   68,   70,   72,   74,   76,   76,
       77,   77,   78,   79,   80,   80,   81,   81,   82,   83,
       83,   84,   84,   85,   86,   86,   86,   86,   86,   86,
       86,   86,   87,   87,   88,   88,   88,   88,   88,   88,
       88,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   91,   91,   91,   91,   91,   91,   91,   91,

       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   94,   95,   96,   97,   98,   98,   99,   99,
      100,  101,  102,  102,  102,  103,  103,  103,  104,  104,
      104,  104,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  107,  107,  107,  107,  108,
      109,  110,  111,  112,  113,  113,  114,  115,  115,  116,

      116,  116,  116,  116,  116,  117,  118,  119,  119,  119,
      119,  120,  121,  121,  121,  122,  122,  122,  122,  122,
      122,  122,  122,  123,  124,  125,  125,  126,  127,  127,
      128,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,  130,  130,  131,  132,  132,  132,  132,  133,  133,
      133,  133,  134,  134,  134,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  136,
      137,  137,  137,  137,  137,  138,  139,  139,  139,  139,
      140,  140,  140,  140,  140,  140,  140,  140,  141,  142,
      142,  142,  142,  142,  143,  143,  143,  144,  145,  145,

      145,  146,  146,  146,  146,  147,  148,  148,  148,  149,
      149,  149,  150,  150,  151,  152,  152,  152,  152,  152,
      153,  153,  154,  154,  155,  155,  155,  156,  157,  158,
      158,  158,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  160,  160,  161,  162,  162,
      162,  162,  162,  162,  162,  163,  163,  163,  163,  163,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  165,  165,  165,  165,  166,  166,  167,
      167,  167,  167,  167,  167,  167,  167,  168,  168,  168,
      169,  169,  169,  169,  170,  170,  170,  170,  171,  171,

      171,  172,  173,  174,  174,  174,  175,  176,  176,  176,
      176,  177,  177,  178,  179,  179,  179,  180,  180,  180,
      181,  181,  181,  182,  183,  184,  185,  186,  186,  187,
      188,  188,  188,  188,  188,  188,  189,  189,  189,  190,
      191,  191,  191,  191,  191,  191,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  194,  194,  194,  194,  194,  195,
      195,  195,  195,  196,  197,  198,  199,  200,  201,  201,
      201,  201,  202,  202,  202,  202,  203,  203,  204,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      206,  206,  206,  206,  206,  206,  207,  207,  207,  207,
      207,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  210,  211,
      212,  212,  213,  213,  214,  215,  215,  216,  216
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,   16,   17,   17,   17,   17,   18,   17,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,    5,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    4,    4,    4,
        4,    4,    4,    5,    1,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4
    } ;

static yyconst short int yy_base[547] =
    {   0,
        0,    0, 1175, 1176, 1176, 1176, 1170, 1159,   35,   39,
       43,   49,   55,   61,    0,   72,   64,   67,   66,   86,
       76,  106,   91,   65,  133,  121,  117,   99,  152,   95,
       78,  179,  137,  211,  139,   90,  148,   93, 1168, 1176,
     1157, 1176,    0,   49,  185,  217,  116,  238,  254,  259,
        0, 1166,    0,  200,  125,  149,  146,  153,  177,   63,
      154, 1155,  160,  161,  208,  185,  264,  171,  113,  210,
     1154,  222,  260,  228,  186,  261,  271,  110,  273,  274,
      230,  289,  277,  278,  150,  290,  241,  205,  282,  231,
      291, 1153,  292,  296,  299,  303,  305,  306,  318,  310,

      309,  311,  321,  322,  325,  326,  328,  330,  332,  337,
      343,  340,  344,  335,  348, 1152,  357,  358,  360,  363,
      365,  364,  366,  377,  369,  331,  367,  385,  394,  373,
      380, 1151,    0,  413, 1150,  428,  446,    0, 1159, 1176,
        0, 1148,  232,  397, 1147,  393,  398, 1146,  400,  405,
      406, 1145,  421,  418,  401,  415,  419,  434,  437,  429,
     1144,  448,  449,  435,  453,  452,  454,  455,  457,  464,
      456,  461,  462,  465,  467,  480,  482,  469,  484,  486,
      487,  475,  489,  491, 1143,  493,  495,  498, 1142, 1141,
     1140, 1139, 1138, 1137,  499, 1136, 1135,  500, 1134,  529,

      504,  507,  502,  510, 1133, 1132, 1131,  508,  511,  522,
     1130, 1129,  529,  523, 1128,  518,  543,  544,  547,  548,
      550,  549, 1127, 1126, 1125,  551, 1124, 1123,  552, 1122,
     1121,  554,  555,  557,  509,  563,  565,  561,  568, 1120,
      577,  578, 1176,  583,  592,  601,  607,  612,  583,  584,
      595, 1119,  614,  615, 1118,  616,  594,  617,  619,  620,
      622,  623,  626,  628,  627,  629,  630,  631, 1117, 1116,
      634,  637,  641,  642, 1115, 1114,  646,  647,  645, 1113,
      648,  650,  652,  654,  656,  659,  657, 1112, 1111,  663,
      665,  668,  669, 1110,  670,  678,    0, 1109,  677,  679,

     1108,  683,  680,  688, 1107, 1106,  693,  698, 1105,  700,
      685, 1104,  704, 1103, 1102,  702,  705,  708,  689, 1101,
      709, 1100,  711, 1099,  715,  718, 1098,  723, 1097,  717,
      724, 1096,  725,  728,  734,  737,  727,  729,  744,  730,
      741,  742,  745,  746, 1095,  747, 1094, 1093,  753,  756,
      757,  758,  760,  759, 1092,  762,  764,  765,  769, 1091,
      766,  772,  771,  773,  774,  783,  778,  787,  789,  791,
      790,  794, 1090,  795,  796,  799, 1089,  797, 1088,  802,
      803,  804,  805,  815,  800,  811, 1087,  818,  822, 1086,
      823,  825,  826, 1085,  827,  828,  830, 1084,  833,  831,

     1083, 1082, 1081,  834,  835, 1080, 1079,  843,  845,  837,
     1078,  840, 1077, 1076,  844,  856, 1075,  857,  858, 1074,
      859,  860, 1073, 1072, 1071, 1070, 1069,  864, 1068, 1067,
      862,  863,  870,  867,  865, 1066,  868,  872, 1065, 1064,
      873,  880,  882,  884,  887, 1063,  888,  885,  889,  890,
      893,  896,  899,  894, 1062,  904,  906,  907,  910,  911,
      915,  917,  919, 1061,  921,  924,  925,  922, 1050,  926,
      927,  928, 1039, 1037, 1036, 1035, 1034, 1033,  929,  936,
      933, 1032,  943,  947,  950, 1031,  934, 1030, 1029,  954,
      952,  937,  955,  957,  956,  959,  963,  966,  967, 1024,

      968,  970,  971,  974,  976, 1022,  978,  977,  979,  981,
     1021,  986,  985,  989,  992, 1018,  990,  994,  998,  999,
     1001, 1003, 1004, 1005, 1008, 1010, 1014,  686,  684,  517,
     1020,  463, 1015,  372,  368, 1019,  279, 1176, 1055, 1057,
      253, 1062, 1065,  212, 1069,  108
    } ;

static yyconst short int yy_def[547] =
    {   0,
      538,    1,  538,  538,  538,  538,  539,  540,  541,  538,
      540,  540,  540,  540,  542,  543,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  539,  538,
      540,  538,  544,  538,  538,  540,  540,  540,  540,  540,
      542,  545,  546,  538,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  538,  544,  538,  540,  540,  540,   50,  545,  538,
      546,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,   50,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  538,  538,  538,  538,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  200,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  538,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,    0,  538,  538,
      538,  538,  538,  538,  538,  538
    } ;

static yyconst short int yy_nxt[1221] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,   16,    8,    8,    8,   17,
       18,   19,   20,   21,   22,   23,   24,   25,    8,   26,
       27,   28,   29,   30,    8,   31,   32,   33,   34,   35,
       36,   37,    8,   38,   44,   44,   44,   44,   45,   45,
       45,   45,   46,   46,   46,   46,   42,   47,   44,   44,
       44,   44,   42,   48,   49,   49,   49,   49,   42,   48,
       49,   49,   49,   49,   42,   52,   42,   42,   42,   42,
       42,   54,   54,   54,   54,   63,   55,   64,  149,   42,
       60,   42,   81,   56,   61,   57,   50,   58,   65,   42,

       59,  103,   62,   42,   42,   66,   42,   70,   42,   67,
       71,  141,   42,  128,   79,   68,  131,   72,   69,   42,
       80,  101,   92,   42,  135,   73,   42,   74,   75,   42,
       42,   93,  102,  170,   42,   76,   89,   94,   42,   77,
       85,   78,   82,   82,   82,   82,   42,  142,   86,   90,
       42,  160,   42,   87,   83,   91,  115,   88,  126,   42,
      129,   42,   42,   42,   84,   42,   42,   42,  145,  116,
      179,  127,  117,   42,   42,   95,  143,   96,  144,  118,
      130,   97,  152,   98,   42,   99,  146,  100,  104,  151,
       42,  150,   42,  134,   45,   45,   45,   45,   42,   42,

      159,  105,  106,  147,  107,  108,  109,  148,  110,   54,
       54,   54,   54,  166,  111,  133,  112,  113,   42,  114,
      104,   42,  155,   42,   42,   48,   46,   46,   46,   46,
       42,  182,  161,  119,  120,   42,  121,  153,  122,  154,
      123,   42,  124,   42,   42,   42,  125,  136,  136,  136,
      136,   42,  173,  184,   42,  137,   43,  249,  165,  162,
      181,  137,   48,   49,   49,   49,   49,   42,  138,  138,
      138,  138,   42,   42,   42,  138,  138,   42,  138,  138,
      138,  138,  138,  138,   42,  156,   42,   42,  157,  163,
       42,   42,   42,  167,  168,   42,  164,  158,   82,   82,

       82,   82,   42,   42,   42,   42,  172,  174,  169,   42,
      171,  183,   42,  175,  176,  177,   42,  178,   42,   42,
      185,  180,   42,   42,   42,  188,  190,  186,  192,  194,
      187,   42,  196,  189,   42,   42,  197,  195,   42,   42,
      191,   42,  193,   42,   42,   42,  198,  202,   42,  235,
       42,  205,  201,   42,  209,  203,   42,   42,  199,  207,
      211,   42,  216,  200,  215,  206,  213,  204,  208,  210,
       42,   42,  214,   42,  212,  217,   42,   42,   42,   42,
       42,   42,   42,  218,  219,   42,   42,  222,  224,  227,
       42,  221,  234,   42,  236,  220,  237,  223,   42,  229,

      230,  226,  225,  228,  238,  239,   42,   42,  240,  231,
       42,   42,  232,   42,   42,  241,  251,  233,   42,   42,
      258,  242,  244,  244,  244,  244,  254,  253,   42,  250,
      245,   42,   42,  252,   42,  255,  245,  136,  136,  136,
      136,   42,   42,  256,  259,  137,  260,   42,   42,  264,
       42,  137,  246,  247,  257,  248,  248,  248,  248,   42,
      262,   42,   42,  261,  263,   42,   42,   42,   42,   42,
       42,  265,  268,  271,   42,   42,   42,   42,   42,  277,
       42,  278,   42,  266,  279,  267,  269,  275,   42,  273,
      281,  270,  274,   42,  276,   42,  272,   42,  280,   42,

       42,  285,   42,  282,   42,  283,   42,  286,   42,  288,
      289,   42,   42,   42,  287,   42,  292,   42,  290,  284,
       42,   42,   42,   42,   42,  300,  293,  294,  321,  291,
       42,   42,  302,  295,  303,   42,   42,  296,  297,  297,
      297,  297,   42,  298,  299,  297,  297,  301,  297,  297,
      297,  297,  297,  297,  304,  308,   42,   42,  307,  305,
       42,   42,   42,   42,   42,   42,  306,   42,   42,  310,
       42,  312,  309,  314,   42,  317,   42,  318,   42,  313,
      311,   42,  319,  316,  323,  322,  325,  320,  315,  324,
       42,   42,  244,  244,  244,  244,   42,   42,  246,  246,

      245,  328,  328,  328,  328,  330,  245,   42,   42,  326,
      328,  328,  328,  328,  329,  327,  248,  248,  248,  248,
       42,  248,  248,  248,  248,   42,  331,   42,   42,   42,
       42,  335,   42,   42,  333,   42,   42,  334,  337,   42,
       42,   42,   42,   42,   42,  332,  336,   42,  344,  339,
       42,  338,  346,  345,   42,   42,  341,  342,   42,   42,
       42,   42,  343,   42,  340,   42,  353,   42,  354,   42,
       42,  347,   42,  355,  348,  352,   42,  349,   42,  350,
      351,   42,   42,   42,  359,  356,  358,  357,  360,  361,
       42,   42,   42,   42,  363,  362,   42,   42,   42,   42,

      369,   42,   42,  371,  368,  364,   42,  370,  366,  365,
      367,   42,  372,   42,  376,   42,  373,   42,   42,  374,
      381,   42,   42,  375,   42,  377,  378,  380,   42,  379,
       42,   42,  328,  328,  328,  328,  387,   42,   42,  384,
       42,   42,   42,   42,  382,  386,  388,   42,  383,  390,
       42,  385,  394,  391,   42,   42,  392,   42,   42,   42,
       42,  389,  393,  396,  395,  398,   42,  400,  401,   42,
       42,   42,   42,   42,  397,   42,  399,   42,   42,   42,
      402,  405,   42,  403,   42,   42,   42,   42,  404,  406,
      407,   42,  411,  413,  414,  409,   42,  412,  410,  408,

       42,  416,   42,   42,   42,  418,  417,   42,   42,   42,
       42,  415,   42,   42,  422,   42,   42,   42,   42,  419,
      421,  424,  426,  428,   42,  429,  420,  423,   42,  430,
      427,   42,  431,  425,  432,   42,   42,  433,   42,   42,
       42,   42,  434,   42,   42,  435,   42,   42,   42,  439,
       42,  443,  444,   42,  437,  446,   42,   42,   42,  436,
      441,  451,  442,  440,  449,  447,  448,  438,  445,   42,
       42,   42,   42,   42,  450,   42,   42,   42,   42,  452,
       42,   42,  456,   42,  457,   42,   42,  453,  454,  455,
      458,  459,  461,   42,  462,   42,  463,   42,   42,  460,

       42,   42,   42,   42,  465,  464,   42,   42,  466,   42,
      470,  471,   42,  469,  472,  467,  475,   42,  473,   42,
       42,  477,  468,   42,   42,  474,  481,  476,   42,  480,
       42,  478,   42,  482,   42,   42,  484,   42,   42,   42,
       42,   42,   42,  479,  486,  490,   42,   42,  483,   42,
       42,  493,  494,  496,  485,  491,   42,  495,  492,  487,
       42,  488,  489,   42,  497,   42,  498,   42,   42,   42,
       42,  500,   42,  501,  503,  502,   42,  499,  505,   42,
       42,   42,  508,   42,   42,  504,  510,   42,  507,   42,
       42,   42,   42,  506,   42,  509,  511,  514,   42,   42,

      512,  516,   42,   42,  513,   42,  517,   42,  518,  520,
      519,   42,   42,  515,   42,  525,   42,   42,   42,  524,
      522,   42,  521,   42,  523,  526,  531,   42,   42,  532,
      527,   42,   42,   42,   42,   42,  528,   42,  536,  530,
      529,  535,   42,   42,   42,   42,   42,   42,   42,   42,
       42,  534,   42,  533,  537,   39,   39,   39,   39,   39,
       41,   41,   51,   42,   51,   51,   51,   53,   53,  139,
      139,  139,  139,  139,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  140,   42,  243,   42,   42,   42,   42,  140,
       42,  132,   42,   40,  538,    3,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,

      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538
    } ;

static yyconst short int yy_chk[1221] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,    9,    9,   10,   10,
       10,   10,   11,   11,   11,   11,   11,   12,   44,   44,
       44,   44,   12,   13,   13,   13,   13,   13,   13,   14,
       14,   14,   14,   14,   14,   16,   60,   17,   24,   19,
       18,   16,   16,   16,   16,   19,   17,   19,   60,   21,
       18,   31,   24,   17,   18,   17,   13,   17,   19,   20,

       17,   31,   18,   36,   23,   20,   38,   21,   30,   20,
       21,  546,   28,   36,   23,   20,   38,   21,   20,   22,
       23,   30,   28,   78,   47,   22,   69,   22,   22,   47,
       27,   28,   30,   78,   26,   22,   27,   28,   55,   22,
       26,   22,   25,   25,   25,   25,   25,   55,   26,   27,
       33,   69,   35,   26,   25,   27,   33,   26,   35,   57,
       37,   37,   56,   85,   25,   29,   58,   61,   57,   33,
       85,   35,   33,   63,   64,   29,   56,   29,   56,   33,
       37,   29,   64,   29,   68,   29,   58,   29,   32,   63,
       59,   61,   32,   45,   45,   45,   45,   45,   66,   75,

       68,   32,   32,   59,   32,   32,   32,   59,   32,   54,
       54,   54,   54,   75,   32,  544,   32,   32,   88,   32,
       34,   65,   66,   70,   34,   46,   46,   46,   46,   46,
       46,   88,   70,   34,   34,   72,   34,   65,   34,   65,
       34,   74,   34,   81,   90,  143,   34,   48,   48,   48,
       48,   48,   81,   90,   87,   48,  541,  143,   74,   72,
       87,   48,   49,   49,   49,   49,   49,   49,   50,   50,
       50,   50,   50,   73,   76,   50,   50,   67,   50,   50,
       50,   50,   50,   50,   77,   67,   79,   80,   67,   73,
       83,   84,  537,   76,   77,   89,   73,   67,   82,   82,

       82,   82,   82,   86,   91,   93,   80,   83,   77,   94,
       79,   89,   95,   84,   84,   84,   96,   84,   97,   98,
       91,   86,  101,  100,  102,   94,   96,   93,   97,   98,
       93,   99,  100,   95,  103,  104,  101,   99,  105,  106,
       96,  107,   97,  108,  126,  109,  102,  106,  114,  126,
      110,  107,  105,  112,  109,  106,  111,  113,  103,  108,
      110,  115,  114,  104,  113,  107,  111,  106,  108,  109,
      117,  118,  112,  119,  110,  115,  120,  122,  121,  123,
      127,  535,  125,  115,  117,  534,  130,  119,  121,  123,
      124,  118,  125,  131,  127,  117,  127,  120,  128,  124,

      124,  122,  121,  123,  128,  129,  146,  129,  130,  124,
      144,  147,  124,  149,  155,  131,  146,  124,  150,  151,
      155,  131,  134,  134,  134,  134,  150,  149,  156,  144,
      134,  154,  157,  147,  153,  151,  134,  136,  136,  136,
      136,  136,  160,  153,  156,  136,  157,  158,  164,  160,
      159,  136,  137,  137,  154,  137,  137,  137,  137,  137,
      159,  162,  163,  158,  159,  166,  165,  167,  168,  171,
      169,  162,  164,  167,  172,  173,  532,  170,  174,  171,
      175,  172,  178,  162,  173,  163,  165,  170,  182,  169,
      175,  166,  169,  176,  170,  177,  168,  179,  174,  180,

      181,  178,  183,  176,  184,  177,  186,  179,  187,  181,
      182,  188,  195,  198,  180,  203,  186,  201,  183,  177,
      202,  208,  235,  204,  209,  203,  187,  188,  235,  184,
      530,  216,  208,  195,  209,  210,  214,  198,  200,  200,
      200,  200,  213,  201,  202,  200,  200,  204,  200,  200,
      200,  200,  200,  200,  210,  216,  217,  218,  214,  213,
      219,  220,  222,  221,  226,  229,  213,  232,  233,  218,
      234,  220,  217,  221,  238,  229,  236,  232,  237,  220,
      219,  239,  233,  226,  237,  236,  239,  234,  222,  238,
      241,  242,  244,  244,  244,  244,  249,  250,  245,  245,

      244,  245,  245,  245,  245,  250,  244,  257,  251,  241,
      246,  246,  246,  246,  249,  242,  247,  247,  247,  247,
      247,  248,  248,  248,  248,  248,  251,  253,  254,  256,
      258,  257,  259,  260,  254,  261,  262,  256,  259,  263,
      265,  264,  266,  267,  268,  253,  258,  271,  266,  261,
      272,  260,  268,  267,  273,  274,  263,  264,  279,  277,
      278,  281,  265,  282,  262,  283,  278,  284,  279,  285,
      287,  271,  286,  281,  272,  277,  290,  273,  291,  273,
      274,  292,  293,  295,  285,  282,  284,  283,  286,  287,
      299,  296,  300,  303,  291,  290,  302,  529,  311,  528,

      300,  304,  319,  303,  299,  292,  307,  302,  295,  293,
      296,  308,  304,  310,  311,  316,  307,  313,  317,  308,
      319,  318,  321,  310,  323,  313,  316,  318,  325,  317,
      330,  326,  328,  328,  328,  328,  330,  331,  333,  325,
      337,  334,  338,  340,  321,  326,  331,  335,  323,  334,
      336,  325,  338,  335,  341,  342,  336,  339,  343,  344,
      346,  333,  337,  340,  339,  342,  349,  344,  346,  350,
      351,  352,  354,  353,  341,  356,  343,  357,  358,  361,
      349,  352,  359,  350,  363,  362,  364,  365,  351,  353,
      354,  367,  359,  362,  363,  357,  366,  361,  358,  356,

      368,  365,  369,  371,  370,  367,  366,  372,  374,  375,
      378,  364,  376,  385,  371,  380,  381,  382,  383,  368,
      370,  374,  376,  380,  386,  381,  369,  372,  384,  382,
      378,  388,  383,  375,  384,  389,  391,  385,  392,  393,
      395,  396,  386,  397,  400,  388,  399,  404,  405,  393,
      410,  399,  399,  412,  391,  404,  408,  415,  409,  389,
      396,  412,  397,  395,  409,  405,  408,  392,  400,  416,
      418,  419,  421,  422,  410,  431,  432,  428,  435,  415,
      434,  437,  421,  433,  422,  438,  441,  416,  418,  419,
      428,  431,  433,  442,  434,  443,  435,  444,  448,  432,

      445,  447,  449,  450,  438,  437,  451,  454,  441,  452,
      445,  447,  453,  444,  448,  442,  451,  456,  449,  457,
      458,  453,  443,  459,  460,  450,  458,  452,  461,  457,
      462,  454,  463,  459,  465,  468,  461,  466,  467,  470,
      471,  472,  479,  456,  463,  468,  481,  487,  460,  480,
      492,  472,  479,  481,  462,  470,  483,  480,  471,  465,
      484,  466,  467,  485,  483,  491,  484,  490,  493,  495,
      494,  487,  496,  490,  492,  491,  497,  485,  494,  498,
      499,  501,  497,  502,  503,  493,  499,  504,  496,  505,
      508,  507,  509,  495,  510,  498,  501,  504,  513,  512,

      502,  507,  514,  517,  503,  515,  508,  518,  509,  512,
      510,  519,  520,  505,  521,  518,  522,  523,  524,  517,
      514,  525,  513,  526,  515,  519,  524,  527,  533,  525,
      520,  516,  536,  531,  511,  506,  521,  500,  533,  523,
      522,  531,  489,  488,  486,  482,  478,  477,  476,  475,
      474,  527,  473,  526,  536,  539,  539,  539,  539,  539,
      540,  540,  542,  469,  542,  542,  542,  543,  543,  545,
      545,  545,  545,  545,  464,  455,  446,  440,  439,  436,
      430,  429,  427,  426,  425,  424,  423,  420,  417,  414,
      413,  411,  407,  406,  403,  402,  401,  398,  394,  390,

      387,  379,  377,  373,  360,  355,  348,  347,  345,  332,
      329,  327,  324,  322,  320,  315,  314,  312,  309,  306,
      305,  301,  298,  294,  289,  288,  280,  276,  275,  270,
      269,  255,  252,  240,  231,  230,  228,  227,  225,  224,
      223,  215,  212,  211,  207,  206,  205,  199,  197,  196,
      194,  193,  192,  191,  190,  189,  185,  161,  152,  148,
      145,  142,  139,  135,  132,  116,   92,   71,   62,   52,
       41,   39,    8,    7,    3,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,

      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
#define INITIAL 0
/*===-- Lexer.l - Scanner for llvm assembly files --------------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by the LLVM research group and is distributed under
// the University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM assembly languages files.
//
//===----------------------------------------------------------------------===*/
#define YY_NEVER_INTERACTIVE 1
#line 28 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
#include "ParserInternals.h"
#include "llvm/Module.h"
#include <list>
#include "llvmAsmParser.h"
#include <cctype>
#include <cstdlib>

void set_scan_file(FILE * F){
  yy_switch_to_buffer(yy_create_buffer( F, YY_BUF_SIZE ) );
}
void set_scan_string (const char * str) {
  yy_scan_string (str);
}

// Construct a token value for a non-obsolete token
#define RET_TOK(type, Enum, sym) \
  llvmAsmlval.type = Instruction::Enum; \
  return sym

// Construct a token value for an obsolete token
#define RET_TY(CTYPE, SYM) \
  llvmAsmlval.PrimType = CTYPE;\
  return SYM

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size


// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  // Behave nicely in the face of C TBAA rules... see:
  // http://www.nullstone.com/htmls/category/aliastyp.htm
  union {
    uint64_t UI;
    double FP;
  } UIntToFP;
  UIntToFP.UI = HexIntToVal(Buffer);

  assert(sizeof(double) == sizeof(uint64_t) &&
         "Data sizes incompatible on this target!");
  return UIntToFP.FP;   // Cast Hex constant to double
}


// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.  If AllowNull is set to false, a \00 value will cause
// an exception to be thrown.
//
// If AllowNull is set to true, the return value of the function points to the
// last character of the string in memory.
//
char *UnEscapeLexed(char *Buffer, bool AllowNull) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\' && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
      char Tmp = BIn[3]; BIn[3] = 0;     // Terminate string
      *BOut = (char)strtol(BIn+1, 0, 16);  // Convert to number
      if (!AllowNull && !*BOut)
        GenerateError("String literal cannot accept \\00 escape!");

      BIn[3] = Tmp;                  // Restore character
      BIn += 3;                      // Skip over handled chars
      ++BOut;
    } else {
      *BOut++ = *BIn++;
    }
  }

  return BOut;
}

} // End llvm namespace

using namespace llvm;

#define YY_NEVER_INTERACTIVE 1
/* Comments start with a ; and go till end of line */
/* Local Values and Type identifiers start with a % sign */
/* Global Value identifiers start with an @ sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* LocalVarID/GlobalVarID: match an unnamed local variable slot ID. */
/* Integer types are specified with i and a bitwidth */
/* E[PN]Integer: match positive and negative literal integer values. */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 1021 "Lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static inline void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 190 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"


#line 1175 "Lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 539 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 538 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 192 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 194 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 195 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 196 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 197 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 198 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 199 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return DEFINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 200 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return GLOBAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 201 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return CONSTANT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 202 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return INTERNAL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 203 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return LINKONCE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 204 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return WEAK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 205 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return APPENDING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 206 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 207 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 208 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return HIDDEN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 209 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 210 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 211 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 212 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 213 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return UNDEF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 214 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 215 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return TO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 216 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return TAIL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 217 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return TARGET; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 218 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return TRIPLE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 219 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 220 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return DATALAYOUT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 221 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return VOLATILE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 222 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return ALIGN;  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 223 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return SECTION; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 224 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return MODULE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 225 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 226 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 228 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return CC_TOK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 229 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 230 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 231 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 232 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return X86_STDCALLCC_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 233 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return X86_FASTCALLCC_TOK; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 235 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return INREG; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 236 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return SRET;  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 237 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return NOUNWIND; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 238 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return NORETURN; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 240 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TY(Type::VoidTy,  VOID);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 241 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TY(Type::FloatTy, FLOAT); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 242 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TY(Type::DoubleTy,DOUBLE);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 243 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TY(Type::LabelTy, LABEL); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 244 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return TYPE;   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 245 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return OPAQUE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 246 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ uint64_t NumBits = atoull(yytext+1);
                  if (NumBits < IntegerType::MIN_INT_BITS || 
                      NumBits > IntegerType::MAX_INT_BITS)
                    GenerateError("Bitwidth for integer type out of range!");
                  const Type* Ty = IntegerType::get(NumBits);
                  RET_TY(Ty, INTTYPE);
                }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 254 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Add, ADD); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 255 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Sub, SUB); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 256 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Mul, MUL); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 257 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, UDiv, UDIV); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 258 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SDiv, SDIV); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FDiv, FDIV); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, URem, UREM); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 261 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SRem, SREM); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 262 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FRem, FREM); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 263 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Shl, SHL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 264 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, LShr, LSHR); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 265 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, AShr, ASHR); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 266 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, And, AND); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 267 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Or , OR ); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Xor, XOR); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 269 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  ICmp,  ICMP); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 270 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  FCmp,  FCMP); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 272 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return EQ;  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 273 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return NE;  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 274 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return SLT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 275 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return SGT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 276 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return SLE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 277 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return SGE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 278 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return ULT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 279 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return UGT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 280 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return ULE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 281 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return UGE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 282 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return OEQ; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 283 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return ONE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 284 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return OLT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 285 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return OGT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 286 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return OLE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 287 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return OGE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 288 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return ORD; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 289 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return UNO; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 290 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return UEQ; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 291 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return UNE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 293 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, PHI, PHI_TOK); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 294 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Call, CALL); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 295 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, Trunc, TRUNC); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 296 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, ZExt, ZEXT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 297 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SExt, SEXT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 298 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPTrunc, FPTRUNC); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 299 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPExt, FPEXT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 300 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, UIToFP, UITOFP); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 301 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SIToFP, SITOFP); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 302 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToUI, FPTOUI); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 303 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToSI, FPTOSI); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 304 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, IntToPtr, INTTOPTR); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 305 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, PtrToInt, PTRTOINT); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 306 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, BitCast, BITCAST); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 307 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Select, SELECT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 308 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 309 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Ret, RET); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 310 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Br, BR); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 311 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Switch, SWITCH); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 312 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Invoke, INVOKE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 313 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unwind, UNWIND); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 314 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unreachable, UNREACHABLE); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 316 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Malloc, MALLOC); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 317 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Alloca, ALLOCA); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 318 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Free, FREE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 319 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Load, LOAD); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 320 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Store, STORE); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 321 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, GetElementPtr, GETELEMENTPTR); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 323 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ExtractElement, EXTRACTELEMENT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 324 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, InsertElement, INSERTELEMENT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 325 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ShuffleVector, SHUFFLEVECTOR); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 328 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{
                  UnEscapeLexed(yytext+1);
                  llvmAsmlval.StrVal = strdup(yytext+1);             // Skip %
                  return LOCALVAR;
                }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 333 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{
                  UnEscapeLexed(yytext+1);
                  llvmAsmlval.StrVal = strdup(yytext+1);             // Skip @
                  return GLOBALVAR;
                }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 338 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{
                  yytext[strlen(yytext)-1] = 0;  // nuke colon
                  UnEscapeLexed(yytext);
                  llvmAsmlval.StrVal = strdup(yytext);
                  return LABELSTR;
                }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 344 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{
                  yytext[strlen(yytext)-2] = 0;  // nuke colon, end quote
                  UnEscapeLexed(yytext+1);
                  llvmAsmlval.StrVal = strdup(yytext+1);
                  return LABELSTR;
                }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 351 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ // Note that we cannot unescape a string constant here!  The
                   // string constant might contain a \00 which would not be
                   // understood by the string stuff.  It is valid to make a
                   // [sbyte] c"Hello World\00" constant, for example.
                   //
                   yytext[strlen(yytext)-1] = 0;           // nuke end quote
                   llvmAsmlval.StrVal = strdup(yytext+1);  // Nuke start quote
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 360 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{
                     yytext[strlen(yytext)-1] = 0;           // nuke end quote
                     llvmAsmlval.StrVal = strdup(yytext+2);  // Nuke @, quote
                     return ATSTRINGCONSTANT;
                   }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 366 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ int len = strlen(yytext); 
                  uint32_t numBits = ((len * 64) / 19) + 1;
                  APInt Tmp(numBits, yytext, len, 10);
                  uint32_t activeBits = Tmp.getActiveBits();
                  if (activeBits > 0 && activeBits < numBits)
                    Tmp.trunc(activeBits);
                  if (Tmp.getBitWidth() > 64) {
                    llvmAsmlval.APIntVal = new APInt(Tmp);
                    return EUAPINTVAL; 
                  } else {
                    llvmAsmlval.UInt64Val = Tmp.getZExtValue();
                    return EUINT64VAL;
                  }
                }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 380 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ int len = strlen(yytext); 
                  uint32_t numBits = (((len-1) * 64) / 19) + 2;
                  APInt Tmp(numBits, yytext, len, 10);
                  uint32_t minBits = Tmp.getMinSignedBits();
                  if (minBits > 0 && minBits < numBits)
                    Tmp.trunc(minBits);
                  if (Tmp.getBitWidth() > 64) {
                    llvmAsmlval.APIntVal = new APInt(Tmp);
                    return ESAPINTVAL;
                  } else {
                    llvmAsmlval.SInt64Val = Tmp.getSExtValue();
                    return ESINT64VAL;
                  }
                }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 395 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ int len = strlen(yytext+3) - 3;
                   uint32_t bits = len * 4;
                   APInt Tmp(bits, yytext+3, len, 16);
                   uint32_t activeBits = Tmp.getActiveBits();
                   if (activeBits > 0 && activeBits < bits)
                     Tmp.trunc(activeBits);
                   if (Tmp.getBitWidth() > 64) {
                     llvmAsmlval.APIntVal = new APInt(Tmp);
                     return yytext[0] == 's' ? ESAPINTVAL : EUAPINTVAL;
                   } else if (yytext[0] == 's') {
                     llvmAsmlval.SInt64Val = Tmp.getSExtValue();
                     return ESINT64VAL;
                   } else {
                     llvmAsmlval.UInt64Val = Tmp.getZExtValue();
                     return EUINT64VAL;
                   }
                 }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 413 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return LOCALVAL_ID;
                }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 420 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return GLOBALVAL_ID;
                }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 428 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = atof(yytext); return FPVAL; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 429 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = HexToFP(yytext); return FPVAL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 431 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  yy_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 439 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 440 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 442 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2041 "Lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 539 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 539 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 538);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static inline void yyunput( int c, register char *yy_bp )
#else
static inline void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static inline void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static inline void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 442 "/proj/llvm/llvm-4/lib/AsmParser/Lexer.l"

