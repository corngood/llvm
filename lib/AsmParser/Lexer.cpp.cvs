#define yy_create_buffer llvmAsm_create_buffer
#define yy_delete_buffer llvmAsm_delete_buffer
#define yy_scan_buffer llvmAsm_scan_buffer
#define yy_scan_string llvmAsm_scan_string
#define yy_scan_bytes llvmAsm_scan_bytes
#define yy_flex_debug llvmAsm_flex_debug
#define yy_init_buffer llvmAsm_init_buffer
#define yy_flush_buffer llvmAsm_flush_buffer
#define yy_load_buffer_state llvmAsm_load_buffer_state
#define yy_switch_to_buffer llvmAsm_switch_to_buffer
#define yyin llvmAsmin
#define yyleng llvmAsmleng
#define yylex llvmAsmlex
#define yyout llvmAsmout
#define yyrestart llvmAsmrestart
#define yytext llvmAsmtext
#define yylineno llvmAsmlineno

#line 20 "Lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
<<<<<<< Lexer.cpp.cvs
 * $Header$
=======
 * $Header$
>>>>>>> 1.27
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE (16384*64)

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static inline void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
static yyconst short int yy_acclist[211] =
    {   0,
      132,  130,  131,  129,  130,  131,  129,  131,  130,  131,
      130,  131,  130,  131,  130,  131,  130,  131,  130,  131,
      122,  130,  131,  122,  130,  131,    1,  130,  131,  130,
      131,  130,  131,  130,  131,  130,  131,  130,  131,  130,
      131,  130,  131,  130,  131,  130,  131,  130,  131,  130,
      131,  130,  131,  130,  131,  130,  131,  130,  131,  130,
      131,  130,  131,  130,  131,  130,  131,  130,  131,  130,
      131,  130,  131,  121,  119,  118,  118,  125,  123,  127,
      122,    1,  104,   36,   64,   49,   65,   60,   24,  121,
      118,  118,  126,  127,   21,  127,  128,   50,   59,   34,

       37,    3,   52,   74,   79,   77,   78,   76,   75,   80,
       84,  103,   69,   67,   99,   68,   66,   51,   82,   73,
       71,   72,   70,   83,   81,   61,  120,  127,  127,  101,
       85,   63,   55,  111,   58,   62,  112,  100,   23,  124,
       54,   88,   57,   25,    4,   47,   53,   56,   43,   12,
       87,  127,   31,    2,    5,   44,   90,   46,  113,   86,
       22,  110,   40,    7,   45,   39,   94,   93,    8,   16,
      106,  109,   33,   48,   98,   92,  105,   26,   27,   91,
      107,  102,   97,   38,    6,   28,   89,   32,    9,   18,
       10,   95,   11,   96,   30,   13,   15,   14,   29,   35,

       17,  108,  114,  116,  117,   41,  115,   19,   42,   20
    } ;

static yyconst short int yy_accept[537] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   13,   15,
       17,   19,   21,   24,   27,   30,   32,   34,   36,   38,
       40,   42,   44,   46,   48,   50,   52,   54,   56,   58,
       60,   62,   64,   66,   68,   70,   72,   74,   74,   75,
       75,   76,   77,   78,   79,   79,   80,   80,   81,   82,
       82,   83,   83,   83,   83,   83,   83,   83,   83,   84,
       84,   85,   85,   85,   85,   85,   85,   85,   85,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   88,   88,   88,   88,   88,   88,   88,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       91,   92,   94,   95,   96,   97,   97,   98,   99,   99,
       99,  100,  100,  100,  101,  101,  101,  101,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  104,  104,  105,  106,  107,  108,  109,  110,
      110,  111,  112,  112,  113,  113,  113,  113,  113,  113,

      114,  115,  116,  116,  116,  116,  117,  118,  118,  118,
      119,  119,  119,  119,  119,  119,  119,  119,  120,  121,
      122,  122,  123,  124,  124,  125,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  127,  127,  127,  128,  129,
      129,  129,  129,  130,  130,  130,  130,  131,  131,  131,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  133,  134,  134,  134,  134,
      134,  135,  136,  136,  136,  136,  137,  137,  137,  137,
      137,  137,  137,  137,  138,  139,  139,  139,  140,  140,
      140,  141,  142,  142,  142,  143,  143,  143,  143,  144,

      144,  144,  145,  145,  145,  146,  146,  147,  148,  148,
      148,  148,  148,  149,  149,  150,  150,  151,  151,  151,
      152,  153,  154,  154,  154,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  156,
      156,  157,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  160,  160,  160,  160,  161,
      161,  162,  162,  162,  162,  162,  162,  162,  162,  163,
      163,  163,  164,  164,  164,  164,  164,  165,  165,  165,
      165,  166,  166,  166,  167,  168,  169,  169,  169,  170,

      171,  171,  171,  171,  171,  172,  172,  173,  174,  175,
      175,  175,  176,  176,  176,  177,  178,  179,  180,  181,
      181,  182,  183,  183,  183,  183,  183,  183,  184,  184,
      185,  185,  186,  187,  187,  187,  187,  187,  187,  188,
      188,  188,  188,  188,  188,  188,  188,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  190,  190,  190,  190,
      190,  191,  191,  191,  191,  191,  192,  193,  194,  195,
      195,  195,  195,  196,  196,  196,  196,  197,  197,  198,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  200,  200,  200,  200,  200,  200,  200,  201,

      201,  201,  201,  201,  202,  202,  202,  202,  202,  202,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  204,  204,  205,  206,  206,  207,  207,
      208,  209,  210,  210,  211,  211
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,    1,   16,   16,   16,   16,   17,   16,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,    5,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[44] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    3,
        3,    3,    3,    4,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst short int yy_base[541] =
    {   0,
        0,    0, 1164, 1165, 1165, 1165, 1159, 1148,   36,   40,
       44,   50,   56,   62,    0,   63,   66,   81,   89,   47,
      108,   91,   77,  134,   92,  119,   93,  152,   72,  109,
      178,  121,  209,  120,  135,  146,  147, 1157, 1165, 1146,
     1165,    0,  161,  183,  199,  215,   70,  235,  250,  255,
        0,   68,  140,  128,  165,  154,  101,   46, 1145,   96,
      168,  206,  162,  177,  259,  188,   49,  208, 1144,  219,
      267,  176,  172,  207,  268,  227,  256,  270,  229,  264,
      274,  273,  272,  287,   31,  296,  228,  283,  276,  285,
     1143,  299,  286,  302,  303,  304,  305,  307,  308,  309,

      316,  317,  318,  320,  319,  322,  332,  329,  324,  323,
      343,  345,  348, 1142,  350,  334,  351,  336,  357,  354,
      359,  367,  362,  239,  379,  360,  372,  378,  381, 1141,
        0,  399,  407, 1140,  421,  438,    0, 1139,  373,  383,
     1138,  391,  386, 1137,  409,  426,  412, 1136,  415,  389,
      439,  440,  413,  429,  441,  444,  443, 1135,  446,  425,
      450,  451,  452,  454,  387,  458,  462,  460,  466,  474,
      461,  468,  475,  481,  485,  486,  487,  488,  489,  491,
      492, 1134,  493, 1133, 1132, 1131, 1130, 1129, 1128,  494,
     1127, 1126,  497, 1125,  525,  500,  513,  498,  515, 1124,

     1123, 1122,  499,  502,  519, 1121, 1120,  526,  518, 1119,
      517,  529,  541,  543,  546,  545,  547, 1118, 1117, 1116,
      548, 1115, 1114,  549, 1113, 1112,  550,  551,  553,  556,
      557,  568,  560,  567, 1111,  570,  575, 1165,  580,  588,
      594,  603,  608,  580,  505,  594, 1110,  595,  609, 1109,
      610,  596,  613,  615,  616,  618,  620,  622,  623,  625,
      624,  626,  628,  627, 1108, 1107,  629,  632,  638,  641,
     1106, 1105,  642,  643,  644, 1104,  647,  646,  650,  651,
      654,  658,  659, 1103, 1102,  661,  663, 1101,  664,  666,
        0, 1100,  670,  674, 1099,  672,  676,  680, 1098,  686,

      687, 1097,  689,  691, 1096,  692, 1095, 1094,  693,  697,
      696,  700, 1093,  702, 1092,  704, 1091,  708,  709, 1090,
      714, 1089,  714,  716, 1088,  715,  721,  720,  726,  729,
      731,  732,  736,  735,  738,  739,  743,  740, 1087,  744,
     1086, 1085,  745,  746,  749,  753,  750,  755,  761,  756,
      763,  764,  767, 1084,  768,  771,  773,  775,  774,  770,
      769,  781,  789,  786, 1083,  790,  791,  794, 1082,  793,
     1081,  797,  798,  800,  795,  810,  801,  809, 1080,  807,
      813, 1079,  816,  818,  817,  819, 1078,  821,  822,  823,
     1077,  827,  829, 1076, 1075, 1074,  830,  834, 1073, 1072,

      835,  838,  846,  839, 1071,  842, 1070, 1069, 1068,  848,
      853, 1067,  854,  856, 1066, 1065, 1064, 1063, 1062,  855,
     1061, 1060,  857,  858,  860,  861,  859, 1059,  864, 1058,
      871, 1057, 1056,  869,  873,  122,  877,  875, 1055,  879,
      878,  881,  882,  883,  891,  885, 1054,  886,  893,  898,
      901,  899,  905,  906,  907, 1051,  909,  913,  914,  915,
     1042,  916,  917,  919,  921, 1041, 1040, 1039, 1038,  923,
      920,  935, 1036,  938,  939,  940, 1035,  925, 1033, 1032,
      946,  943,  926,  950,  947,  954,  956,  957,  959,  958,
      960, 1031,  962,  966,  967,  968,  969,  970, 1027,  971,

      974,  975,  977, 1025,  985,  981,  983,  984,  987, 1024,
      988,  995,  997,  998,  999, 1000, 1006, 1007, 1009, 1012,
     1008, 1011, 1023, 1013,  928,  705, 1014,  675, 1017,  465,
      464,  463, 1022,  390, 1165, 1057, 1059,  286, 1063,  252
    } ;

static yyconst short int yy_def[541] =
    {   0,
      535,    1,  535,  535,  535,  535,  536,  537,  538,  535,
      537,  537,  537,  537,  539,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  536,  535,  537,
      535,  540,  540,  535,  535,  537,  537,  537,  537,  537,
      539,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,   24,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  535,
      540,  540,  535,  537,  537,  537,   50,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,   50,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  535,  535,  535,
      535,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      195,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      535,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,    0,  535,  535,  535,  535,  535
    } ;

static yyconst short int yy_nxt[1209] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,    8,    8,    8,   16,   17,
       18,   19,   20,   21,   22,   23,   24,    8,   25,   26,
       27,   28,   29,    8,   30,   31,   32,   33,   34,   35,
       36,    8,   37,   43,   41,   44,   44,   44,   44,   45,
       45,   45,   45,   46,   46,   46,   46,   41,   47,   41,
       41,  177,   41,   41,   48,   49,   49,   49,   49,   41,
       48,   49,   49,   49,   49,   41,   41,   68,  134,   41,
       69,   41,  146,   41,   52,   41,  157,   70,   57,  138,
       41,   53,   58,   54,   41,   55,   50,   99,   56,   60,

       59,   61,   41,   79,   41,   41,   41,   64,  100,   41,
       84,   65,   62,   77,   41,   91,   63,   66,   85,   78,
       67,   41,   41,   86,  147,  145,   71,   87,   72,   73,
       92,  101,   41,   41,   41,   41,   74,   88,  124,  113,
       75,   41,   76,   80,   80,   80,   80,   41,   41,  141,
       89,  125,  114,   41,   81,  115,   90,  126,  127,   41,
       41,  460,  116,   82,   83,   41,  139,   41,  140,  129,
      132,  132,  132,  132,   93,   41,   94,  128,   41,  143,
       95,   41,   96,  144,   97,   41,   98,  102,  148,   41,
       41,   41,   44,   44,   44,   44,  151,  142,  163,  103,

      104,   41,  105,  106,  107,  162,  108,  133,   45,   45,
       45,   45,  109,  152,  110,  111,  156,  112,  102,   41,
       41,   41,   41,   48,   46,   46,   46,   46,   41,  158,
      117,  118,   41,  119,  149,  120,  150,  121,  164,  122,
       41,   41,   41,  123,  135,  135,  135,  135,   41,  167,
      170,  136,   41,  179,  131,  159,  230,  136,   48,   49,
       49,   49,   49,   41,  137,  137,  137,  137,   41,   41,
      137,  137,   41,  137,  137,  137,  137,  137,  137,  153,
       41,   41,  154,   41,   40,   41,   41,   41,   42,   41,
      165,  155,  168,   40,   40,  160,   41,  181,   41,   41,

       41,  169,  161,  171,  166,  172,  176,  173,  174,   41,
      175,  180,   41,  182,  178,   41,   41,   41,   41,  184,
       41,   41,   41,  190,  185,  187,  189,  183,  191,   41,
       41,   41,   41,   41,  192,   41,   41,   41,  186,  188,
      197,  200,   41,  193,  196,   41,  208,   41,  198,   41,
      202,  206,  194,  204,  209,  201,   41,  195,   41,  203,
      199,   41,  210,   41,   41,  207,  216,   41,  205,  218,
       41,  211,   41,   41,  212,   41,  214,  217,  233,  219,
       41,  222,  213,  234,  229,   41,   41,  215,  224,  225,
      221,   41,   41,  220,   41,  223,   41,  244,  226,   41,

       41,  227,   41,   41,   41,  231,  228,  232,  132,  132,
      132,  132,  235,  246,  245,  236,  239,  239,  239,  239,
      247,  237,   41,  240,  252,   41,   41,  268,   41,  240,
      135,  135,  135,  135,   41,  248,  251,  136,   41,   41,
      250,  255,   41,  136,  241,  242,  249,  243,  243,  243,
      243,   41,   41,   41,   41,  256,   41,   41,  254,   41,
      263,  253,  260,   41,   41,   41,  258,   41,  261,  257,
      259,   41,  267,   41,   41,   41,   41,   41,   41,   41,
      262,   41,  273,  265,  271,  274,  264,   41,   41,  269,
      266,  272,  270,  276,   41,  275,  277,  278,   41,   41,

       41,   41,   41,  279,   41,   41,   41,   41,  282,  284,
       41,   41,   41,   41,  283,   41,  281,  280,   41,  286,
      294,  288,  296,  285,  297,  323,   41,  289,   41,  287,
       41,   41,   41,  290,  291,  291,  291,  291,  292,   41,
      291,  291,   41,  291,  291,  291,  291,  291,  291,  293,
      298,  295,  300,  301,   41,  299,   41,  302,   41,   41,
       41,   41,   41,   41,   41,  303,   41,  307,  305,   41,
       41,  310,  311,   41,  314,  304,  306,  312,  315,  309,
       41,   41,  313,   41,  318,  308,  316,  317,   41,  239,
      239,  239,  239,   41,  241,  241,  240,  321,  321,  321,

      321,  319,  240,  321,  321,  321,  321,   41,   41,   41,
      322,  320,  243,  243,  243,  243,   41,  243,  243,  243,
      243,   41,   41,   41,  324,  325,   41,  326,   41,   41,
      327,   41,  328,   41,  331,   41,   41,   41,   41,   41,
       41,   41,   41,  330,  338,   41,  333,  340,  332,  329,
      339,   41,  335,  336,   41,   41,   41,   41,  337,   41,
       41,  347,  334,   41,   41,  341,  348,   41,  342,  349,
      346,   41,   41,  343,   41,  344,   41,   41,  345,   41,
      350,  353,  352,   41,  351,   41,  354,   41,   41,   41,
      355,  357,  356,   41,  361,  362,  360,  359,  363,   41,

       41,  358,   41,  364,   41,   41,   41,  366,  365,   41,
       41,  367,  369,   41,  372,   41,  370,   41,   41,  368,
      371,   41,   41,  321,  321,  321,  321,   41,   41,   41,
      373,  376,  379,   41,   41,  378,  374,  380,  383,   41,
      375,  382,   41,  377,   41,   41,  384,  385,   41,   41,
      381,   41,   41,   41,  387,  388,   41,   41,   41,   41,
      393,  391,   41,   41,  394,  386,   41,  389,   41,   41,
      390,  395,  396,  392,   41,  398,   41,   41,  399,  397,
       41,   41,   41,   41,   41,  400,   41,   41,   41,  405,
      401,  407,  402,  403,   41,  408,  404,  409,  406,   41,

      410,  411,   41,   41,   41,  412,   41,   41,   41,  413,
       41,   41,  414,   41,   41,  416,  418,  420,  415,  421,
       41,  423,   41,   41,  422,  419,   41,  417,  424,   41,
       41,   41,   41,  427,   41,   41,   41,  425,  430,  426,
       41,  432,   41,   41,  436,  437,  429,   41,   41,  428,
      439,   41,   41,  434,  435,   41,  433,  441,  431,   41,
      442,   41,  445,  440,  443,  438,   41,   41,   41,   41,
       41,   41,   41,   41,   41,  444,  448,   41,  446,  449,
      450,  453,   41,  447,   41,  451,   41,  454,   41,  455,
       41,   41,   41,  452,   41,   41,   41,  462,   41,   41,

      456,  463,  457,  458,   41,  461,   41,  459,  464,  465,
      466,   41,   41,  468,   41,  471,  472,  467,   41,   41,
       41,  469,   41,  473,  470,  475,   41,   41,   41,   41,
       41,  477,   41,   41,   41,  474,   41,  481,   41,   41,
      487,   41,  476,  485,  482,  486,  478,  483,   41,  479,
      480,   41,   41,   41,  488,  484,   41,  490,  489,   41,
       41,  492,  495,   41,  493,  494,  491,   41,  496,   41,
       41,   41,   41,   41,  498,   41,  497,  501,  503,   41,
       41,   41,   41,   41,   41,  500,  502,   41,   41,  504,
       41,  508,  499,  510,   41,  505,   41,   41,   41,  506,

       41,   41,  511,  512,  507,  513,  509,  514,   41,  516,
       41,   41,   41,   41,  517,  520,  519,  515,  518,   41,
       41,   41,   41,  521,   41,   41,   41,   41,  522,  527,
       41,  524,  528,  523,  532,   41,   41,   41,   41,  533,
       41,  526,  525,  531,   41,   41,   41,  530,   41,   41,
      529,   41,   41,   41,   41,   41,  534,   38,   38,   38,
       38,   40,   40,   51,   41,   51,   51,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,  238,   41,   41,   41,   41,   41,
      130,   41,   39,  535,    3,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  535,  535,  535,  535,  535,  535
    } ;

static yyconst short int yy_chk[1209] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   85,    9,    9,    9,    9,   10,
       10,   10,   10,   11,   11,   11,   11,   11,   12,   58,
       20,   85,   67,   12,   13,   13,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   16,   20,   47,   17,
       20,   52,   58,   47,   16,   29,   67,   20,   17,   52,
       23,   16,   17,   16,   18,   16,   13,   29,   16,   18,

       17,   18,   19,   23,   22,   25,   27,   19,   29,   60,
       25,   19,   18,   22,   57,   27,   18,   19,   25,   22,
       19,   21,   30,   25,   60,   57,   21,   25,   21,   21,
       27,   30,   26,   34,   32,  436,   21,   26,   34,   32,
       21,   54,   21,   24,   24,   24,   24,   24,   35,   54,
       26,   34,   32,   53,   24,   32,   26,   35,   36,   36,
       37,  436,   32,   24,   24,   28,   53,   56,   53,   37,
       43,   43,   43,   43,   28,   63,   28,   36,   55,   56,
       28,   61,   28,   56,   28,   73,   28,   31,   61,   72,
       64,   31,   44,   44,   44,   44,   63,   55,   73,   31,

       31,   66,   31,   31,   31,   72,   31,   45,   45,   45,
       45,   45,   31,   64,   31,   31,   66,   31,   33,   62,
       74,   68,   33,   46,   46,   46,   46,   46,   46,   68,
       33,   33,   70,   33,   62,   33,   62,   33,   74,   33,
       76,   87,   79,   33,   48,   48,   48,   48,   48,   76,
       79,   48,  124,   87,  540,   70,  124,   48,   49,   49,
       49,   49,   49,   49,   50,   50,   50,   50,   50,   77,
       50,   50,   65,   50,   50,   50,   50,   50,   50,   65,
       71,   75,   65,   78,   80,   83,   82,   81,  538,   89,
       75,   65,   77,   80,   80,   71,   88,   89,   90,   93,

       84,   78,   71,   81,   75,   82,   84,   83,   83,   86,
       83,   88,   92,   90,   86,   94,   95,   96,   97,   93,
       98,   99,  100,   97,   94,   95,   96,   92,   98,  101,
      102,  103,  105,  104,   99,  106,  110,  109,   94,   95,
      104,  105,  108,  100,  103,  107,  109,  116,  104,  118,
      106,  108,  101,  107,  110,  105,  111,  102,  112,  106,
      104,  113,  111,  115,  117,  108,  116,  120,  107,  118,
      119,  112,  121,  126,  113,  123,  115,  117,  126,  119,
      122,  121,  113,  127,  123,  127,  139,  115,  122,  122,
      120,  128,  125,  119,  129,  121,  140,  139,  122,  143,

      165,  122,  150,  534,  142,  125,  122,  125,  132,  132,
      132,  132,  128,  142,  140,  129,  133,  133,  133,  133,
      143,  129,  145,  133,  150,  147,  153,  165,  149,  133,
      135,  135,  135,  135,  135,  145,  149,  135,  160,  146,
      147,  153,  154,  135,  136,  136,  146,  136,  136,  136,
      136,  136,  151,  152,  155,  154,  157,  156,  152,  159,
      160,  151,  157,  161,  162,  163,  156,  164,  159,  155,
      156,  166,  164,  168,  171,  167,  532,  531,  530,  169,
      159,  172,  168,  162,  167,  169,  161,  170,  173,  166,
      163,  167,  166,  171,  174,  170,  172,  173,  175,  176,

      177,  178,  179,  174,  180,  181,  183,  190,  176,  178,
      193,  198,  203,  196,  177,  204,  175,  174,  245,  180,
      198,  183,  203,  179,  204,  245,  197,  190,  199,  181,
      211,  209,  205,  193,  195,  195,  195,  195,  196,  208,
      195,  195,  212,  195,  195,  195,  195,  195,  195,  197,
      205,  199,  209,  211,  213,  208,  214,  212,  216,  215,
      217,  221,  224,  227,  228,  213,  229,  216,  215,  230,
      231,  224,  227,  233,  230,  214,  215,  228,  231,  221,
      234,  232,  229,  236,  234,  217,  232,  233,  237,  239,
      239,  239,  239,  244,  240,  240,  239,  240,  240,  240,

      240,  236,  239,  241,  241,  241,  241,  246,  248,  252,
      244,  237,  242,  242,  242,  242,  242,  243,  243,  243,
      243,  243,  249,  251,  246,  248,  253,  249,  254,  255,
      251,  256,  252,  257,  255,  258,  259,  261,  260,  262,
      264,  263,  267,  254,  262,  268,  257,  264,  256,  253,
      263,  269,  259,  260,  270,  273,  274,  275,  261,  278,
      277,  274,  258,  279,  280,  267,  275,  281,  268,  277,
      273,  282,  283,  269,  286,  269,  287,  289,  270,  290,
      278,  281,  280,  293,  279,  296,  282,  294,  528,  297,
      283,  287,  286,  298,  294,  296,  293,  290,  297,  300,

      301,  289,  303,  298,  304,  306,  309,  301,  300,  311,
      310,  303,  306,  312,  311,  314,  309,  316,  526,  304,
      310,  318,  319,  321,  321,  321,  321,  323,  326,  324,
      312,  318,  323,  328,  327,  319,  314,  324,  328,  329,
      316,  327,  330,  318,  331,  332,  329,  330,  334,  333,
      326,  335,  336,  338,  332,  333,  337,  340,  343,  344,
      338,  336,  345,  347,  340,  331,  346,  334,  348,  350,
      335,  343,  344,  337,  349,  346,  351,  352,  347,  345,
      353,  355,  361,  360,  356,  348,  357,  359,  358,  353,
      349,  356,  350,  351,  362,  357,  352,  358,  355,  364,

      359,  360,  363,  366,  367,  361,  370,  368,  375,  362,
      372,  373,  363,  374,  377,  366,  368,  372,  364,  373,
      380,  375,  378,  376,  374,  370,  381,  367,  376,  383,
      385,  384,  386,  380,  388,  389,  390,  377,  384,  378,
      392,  386,  393,  397,  392,  392,  383,  398,  401,  381,
      397,  402,  404,  389,  390,  406,  388,  401,  385,  403,
      402,  410,  406,  398,  403,  393,  411,  413,  420,  414,
      423,  424,  427,  425,  426,  404,  413,  429,  410,  414,
      420,  425,  434,  411,  431,  423,  435,  426,  438,  427,
      437,  441,  440,  424,  442,  443,  444,  438,  446,  448,

      429,  440,  431,  434,  445,  437,  449,  435,  441,  442,
      443,  450,  452,  445,  451,  449,  450,  444,  453,  454,
      455,  446,  457,  451,  448,  453,  458,  459,  460,  462,
      463,  455,  464,  471,  465,  452,  470,  460,  478,  483,
      471,  525,  454,  465,  462,  470,  457,  463,  472,  458,
      459,  474,  475,  476,  472,  464,  482,  475,  474,  481,
      485,  478,  483,  484,  481,  482,  476,  486,  484,  487,
      488,  490,  489,  491,  486,  493,  485,  489,  491,  494,
      495,  496,  497,  498,  500,  488,  490,  501,  502,  493,
      503,  497,  487,  500,  506,  494,  507,  508,  505,  495,

      509,  511,  501,  502,  496,  503,  498,  505,  512,  507,
      513,  514,  515,  516,  508,  512,  511,  506,  509,  517,
      518,  521,  519,  513,  522,  520,  524,  527,  514,  519,
      529,  516,  520,  515,  527,  533,  523,  510,  504,  529,
      499,  518,  517,  524,  492,  480,  479,  522,  477,  473,
      521,  469,  468,  467,  466,  461,  533,  536,  536,  536,
      536,  537,  537,  539,  456,  539,  539,  447,  439,  433,
      432,  430,  428,  422,  421,  419,  418,  417,  416,  415,
      412,  409,  408,  407,  405,  400,  399,  396,  395,  394,
      391,  387,  382,  379,  371,  369,  365,  354,  342,  341,

      339,  325,  322,  320,  317,  315,  313,  308,  307,  305,
      302,  299,  295,  292,  288,  285,  284,  276,  272,  271,
      266,  265,  250,  247,  235,  226,  225,  223,  222,  220,
      219,  218,  210,  207,  206,  202,  201,  200,  194,  192,
      191,  189,  188,  187,  186,  185,  184,  182,  158,  148,
      144,  141,  138,  134,  130,  114,   91,   69,   59,   40,
       38,    8,    7,    3,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  535,  535,  535,  535,  535,  535
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
#define INITIAL 0
/*===-- Lexer.l - Scanner for llvm assembly files --------------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by the LLVM research group and is distributed under
// the University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM assembly languages files.
//
//===----------------------------------------------------------------------===*/
#define YY_NEVER_INTERACTIVE 1
#line 28 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
#include "ParserInternals.h"
#include "llvm/Module.h"
#include <list>
#include "llvmAsmParser.h"
#include <cctype>
#include <cstdlib>

void set_scan_file(FILE * F){
  yy_switch_to_buffer(yy_create_buffer( F, YY_BUF_SIZE ) );
}
void set_scan_string (const char * str) {
  yy_scan_string (str);
}

// Construct a token value for a non-obsolete token
#define RET_TOK(type, Enum, sym) \
  llvmAsmlval.type = Instruction::Enum; \
  return sym

// Construct a token value for an obsolete token
#define RET_TY(CTYPE, SYM) \
  llvmAsmlval.PrimType = CTYPE;\
  return SYM

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size


// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  // Behave nicely in the face of C TBAA rules... see:
  // http://www.nullstone.com/htmls/category/aliastyp.htm
  union {
    uint64_t UI;
    double FP;
  } UIntToFP;
  UIntToFP.UI = HexIntToVal(Buffer);

  assert(sizeof(double) == sizeof(uint64_t) &&
         "Data sizes incompatible on this target!");
  return UIntToFP.FP;   // Cast Hex constant to double
}


// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.  If AllowNull is set to false, a \00 value will cause
// an exception to be thrown.
//
// If AllowNull is set to true, the return value of the function points to the
// last character of the string in memory.
//
char *UnEscapeLexed(char *Buffer, bool AllowNull) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\' && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
      char Tmp = BIn[3]; BIn[3] = 0;     // Terminate string
      *BOut = (char)strtol(BIn+1, 0, 16);  // Convert to number
      if (!AllowNull && !*BOut)
        GenerateError("String literal cannot accept \\00 escape!");

      BIn[3] = Tmp;                  // Restore character
      BIn += 3;                      // Skip over handled chars
      ++BOut;
    } else {
      *BOut++ = *BIn++;
    }
  }

  return BOut;
}

} // End llvm namespace

using namespace llvm;

#define YY_NEVER_INTERACTIVE 1
/* Comments start with a ; and go till end of line */
/* Variable(Value) identifiers start with a % sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* [PN]Integer: match positive and negative literal integer values that
 * are preceeded by a '%' character.  These represent unnamed variable slots.
 */
/* E[PN]Integer: match positive and negative literal integer values */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 1007 "Lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static inline void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 188 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"


#line 1161 "Lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 536 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 535 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 190 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 192 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 193 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 194 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 195 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 196 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 197 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return DEFINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 198 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return GLOBAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 199 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return CONSTANT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 200 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return INTERNAL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 201 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return LINKONCE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 202 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return WEAK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 203 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return APPENDING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 204 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 205 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 206 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return HIDDEN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 207 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 208 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 209 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return IMPLEMENTATION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 210 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 211 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 212 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return UNDEF; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 213 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 214 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return TO; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 215 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return TAIL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 216 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return TARGET; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 217 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return TRIPLE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 218 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 219 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return DATALAYOUT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 220 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return VOLATILE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 221 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return ALIGN;  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 222 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return SECTION; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 223 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return MODULE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 224 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 225 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 227 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return CC_TOK; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 228 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 229 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return CSRETCC_TOK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 230 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 231 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 232 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return X86_STDCALLCC_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 233 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return X86_FASTCALLCC_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 235 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TY(Type::VoidTy,  VOID);  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 236 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TY(Type::FloatTy, FLOAT); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 237 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TY(Type::DoubleTy,DOUBLE);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 238 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TY(Type::LabelTy, LABEL); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 239 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return TYPE;   }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 240 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return OPAQUE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 241 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ uint64_t NumBits = atoull(yytext+1);
                  if (NumBits < IntegerType::MIN_INT_BITS || 
                      NumBits > IntegerType::MAX_INT_BITS)
                    GenerateError("Bitwidth for integer type out of range!");
                  const Type* Ty = IntegerType::get(NumBits);
                  RET_TY(Ty, INTTYPE);
                }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 249 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Add, ADD); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 250 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Sub, SUB); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 251 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Mul, MUL); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 252 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, UDiv, UDIV); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 253 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SDiv, SDIV); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 254 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FDiv, FDIV); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 255 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, URem, UREM); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 256 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SRem, SREM); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 257 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FRem, FREM); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 258 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, And, AND); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 259 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Or , OR ); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 260 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Xor, XOR); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 261 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  ICmp,  ICMP); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 262 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  FCmp,  FCMP); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 263 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return EQ;  }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 264 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return NE;  }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 265 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return SLT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 266 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return SGT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 267 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return SLE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 268 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return SGE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 269 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return ULT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 270 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return UGT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 271 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return ULE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 272 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return UGE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 273 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return OEQ; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 274 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return ONE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 275 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return OLT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 276 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return OGT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 277 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return OLE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 278 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return OGE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 279 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return ORD; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 280 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return UNO; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 281 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return UEQ; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 282 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return UNE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 284 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, PHI, PHI_TOK); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 285 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Call, CALL); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 286 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, Trunc, TRUNC); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 287 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, ZExt, ZEXT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 288 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SExt, SEXT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 289 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPTrunc, FPTRUNC); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 290 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPExt, FPEXT); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 291 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, UIToFP, UITOFP); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 292 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SIToFP, SITOFP); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 293 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToUI, FPTOUI); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 294 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToSI, FPTOSI); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 295 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, IntToPtr, INTTOPTR); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 296 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, PtrToInt, PTRTOINT); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 297 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, BitCast, BITCAST); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 298 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Select, SELECT); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 299 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Shl, SHL); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 300 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, LShr, LSHR); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 301 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, AShr, ASHR); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 302 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 303 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Ret, RET); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 304 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Br, BR); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 305 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Switch, SWITCH); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 306 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Invoke, INVOKE); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 307 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unwind, UNWIND); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 308 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unreachable, UNREACHABLE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 310 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Malloc, MALLOC); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 311 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Alloca, ALLOCA); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 312 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Free, FREE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 313 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Load, LOAD); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 314 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Store, STORE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 315 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, GetElementPtr, GETELEMENTPTR); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 317 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ExtractElement, EXTRACTELEMENT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 318 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, InsertElement, INSERTELEMENT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 319 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ShuffleVector, SHUFFLEVECTOR); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 322 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{
                  UnEscapeLexed(yytext+1);
                  llvmAsmlval.StrVal = strdup(yytext+1);             // Skip %
                  return VAR_ID;
                }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 327 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{
                  yytext[strlen(yytext)-1] = 0;  // nuke colon
                  UnEscapeLexed(yytext);
                  llvmAsmlval.StrVal = strdup(yytext);
                  return LABELSTR;
                }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 333 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{
                  yytext[strlen(yytext)-2] = 0;  // nuke colon, end quote
                  UnEscapeLexed(yytext+1);
                  llvmAsmlval.StrVal = strdup(yytext+1);
                  return LABELSTR;
                }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 340 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ // Note that we cannot unescape a string constant here!  The
                   // string constant might contain a \00 which would not be
                   // understood by the string stuff.  It is valid to make a
                   // [sbyte] c"Hello World\00" constant, for example.
                   //
                   yytext[strlen(yytext)-1] = 0;           // nuke end quote
                   llvmAsmlval.StrVal = strdup(yytext+1);  // Nuke start quote
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 351 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ llvmAsmlval.UInt64Val = atoull(yytext); return EUINT64VAL; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 352 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT64_MAX+1)
                    GenerateError("Constant too large for signed 64 bits!");
                  llvmAsmlval.SInt64Val = -Val;
                  return ESINT64VAL;
                }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 360 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{
                   llvmAsmlval.UInt64Val = HexIntToVal(yytext+3);
                   return yytext[0] == 's' ? ESINT64VAL : EUINT64VAL;
                 }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 365 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return UINTVAL;
                }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 372 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(yytext+2);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT32_MAX+1)
                    GenerateError("Constant too large for signed 32 bits!");
                  llvmAsmlval.SIntVal = (int)-Val;
                  return SINTVAL;
                }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 381 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = atof(yytext); return FPVAL; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 382 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = HexToFP(yytext); return FPVAL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 384 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  yy_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 392 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 393 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 395 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1968 "Lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 536 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 536 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 535);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static inline void yyunput( int c, register char *yy_bp )
#else
static inline void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static inline void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static inline void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 395 "/Users/resistor/llvm/src/llvm/lib/AsmParser/Lexer.l"

