#line 2 "Lexer.cpp"

#line 4 "Lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE llvmAsmrestart(llvmAsmin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (16384*64)
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int llvmAsmleng;

extern FILE *llvmAsmin, *llvmAsmout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE llvmAsmlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-llvmAsmlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < llvmAsmleng; ++yyl )\
                    if ( llvmAsmtext[yyl] == '\n' )\
                        --llvmAsmlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up llvmAsmtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up llvmAsmtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via llvmAsmrestart()), so that the user can continue scanning by
	 * just pointing llvmAsmin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when llvmAsmtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int llvmAsmleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow llvmAsmwrap()'s to do buffer switches
 * instead of setting up a fresh llvmAsmin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void llvmAsmrestart (FILE *input_file  );
void llvmAsm_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE llvmAsm_create_buffer (FILE *file,int size  );
void llvmAsm_delete_buffer (YY_BUFFER_STATE b  );
void llvmAsm_flush_buffer (YY_BUFFER_STATE b  );
void llvmAsmpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void llvmAsmpop_buffer_state (void );

static void llvmAsmensure_buffer_stack (void );
static void llvmAsm_load_buffer_state (void );
static void llvmAsm_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER llvmAsm_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE llvmAsm_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE llvmAsm_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE llvmAsm_scan_bytes (yyconst char *bytes,int len  );

void *llvmAsmalloc (yy_size_t  );
void *llvmAsmrealloc (void *,yy_size_t  );
void llvmAsmfree (void *  );

#define yy_new_buffer llvmAsm_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        llvmAsmensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            llvmAsm_create_buffer(llvmAsmin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        llvmAsmensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            llvmAsm_create_buffer(llvmAsmin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define llvmAsmwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *llvmAsmin = (FILE *) 0, *llvmAsmout = (FILE *) 0;

typedef int yy_state_type;

extern int llvmAsmlineno;

int llvmAsmlineno = 1;

extern char *llvmAsmtext;
#define yytext_ptr llvmAsmtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up llvmAsmtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	llvmAsmleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[557] =
    {   0,
        0,    0,  137,  135,  134,  134,  135,  135,  135,  135,
      135,  135,  127,  127,    1,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,    0,  126,    0,
      124,  123,  123,  130,    0,  128,    0,  132,  127,    0,
        1,    0,    0,    0,    0,    0,    0,    0,    0,  109,
        0,   40,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   70,    0,    0,    0,    0,    0,    0,   65,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  126,  123,  123,  132,   21,  132,    0,  133,   55,
        0,    0,   64,    0,    0,   38,    0,   33,    0,    0,
        0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    3,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   57,    0,   79,   84,
       82,   83,   81,   80,    0,   85,   89,    0,    0,  108,

        0,    0,    0,    0,    0,   74,   72,  104,    0,    0,
        0,   73,   71,    0,    0,   56,    0,    0,    0,    0,
        0,    0,    0,   87,   78,   76,    0,   77,   75,    0,
       88,   86,    0,    0,    0,    0,    0,    0,    0,    0,
       66,    0,    0,  125,  132,    0,    0,    0,  132,    0,
        0,    0,  106,    0,    0,   48,   90,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,   60,    0,    0,    0,    0,  116,   63,
        0,    0,    0,   67,    0,    0,    0,    0,    0,    0,
        0,    0,  117,  105,    0,    0,   23,    0,    0,    0,

      129,   59,    0,    0,   93,    0,    0,    0,   62,    0,
        0,   25,    0,    0,    4,    0,   52,   58,    0,    0,
        0,    0,   61,    0,   47,    0,   12,    0,    0,   92,
      132,   35,    0,    0,    2,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
        0,   49,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   51,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  118,    0,    0,
        0,   91,    0,   22,    0,    0,    0,    0,    0,    0,
        0,  115,    0,    0,   44,    0,    0,    0,    0,    7,

        0,    0,    0,   50,   29,    0,    0,   43,   99,   98,
        0,    0,    8,   16,    0,    0,    0,    0,  111,    0,
       32,  114,   37,   53,    0,    0,    0,  103,    0,    0,
       97,  110,   26,   27,   96,    0,  112,  107,    0,    0,
        0,    0,    0,  102,    0,   42,    0,    6,   28,    0,
        0,    0,    0,    0,   94,    0,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,    0,    0,    0,    0,
        0,    0,    9,    0,    0,    0,    0,   18,    0,    0,
        0,    0,   10,  100,   11,    0,  101,    0,    0,    0,
       34,    0,    0,    0,   13,    0,   15,   14,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       31,    0,    0,    0,    0,    0,    0,    0,   39,    0,
        0,    0,    0,   17,    0,    0,    0,    0,   30,    0,
      113,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  119,    0,  121,  122,    0,   45,    0,
      120,   19,   46,    0,   20,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    1,    1,
        1,    1,    7,    1,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   12,   11,   13,   11,   14,   15,    1,
        1,    1,    1,    1,   16,   16,   16,   16,   17,   16,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,    5,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    3,
        3,    3,    3,    4,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[562] =
    {   0,
        0,    0, 1206, 1207, 1207, 1207, 1201, 1190,   36,   40,
       44,   50,   56,   62,    0,   63,   66,   81,   89,   47,
      108,   91,   77,  134,   92,  119,   93,  152,  126,  109,
      178,  154,  209,  135,  111,  146,  112, 1199, 1207, 1188,
     1207,    0,  159,  198,  215,  236,   70,  241,  256,  261,
        0,   68,  147,  128,  165,  176,  166,  262,   31, 1187,
      168,  200,  206,   48,   72,  265,  170,  101,  208, 1186,
       73,  227,  203,  215,  180,  274,  139,  225,  229,  278,
      272,  276,  277,  280,  281,  290,  293,  282,  291,  300,
      295, 1185,  299,  122,  309,  311,  312,  317,  315,  316,

      324,  304,  319,  301,  326,  331,  327,  330,  333,  340,
      335,  343,  347,  351,  352, 1184,  355,  348,  357,  360,
      362,  359,  366,  369,  372,  384,  383,  386,  181,  376,
      392, 1183,    0,  403,  407, 1182,  424,  441,    0, 1181,
      407,  393, 1180,  408,  394, 1179,  412, 1178,  429,  428,
      430, 1177,  442,  409,  444,  446,  432,  448,  449,  454,
      452,  455,  456,  457,  459,  462,  460,  466,  469,  470,
      474,  475,  472,  486,  473,  480,  489,  493,  487,  497,
      499,  500,  501,  503,  504,  507, 1176,  510, 1175, 1174,
     1173, 1172, 1171, 1170,  508, 1169, 1168,  512,  511, 1167,

      539,  514,  517,  518,  520, 1166, 1165, 1164,  522,  521,
      515, 1163, 1162,  550,  551, 1161,  552,  553,  554,  555,
      560,  558,  556, 1160, 1159, 1158,  561, 1157, 1156,  562,
     1155, 1154,  564,  557,  576,  578,  580,  582,  584,  559,
     1153,  585,  586, 1207,  597,  614,  618,  622,  627,  628,
      590,  629, 1152,  630,  599, 1151, 1150,  631,  632,  633,
      634,  635,  636,  589,  637,  641,  639,  643,  642,  660,
      650,  644, 1149, 1148,  652,  658,  661,  662, 1147, 1146,
      667,  666,  668, 1145,  669,  670,  672,  674,  591,  673,
      676,  680, 1144, 1143,  679,  684, 1142,  687,  689,  690,

        0, 1141,  696,  698, 1140,  700,  704,  706, 1139,  714,
      715, 1138,  717,  703, 1137,  720, 1136, 1135,  719,  721,
      702,  724, 1134,  725, 1133,  728, 1132,  730,  732, 1131,
      737, 1130,  737,  739, 1129,  738,  743,  744,  748,  753,
      754,  756,  757,  759,  761,  762,  764,  766,  767, 1128,
      769, 1127, 1126,  772,  773,  770,  768,  779,  782,  784,
      788,  789,  790,  792, 1125,  791,  793,  796,  795,  798,
      805,  797,  812,  813,  816,  815,  818, 1124,  414,  817,
      819, 1123,  820, 1122,  822,  824,  823,  833,  821,  827,
      835, 1121,  838,  841, 1120,  842,  847,  843,  844, 1119,

      845,  848,  855, 1118, 1117,  856,  849, 1116, 1115, 1114,
      858,  862, 1113, 1112,  868,  870,  869,  857, 1111,  875,
     1110, 1109, 1108, 1107,  863,  876,  881, 1106,  883,  885,
     1105, 1104, 1103, 1102, 1101,  887, 1100, 1099,  886,  888,
      889,  890,  891, 1098,  894, 1097,  896, 1096, 1095,  900,
      902,  904,  905,  906, 1094,  907,  909,  912,  913,  911,
      922,  918,  919, 1093,  924,  925,  933,  935,  929,  936,
      937,  939, 1092,  941,  945,  946,  947, 1091,  948,  953,
      951,  955, 1090, 1089, 1088,  954, 1085,  957,  971,  973,
     1076,  975,  972,  976, 1073,  958, 1072, 1071,  980,  983,

      961,  986,  987,  959,  990,  993,  994,  995,  996,  999,
     1068,  998, 1001, 1002, 1005, 1006, 1010, 1007, 1067, 1013,
     1008, 1014, 1018, 1064, 1025, 1020, 1024, 1027, 1063, 1031,
     1060, 1026, 1032, 1035, 1036, 1038, 1040, 1042, 1045, 1047,
     1050, 1046, 1051,  962, 1052,  701,  601, 1055,  526, 1061,
      476,  374,  246, 1056,  245, 1207, 1091, 1093,  254, 1097,
       57
    } ;

static yyconst flex_int16_t yy_def[562] =
    {   0,
      556,    1,  556,  556,  556,  556,  557,  558,  559,  556,
      558,  558,  558,  558,  560,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  557,  556,  558,
      556,  561,  561,  556,  556,  558,  558,  558,  558,  558,
      560,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
       24,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  556,  561,  561,  556,  558,  558,  558,   50,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

       50,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  556,  556,  556,  556,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      201,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      556,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,    0,  556,  556,  556,  556,
      556
    } ;

static yyconst flex_int16_t yy_nxt[1251] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   14,   14,    4,   15,    8,    8,    8,   16,   17,
       18,   19,   20,   21,   22,   23,   24,    8,   25,   26,
       27,   28,   29,    8,   30,   31,   32,   33,   34,   35,
       36,    8,   37,   43,   41,   44,   44,   44,   44,   45,
       45,   45,   45,   46,   46,   46,   46,   41,   47,  133,
       41,   41,  150,   41,   48,   49,   49,   49,   49,   41,
       48,   49,   49,   49,   49,   41,   41,   69,  136,   41,
       70,   41,  155,   41,   52,   41,   41,   71,   57,  140,
       41,   53,   58,   54,   41,   55,   50,   59,   56,   61,

       60,   62,   41,   80,   41,   41,   41,   65,  156,  163,
       85,   66,   63,   78,   41,   92,   64,   67,   86,   79,
       68,   41,   41,   87,   41,   41,   72,   88,   73,   74,
       93,  103,   41,  128,  131,   41,   75,   89,  161,   41,
       76,   41,   77,   81,   81,   81,   81,   41,   41,  143,
       90,  100,   41,  126,   82,  189,   91,  101,  129,   41,
       41,  171,  102,   83,   84,   41,  127,   41,  134,  134,
      134,  134,  115,  141,   94,  142,   95,  130,   41,   41,
       96,   41,   97,   41,   98,  116,   99,  104,  117,   41,
      147,   41,  240,   41,   41,  118,  151,  144,  160,  105,

      106,  145,  107,  108,  109,  146,  110,   44,   44,   44,
       44,  168,  111,   41,  112,  113,   41,  114,  104,   41,
      152,   41,   41,  135,   45,   45,   45,   45,   41,  162,
      119,  120,  166,  121,  153,  122,  154,  123,   41,  124,
       41,  167,   41,  125,   48,   46,   46,   46,   46,   41,
      137,  137,  137,  137,   41,  164,   42,  138,   41,   41,
      173,  172,  165,  138,   48,   49,   49,   49,   49,   41,
      139,  139,  139,  139,   41,   41,  139,  139,   41,  139,
      139,  139,  139,  139,  139,  157,  148,   41,  158,   41,
       41,   41,   40,   41,   41,   41,  169,  159,  149,  174,

      180,   40,   40,   41,   41,  175,   41,  184,   41,  176,
      170,  183,   41,   41,   41,  177,  178,   41,  179,  185,
      181,  186,   41,  187,   41,   41,  182,  188,   41,   41,
       41,  190,   41,  192,  194,  195,  196,   41,  199,   41,
       41,  201,  197,   41,   41,  191,   41,  193,   41,  206,
      198,  203,  202,   41,  210,  200,   41,  214,  208,  204,
       41,   41,  212,  207,   41,   41,  216,  209,   41,  211,
       41,  205,   41,   41,  215,   41,  213,  217,  218,   41,
      222,  220,   41,  223,  225,   41,  219,   41,  228,   41,
      230,  231,  221,  224,  235,  227,   41,   41,  226,   41,

      232,  236,  229,  233,  239,   41,   41,   41,  234,  237,
      241,  238,  134,  134,  134,  134,  245,  245,  245,  245,
       41,   41,   41,  246,  251,   41,  242,   41,  253,  246,
      252,  250,  243,  137,  137,  137,  137,   41,  254,  432,
      138,   41,   41,   41,  259,   41,  138,  247,  248,  255,
      249,  249,  249,  249,   41,   41,  256,   41,  257,   41,
      262,   41,   41,  258,  261,   41,  260,   41,   41,   41,
       41,  267,   41,   41,  263,   41,  265,  264,  269,   41,
      266,  268,   41,   41,  275,   41,   41,   41,   41,   41,
      270,  282,  271,   41,  273,  272,  279,  281,  274,   41,

       41,  277,   41,  280,  278,  284,   41,  283,  285,  276,
       41,  286,   41,   41,   41,  287,   41,   41,  289,  290,
       41,   41,  293,   41,   41,   41,  291,   41,   41,  288,
       41,   41,  295,   41,   41,   41,  292,  294,  297,   41,
      304,  298,  299,  307,  296,  306,  308,  300,  301,  301,
      301,  301,  302,  303,  301,  301,  305,  301,  301,  301,
      301,  301,  301,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,  328,   41,  313,  309,
      317,  312,  315,  322,  320,  310,  321,  314,  311,   41,
      316,   41,  319,   41,  318,   41,  324,   41,   41,   41,

      326,  325,   41,   41,   41,  323,  245,  245,  245,  245,
      333,  327,   41,  246,   41,  343,  329,  336,  364,  246,
      247,  247,  330,  331,  331,  331,  331,  331,  331,  331,
      331,  249,  249,  249,  249,   41,  249,  249,  249,  249,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,  337,   41,  341,   41,   41,   41,   41,  332,  334,
      335,  347,  340,   41,  351,   41,  342,  346,  338,  339,
      345,   41,  350,   41,   41,   41,  348,  344,  349,   41,
       41,   41,   41,   41,  358,   41,   41,   41,  352,   41,
      359,  360,   41,   41,  353,  357,  354,   41,  355,  356,

       41,  365,   41,   41,  361,  363,  362,  366,  367,   41,
      368,   41,  369,   41,   41,   41,   41,   41,  374,   41,
      385,  372,  373,  375,  370,  371,  376,   41,   41,  377,
       41,  381,   41,   41,   41,  379,  378,   41,   41,  380,
      382,   41,  383,   41,  384,   41,  331,  331,  331,  331,
       41,   41,   41,  389,  386,  392,   41,   41,  391,  387,
      393,   41,  396,  395,  388,  390,   41,   41,  397,   41,
       41,  398,   41,  394,   41,   41,  401,   41,  400,   41,
       41,   41,   41,   41,  404,   41,   41,  407,  399,  408,
      412,  402,   41,  403,  405,   41,  406,   41,  409,  410,

      411,   41,   41,   41,   41,   41,   41,  413,   41,   41,
       41,   41,  414,  415,  419,  421,  422,  423,   41,  417,
      424,  420,  418,  426,  416,   41,   41,  425,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,  430,  440,
       41,  434,  436,  427,  429,  437,   41,  438,   41,  428,
      431,   41,  435,  433,   41,   41,   41,   41,   41,  439,
       41,   41,   41,  441,  443,  442,  448,  446,   41,   41,
       41,   41,  445,  452,  453,   41,   41,  444,  455,  450,
      449,   41,   41,   41,  447,  454,  451,  459,   41,   41,
      457,  456,  458,  460,   41,  461,   41,  462,   41,   41,

       41,   41,   41,   41,   41,  465,  463,   41,  466,   41,
      470,  464,  467,   41,  468,   41,  471,   41,   41,   41,
       41,  472,   41,  469,   41,   41,   41,  474,  479,  480,
      473,   41,   41,  478,  475,   41,  476,   41,   41,  481,
      482,  483,   41,  477,  485,  484,   41,  489,   41,   41,
       41,  490,   41,  486,   41,  487,  493,  491,   41,   41,
       41,   41,  488,  495,   41,  492,   41,   41,   41,  499,
       41,   41,   41,  494,   41,   41,  500,  503,  496,  505,
      504,  497,  498,  501,   41,   41,   41,  502,   41,   41,
      509,  506,  507,   41,  511,  508,   41,  514,  512,   41,

       41,  517,  510,   41,  515,  513,   41,   41,   41,   41,
      518,   41,   41,  521,   41,   41,  516,  523,   41,   41,
       41,   41,  520,   41,  522,  524,   41,   41,  528,  519,
      525,   41,  529,   41,  526,  531,  532,   41,   41,   41,
       41,  527,  533,  530,   41,   41,  534,  535,   41,   41,
      537,   41,  541,   41,  540,   41,  536,  538,   41,   41,
       41,  542,  539,   41,   41,   41,  543,  548,   41,   41,
      549,  545,  544,   41,   41,  553,   41,   41,  546,  547,
       41,   41,  552,  554,   41,   41,   41,  551,  550,   41,
      555,   38,   38,   38,   38,   40,   40,   51,   41,   51,

       51,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,  244,   41,   41,   41,

       41,   41,  132,   41,   39,  556,    3,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556
    } ;

static yyconst flex_int16_t yy_chk[1251] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   59,    9,    9,    9,    9,   10,
       10,   10,   10,   11,   11,   11,   11,   11,   12,  561,
       20,   64,   59,   12,   13,   13,   13,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   16,   20,   47,   17,
       20,   52,   64,   47,   16,   65,   71,   20,   17,   52,
       23,   16,   17,   16,   18,   16,   13,   17,   16,   18,

       17,   18,   19,   23,   22,   25,   27,   19,   65,   71,
       25,   19,   18,   22,   68,   27,   18,   19,   25,   22,
       19,   21,   30,   25,   35,   37,   21,   25,   21,   21,
       27,   30,   26,   35,   37,   94,   21,   26,   68,   29,
       21,   54,   21,   24,   24,   24,   24,   24,   34,   54,
       26,   29,   77,   34,   24,   94,   26,   29,   36,   36,
       53,   77,   29,   24,   24,   28,   34,   32,   43,   43,
       43,   43,   32,   53,   28,   53,   28,   36,   55,   57,
       28,   61,   28,   67,   28,   32,   28,   31,   32,   56,
       57,   31,  129,   75,  129,   32,   61,   55,   67,   31,

       31,   56,   31,   31,   31,   56,   31,   44,   44,   44,
       44,   75,   31,   62,   31,   31,   73,   31,   33,   63,
       62,   69,   33,   45,   45,   45,   45,   45,   74,   69,
       33,   33,   73,   33,   63,   33,   63,   33,   78,   33,
       72,   74,   79,   33,   46,   46,   46,   46,   46,   46,
       48,   48,   48,   48,   48,   72,  559,   48,  555,  553,
       79,   78,   72,   48,   49,   49,   49,   49,   49,   49,
       50,   50,   50,   50,   50,   58,   50,   50,   66,   50,
       50,   50,   50,   50,   50,   66,   58,   76,   66,   82,
       83,   80,   81,   84,   85,   88,   76,   66,   58,   80,

       85,   81,   81,   86,   89,   82,   87,   88,   91,   83,
       76,   87,   93,   90,  104,   84,   84,  102,   84,   89,
       86,   90,   95,   91,   96,   97,   86,   93,   99,  100,
       98,   95,  103,   96,   97,   98,   99,  101,  102,  105,
      107,  104,  100,  108,  106,   95,  109,   96,  111,  107,
      101,  106,  105,  110,  109,  103,  112,  111,  108,  106,
      113,  118,  110,  107,  114,  115,  113,  108,  117,  109,
      119,  106,  122,  120,  112,  121,  110,  114,  115,  123,
      118,  117,  124,  119,  121,  125,  115,  552,  123,  130,
      124,  124,  117,  120,  125,  122,  127,  126,  121,  128,

      124,  126,  123,  124,  128,  131,  142,  145,  124,  127,
      130,  127,  134,  134,  134,  134,  135,  135,  135,  135,
      141,  144,  154,  135,  142,  147,  131,  379,  145,  135,
      144,  141,  131,  137,  137,  137,  137,  137,  147,  379,
      137,  150,  149,  151,  154,  157,  137,  138,  138,  149,
      138,  138,  138,  138,  138,  153,  150,  155,  151,  156,
      157,  158,  159,  153,  156,  161,  155,  160,  162,  163,
      164,  161,  165,  167,  158,  166,  160,  159,  163,  168,
      160,  162,  169,  170,  168,  173,  175,  171,  172,  551,
      163,  173,  164,  176,  166,  165,  171,  172,  167,  174,

      179,  170,  177,  171,  170,  175,  178,  174,  176,  169,
      180,  177,  181,  182,  183,  178,  184,  185,  179,  180,
      186,  195,  183,  188,  199,  198,  181,  202,  211,  178,
      203,  204,  185,  205,  210,  209,  182,  184,  188,  549,
      204,  195,  198,  210,  186,  209,  211,  199,  201,  201,
      201,  201,  202,  203,  201,  201,  205,  201,  201,  201,
      201,  201,  201,  214,  215,  217,  218,  219,  220,  223,
      234,  222,  240,  221,  227,  230,  240,  233,  219,  214,
      222,  218,  221,  234,  230,  215,  233,  220,  217,  235,
      221,  236,  227,  237,  223,  238,  236,  239,  242,  243,

      238,  237,  264,  251,  289,  235,  245,  245,  245,  245,
      251,  239,  255,  245,  547,  264,  242,  255,  289,  245,
      246,  246,  243,  246,  246,  246,  246,  247,  247,  247,
      247,  248,  248,  248,  248,  248,  249,  249,  249,  249,
      249,  250,  252,  254,  258,  259,  260,  261,  262,  263,
      265,  258,  267,  262,  266,  269,  268,  272,  250,  252,
      254,  268,  261,  271,  272,  275,  263,  267,  259,  260,
      266,  276,  271,  270,  277,  278,  269,  265,  270,  282,
      281,  283,  285,  286,  282,  287,  290,  288,  275,  291,
      283,  285,  295,  292,  276,  281,  277,  296,  277,  278,

      298,  290,  299,  300,  286,  288,  287,  291,  292,  303,
      295,  304,  296,  306,  546,  321,  314,  307,  304,  308,
      321,  300,  303,  306,  298,  299,  307,  310,  311,  308,
      313,  314,  319,  316,  320,  311,  310,  322,  324,  313,
      316,  326,  319,  328,  320,  329,  331,  331,  331,  331,
      333,  336,  334,  328,  322,  333,  337,  338,  329,  324,
      334,  339,  338,  337,  326,  328,  340,  341,  339,  342,
      343,  340,  344,  336,  345,  346,  343,  347,  342,  348,
      349,  357,  351,  356,  346,  354,  355,  349,  341,  351,
      357,  344,  358,  345,  347,  359,  348,  360,  354,  355,

      356,  361,  362,  363,  366,  364,  367,  358,  369,  368,
      372,  370,  359,  360,  364,  367,  368,  369,  371,  362,
      370,  366,  363,  372,  361,  373,  374,  371,  376,  375,
      380,  377,  381,  383,  389,  385,  387,  386,  376,  389,
      390,  381,  385,  373,  375,  386,  388,  387,  391,  374,
      377,  393,  383,  380,  394,  396,  398,  399,  401,  388,
      397,  402,  407,  390,  393,  391,  399,  397,  403,  406,
      418,  411,  396,  406,  406,  412,  425,  394,  411,  402,
      401,  415,  417,  416,  398,  407,  403,  417,  420,  426,
      415,  412,  416,  418,  427,  420,  429,  425,  430,  439,

      436,  440,  441,  442,  443,  429,  426,  445,  430,  447,
      441,  427,  436,  450,  439,  451,  442,  452,  453,  454,
      456,  443,  457,  440,  460,  458,  459,  447,  454,  456,
      445,  462,  463,  453,  450,  461,  451,  465,  466,  457,
      458,  459,  469,  452,  461,  460,  467,  466,  468,  470,
      471,  467,  472,  462,  474,  463,  470,  468,  475,  476,
      477,  479,  465,  472,  481,  469,  480,  486,  482,  477,
      488,  496,  504,  471,  501,  544,  479,  482,  474,  488,
      486,  475,  476,  480,  489,  493,  490,  481,  492,  494,
      493,  489,  490,  499,  496,  492,  500,  501,  499,  502,

      503,  504,  494,  505,  502,  500,  506,  507,  508,  509,
      505,  512,  510,  508,  513,  514,  503,  510,  515,  516,
      518,  521,  507,  517,  509,  512,  520,  522,  516,  506,
      513,  523,  517,  526,  514,  520,  521,  527,  525,  532,
      528,  515,  522,  518,  530,  533,  523,  525,  534,  535,
      527,  536,  533,  537,  532,  538,  526,  528,  539,  542,
      540,  534,  530,  541,  543,  545,  535,  540,  548,  554,
      541,  537,  536,  531,  550,  548,  529,  524,  538,  539,
      519,  511,  545,  550,  498,  497,  495,  543,  542,  491,
      554,  557,  557,  557,  557,  558,  558,  560,  487,  560,

      560,  485,  484,  483,  478,  473,  464,  455,  449,  448,
      446,  444,  438,  437,  435,  434,  433,  432,  431,  428,
      424,  423,  422,  421,  419,  414,  413,  410,  409,  408,
      405,  404,  400,  395,  392,  384,  382,  378,  365,  353,
      352,  350,  335,  332,  330,  327,  325,  323,  318,  317,
      315,  312,  309,  305,  302,  297,  294,  293,  284,  280,
      279,  274,  273,  257,  256,  253,  241,  232,  231,  229,
      228,  226,  225,  224,  216,  213,  212,  208,  207,  206,
      200,  197,  196,  194,  193,  192,  191,  190,  189,  187,
      152,  148,  146,  143,  140,  136,  132,  116,   92,   70,

       60,   40,   38,    8,    7,    3,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[137] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int llvmAsm_flex_debug;
int llvmAsm_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *llvmAsmtext;
#line 1 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
/*===-- Lexer.l - Scanner for llvm assembly files --------------*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file was developed by the LLVM research group and is distributed under
// the University of Illinois Open Source License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
//  This file implements the flex scanner for LLVM assembly languages files.
//
//===----------------------------------------------------------------------===*/
#line 28 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
#include "ParserInternals.h"
#include "llvm/Module.h"
#include <list>
#include "llvmAsmParser.h"
#include <cctype>
#include <cstdlib>

void set_scan_file(FILE * F){
  llvmAsm_switch_to_buffer(llvmAsm_create_buffer(F,YY_BUF_SIZE ) );
}
void set_scan_string (const char * str) {
  llvmAsm_scan_string (str);
}

// Construct a token value for a non-obsolete token
#define RET_TOK(type, Enum, sym) \
  llvmAsmlval.type = Instruction::Enum; \
  return sym

// Construct a token value for an obsolete token
#define RET_TY(CTYPE, SYM) \
  llvmAsmlval.PrimType = CTYPE;\
  return SYM

namespace llvm {

// TODO: All of the static identifiers are figured out by the lexer,
// these should be hashed to reduce the lexer size


// atoull - Convert an ascii string of decimal digits into the unsigned long
// long representation... this does not have to do input error checking,
// because we know that the input will be matched by a suitable regex...
//
static uint64_t atoull(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; Buffer++) {
    uint64_t OldRes = Result;
    Result *= 10;
    Result += *Buffer-'0';
    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}

static uint64_t HexIntToVal(const char *Buffer) {
  uint64_t Result = 0;
  for (; *Buffer; ++Buffer) {
    uint64_t OldRes = Result;
    Result *= 16;
    char C = *Buffer;
    if (C >= '0' && C <= '9')
      Result += C-'0';
    else if (C >= 'A' && C <= 'F')
      Result += C-'A'+10;
    else if (C >= 'a' && C <= 'f')
      Result += C-'a'+10;

    if (Result < OldRes)   // Uh, oh, overflow detected!!!
      GenerateError("constant bigger than 64 bits detected!");
  }
  return Result;
}


// HexToFP - Convert the ascii string in hexidecimal format to the floating
// point representation of it.
//
static double HexToFP(const char *Buffer) {
  // Behave nicely in the face of C TBAA rules... see:
  // http://www.nullstone.com/htmls/category/aliastyp.htm
  union {
    uint64_t UI;
    double FP;
  } UIntToFP;
  UIntToFP.UI = HexIntToVal(Buffer);

  assert(sizeof(double) == sizeof(uint64_t) &&
         "Data sizes incompatible on this target!");
  return UIntToFP.FP;   // Cast Hex constant to double
}


// UnEscapeLexed - Run through the specified buffer and change \xx codes to the
// appropriate character.  If AllowNull is set to false, a \00 value will cause
// an exception to be thrown.
//
// If AllowNull is set to true, the return value of the function points to the
// last character of the string in memory.
//
char *UnEscapeLexed(char *Buffer, bool AllowNull) {
  char *BOut = Buffer;
  for (char *BIn = Buffer; *BIn; ) {
    if (BIn[0] == '\\' && isxdigit(BIn[1]) && isxdigit(BIn[2])) {
      char Tmp = BIn[3]; BIn[3] = 0;     // Terminate string
      *BOut = (char)strtol(BIn+1, 0, 16);  // Convert to number
      if (!AllowNull && !*BOut)
        GenerateError("String literal cannot accept \\00 escape!");

      BIn[3] = Tmp;                  // Restore character
      BIn += 3;                      // Skip over handled chars
      ++BOut;
    } else {
      *BOut++ = *BIn++;
    }
  }

  return BOut;
}

} // End llvm namespace

using namespace llvm;

#define YY_NEVER_INTERACTIVE 1
/* Comments start with a ; and go till end of line */
/* Variable(Value) identifiers start with a % sign */
/* Label identifiers end with a colon */
/* Quoted names can contain any character except " and \ */
/* [PN]Integer: match positive and negative literal integer values that
 * are preceeded by a '%' character.  These represent unnamed variable slots.
 */
/* E[PN]Integer: match positive and negative literal integer values */
/* FPConstant - A Floating point constant.
 */
/* HexFPConstant - Floating point constant represented in IEEE format as a
 *  hexadecimal number for when exponential notation is not precise enough.
 */
/* HexIntConstant - Hexadecimal constant generated by the CFE to avoid forcing
 * it to deal with 64 bit numbers.
 */
#line 1084 "Lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int llvmAsmwrap (void );
#else
extern int llvmAsmwrap (void );
#endif
#endif

    static inline void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( llvmAsmtext, llvmAsmleng, 1, llvmAsmout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( llvmAsmin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( llvmAsmin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, llvmAsmin))==0 && ferror(llvmAsmin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(llvmAsmin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int llvmAsmlex (void);

#define YY_DECL int llvmAsmlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after llvmAsmtext and llvmAsmleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 188 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"


#line 1240 "Lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! llvmAsmin )
			llvmAsmin = stdin;

		if ( ! llvmAsmout )
			llvmAsmout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			llvmAsmensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				llvmAsm_create_buffer(llvmAsmin,YY_BUF_SIZE );
		}

		llvmAsm_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of llvmAsmtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 557 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 556 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < llvmAsmleng; ++yyl )
				if ( llvmAsmtext[yyl] == '\n' )
					   
    llvmAsmlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 190 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ /* Ignore comments for now */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 192 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return BEGINTOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 193 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ENDTOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 194 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TRUETOK;  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 195 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return FALSETOK; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 196 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DECLARE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 197 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DEFINE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 198 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return GLOBAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 199 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return CONSTANT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 200 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return INTERNAL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 201 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return LINKONCE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 202 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return WEAK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 203 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return APPENDING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 204 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DLLIMPORT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 205 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DLLEXPORT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 206 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return HIDDEN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 207 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return EXTERN_WEAK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 208 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return EXTERNAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 209 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return IMPLEMENTATION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 210 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ZEROINITIALIZER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 211 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 212 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return UNDEF; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 213 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return NULL_TOK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 214 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TO; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 215 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TAIL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 216 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TARGET; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 217 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TRIPLE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 218 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DEPLIBS; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 219 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ENDIAN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 220 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return POINTERSIZE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 221 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return DATALAYOUT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 222 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return LITTLE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 223 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return BIG; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 224 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return VOLATILE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 225 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ALIGN;  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 226 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return SECTION; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 227 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return MODULE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 228 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ASM_TOK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 229 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return SIDEEFFECT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 231 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return CC_TOK; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 232 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return CCC_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 233 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return CSRETCC_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 234 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return FASTCC_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 235 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return COLDCC_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 236 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return X86_STDCALLCC_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 237 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return X86_FASTCALLCC_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 239 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TY(Type::VoidTy,  VOID);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 240 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TY(Type::Int1Ty,  BOOL);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 241 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TY(Type::FloatTy, FLOAT); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 242 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TY(Type::DoubleTy,DOUBLE);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 243 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TY(Type::LabelTy, LABEL); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 244 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return TYPE;   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 245 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return OPAQUE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 246 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ uint64_t NumBits = atoull(llvmAsmtext+1);
                  if (NumBits < IntegerType::MIN_INT_BITS || 
                      NumBits > IntegerType::MAX_INT_BITS)
                    GenerateError("Bitwidth for integer type out of range!");
                  const Type* Ty = IntegerType::get(NumBits);
                  RET_TY(Ty, INTTYPE);
                }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 254 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Add, ADD); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 255 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Sub, SUB); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 256 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Mul, MUL); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 257 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, UDiv, UDIV); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 258 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SDiv, SDIV); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 259 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FDiv, FDIV); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 260 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, URem, UREM); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 261 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, SRem, SREM); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 262 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, FRem, FREM); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 263 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, And, AND); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 264 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Or , OR ); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 265 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(BinaryOpVal, Xor, XOR); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 266 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  ICmp,  ICMP); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 267 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal,  FCmp,  FCMP); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 268 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return EQ;  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 269 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return NE;  }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 270 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return SLT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 271 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return SGT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 272 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return SLE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 273 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return SGE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 274 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ULT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 275 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return UGT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 276 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ULE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 277 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return UGE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 278 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return OEQ; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 279 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ONE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 280 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return OLT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 281 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return OGT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 282 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return OLE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 283 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return OGE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 284 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return ORD; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 285 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return UNO; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 286 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return UEQ; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 287 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return UNE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 289 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, PHI, PHI_TOK); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 290 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Call, CALL); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 291 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, Trunc, TRUNC); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 292 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, ZExt, ZEXT); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 293 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SExt, SEXT); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 294 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPTrunc, FPTRUNC); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 295 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPExt, FPEXT); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 296 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, UIToFP, UITOFP); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 297 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, SIToFP, SITOFP); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 298 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToUI, FPTOUI); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 299 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, FPToSI, FPTOSI); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 300 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, IntToPtr, INTTOPTR); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 301 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, PtrToInt, PTRTOINT); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 302 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(CastOpVal, BitCast, BITCAST); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 303 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Select, SELECT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 304 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, Shl, SHL); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 305 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, LShr, LSHR); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 306 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, AShr, ASHR); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 307 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, VAArg , VAARG); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 308 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Ret, RET); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 309 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Br, BR); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 310 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Switch, SWITCH); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 311 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Invoke, INVOKE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 312 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unwind, UNWIND); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 313 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(TermOpVal, Unreachable, UNREACHABLE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 315 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Malloc, MALLOC); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 316 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Alloca, ALLOCA); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 317 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Free, FREE); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 318 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Load, LOAD); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 319 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, Store, STORE); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 320 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(MemOpVal, GetElementPtr, GETELEMENTPTR); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 322 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ExtractElement, EXTRACTELEMENT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 323 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, InsertElement, INSERTELEMENT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 324 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ RET_TOK(OtherOpVal, ShuffleVector, SHUFFLEVECTOR); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 327 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  UnEscapeLexed(llvmAsmtext+1);
                  llvmAsmlval.StrVal = strdup(llvmAsmtext+1);             // Skip %
                  return VAR_ID;
                }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 332 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  llvmAsmtext[strlen(llvmAsmtext)-1] = 0;  // nuke colon
                  UnEscapeLexed(llvmAsmtext);
                  llvmAsmlval.StrVal = strdup(llvmAsmtext);
                  return LABELSTR;
                }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 338 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  llvmAsmtext[strlen(llvmAsmtext)-2] = 0;  // nuke colon, end quote
                  UnEscapeLexed(llvmAsmtext+1);
                  llvmAsmlval.StrVal = strdup(llvmAsmtext+1);
                  return LABELSTR;
                }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 345 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ // Note that we cannot unescape a string constant here!  The
                   // string constant might contain a \00 which would not be
                   // understood by the string stuff.  It is valid to make a
                   // [sbyte] c"Hello World\00" constant, for example.
                   //
                   llvmAsmtext[strlen(llvmAsmtext)-1] = 0;           // nuke end quote
                   llvmAsmlval.StrVal = strdup(llvmAsmtext+1);  // Nuke start quote
                   return STRINGCONSTANT;
                 }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 356 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.UInt64Val = atoull(llvmAsmtext); return EUINT64VAL; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 357 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(llvmAsmtext+1);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT64_MAX+1)
                    GenerateError("Constant too large for signed 64 bits!");
                  llvmAsmlval.SInt64Val = -Val;
                  return ESINT64VAL;
                }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 365 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                   llvmAsmlval.UInt64Val = HexIntToVal(llvmAsmtext+3);
                   return llvmAsmtext[0] == 's' ? ESINT64VAL : EUINT64VAL;
                 }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 370 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(llvmAsmtext+1);
                  if ((unsigned)Val != Val)
                    GenerateError("Invalid value number (too large)!");
                  llvmAsmlval.UIntVal = unsigned(Val);
                  return UINTVAL;
                }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 377 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  uint64_t Val = atoull(llvmAsmtext+2);
                  // +1:  we have bigger negative range
                  if (Val > (uint64_t)INT32_MAX+1)
                    GenerateError("Constant too large for signed 32 bits!");
                  llvmAsmlval.SIntVal = (int)-Val;
                  return SINTVAL;
                }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 386 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = atof(llvmAsmtext); return FPVAL; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 387 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ llvmAsmlval.FPVal = HexToFP(llvmAsmtext); return FPVAL; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 389 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{
                  /* Make sure to free the internal buffers for flex when we are
                   * done reading our input!
                   */
                  llvmAsm_delete_buffer(YY_CURRENT_BUFFER);
                  return EOF;
                }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 397 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ /* Ignore whitespace */ }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 398 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
{ return llvmAsmtext[0]; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 400 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2073 "Lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed llvmAsmin at a new source and called
			 * llvmAsmlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = llvmAsmin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( llvmAsmwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * llvmAsmtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of llvmAsmlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					llvmAsmrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			llvmAsmrestart(llvmAsmin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 557 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 557 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 556);

	return yy_is_jam ? 0 : yy_current_state;
}

    static inline void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up llvmAsmtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --llvmAsmlineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					llvmAsmrestart(llvmAsmin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( llvmAsmwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve llvmAsmtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    llvmAsmlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void llvmAsmrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        llvmAsmensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            llvmAsm_create_buffer(llvmAsmin,YY_BUF_SIZE );
	}

	llvmAsm_init_buffer(YY_CURRENT_BUFFER,input_file );
	llvmAsm_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void llvmAsm_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		llvmAsmpop_buffer_state();
	 *		llvmAsmpush_buffer_state(new_buffer);
     */
	llvmAsmensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	llvmAsm_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (llvmAsmwrap()) processing, but the only time this flag
	 * is looked at is after llvmAsmwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void llvmAsm_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	llvmAsmin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE llvmAsm_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) llvmAsmalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in llvmAsm_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) llvmAsmalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in llvmAsm_create_buffer()" );

	b->yy_is_our_buffer = 1;

	llvmAsm_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with llvmAsm_create_buffer()
 * 
 */
    void llvmAsm_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		llvmAsmfree((void *) b->yy_ch_buf  );

	llvmAsmfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a llvmAsmrestart() or at EOF.
 */
    static void llvmAsm_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	llvmAsm_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then llvmAsm_init_buffer was _probably_
     * called from llvmAsmrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void llvmAsm_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		llvmAsm_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void llvmAsmpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	llvmAsmensure_buffer_stack();

	/* This block is copied from llvmAsm_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from llvmAsm_switch_to_buffer. */
	llvmAsm_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void llvmAsmpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	llvmAsm_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		llvmAsm_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void llvmAsmensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)llvmAsmalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)llvmAsmrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE llvmAsm_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) llvmAsmalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in llvmAsm_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	llvmAsm_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to llvmAsmlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       llvmAsm_scan_bytes() instead.
 */
YY_BUFFER_STATE llvmAsm_scan_string (yyconst char * yystr )
{
    
	return llvmAsm_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to llvmAsmlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE llvmAsm_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) llvmAsmalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in llvmAsm_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = llvmAsm_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in llvmAsm_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up llvmAsmtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		llvmAsmtext[llvmAsmleng] = (yy_hold_char); \
		(yy_c_buf_p) = llvmAsmtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		llvmAsmleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int llvmAsmget_lineno  (void)
{
        
    return llvmAsmlineno;
}

/** Get the input stream.
 * 
 */
FILE *llvmAsmget_in  (void)
{
        return llvmAsmin;
}

/** Get the output stream.
 * 
 */
FILE *llvmAsmget_out  (void)
{
        return llvmAsmout;
}

/** Get the length of the current token.
 * 
 */
int llvmAsmget_leng  (void)
{
        return llvmAsmleng;
}

/** Get the current token.
 * 
 */

char *llvmAsmget_text  (void)
{
        return llvmAsmtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void llvmAsmset_lineno (int  line_number )
{
    
    llvmAsmlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see llvmAsm_switch_to_buffer
 */
void llvmAsmset_in (FILE *  in_str )
{
        llvmAsmin = in_str ;
}

void llvmAsmset_out (FILE *  out_str )
{
        llvmAsmout = out_str ;
}

int llvmAsmget_debug  (void)
{
        return llvmAsm_flex_debug;
}

void llvmAsmset_debug (int  bdebug )
{
        llvmAsm_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from llvmAsmlex_destroy(), so don't allocate here.
     */

    /* We do not touch llvmAsmlineno unless the option is enabled. */
    llvmAsmlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    llvmAsmin = stdin;
    llvmAsmout = stdout;
#else
    llvmAsmin = (FILE *) 0;
    llvmAsmout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * llvmAsmlex_init()
     */
    return 0;
}

/* llvmAsmlex_destroy is for both reentrant and non-reentrant scanners. */
int llvmAsmlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		llvmAsm_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		llvmAsmpop_buffer_state();
	}

	/* Destroy the stack itself. */
	llvmAsmfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * llvmAsmlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *llvmAsmalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *llvmAsmrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void llvmAsmfree (void * ptr )
{
	free( (char *) ptr );	/* see llvmAsmrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 400 "/home/asl/proj/llvm/src/lib/AsmParser/Lexer.l"



