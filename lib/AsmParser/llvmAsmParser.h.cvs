/* A Bison parser, made by GNU Bison 1.875c.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ESINT64VAL = 258,
     EUINT64VAL = 259,
     ESAPINTVAL = 260,
     EUAPINTVAL = 261,
     LOCALVAL_ID = 262,
     GLOBALVAL_ID = 263,
     FPVAL = 264,
     VOID = 265,
     INTTYPE = 266,
     FLOAT = 267,
     DOUBLE = 268,
     X86_FP80 = 269,
     FP128 = 270,
     PPC_FP128 = 271,
     LABEL = 272,
     TYPE = 273,
     LOCALVAR = 274,
     GLOBALVAR = 275,
     LABELSTR = 276,
     STRINGCONSTANT = 277,
     ATSTRINGCONSTANT = 278,
     PCTSTRINGCONSTANT = 279,
     ZEROINITIALIZER = 280,
     TRUETOK = 281,
     FALSETOK = 282,
     BEGINTOK = 283,
     ENDTOK = 284,
     DECLARE = 285,
     DEFINE = 286,
     GLOBAL = 287,
     CONSTANT = 288,
     SECTION = 289,
     ALIAS = 290,
     VOLATILE = 291,
     THREAD_LOCAL = 292,
     TO = 293,
     DOTDOTDOT = 294,
     NULL_TOK = 295,
     UNDEF = 296,
     INTERNAL = 297,
     LINKONCE = 298,
     WEAK = 299,
     APPENDING = 300,
     DLLIMPORT = 301,
     DLLEXPORT = 302,
     EXTERN_WEAK = 303,
     OPAQUE = 304,
     EXTERNAL = 305,
     TARGET = 306,
     TRIPLE = 307,
     ALIGN = 308,
     DEPLIBS = 309,
     CALL = 310,
     TAIL = 311,
     ASM_TOK = 312,
     MODULE = 313,
     SIDEEFFECT = 314,
     CC_TOK = 315,
     CCC_TOK = 316,
     FASTCC_TOK = 317,
     COLDCC_TOK = 318,
     X86_STDCALLCC_TOK = 319,
     X86_FASTCALLCC_TOK = 320,
     DATALAYOUT = 321,
     RET = 322,
     BR = 323,
     SWITCH = 324,
     INVOKE = 325,
     UNWIND = 326,
     UNREACHABLE = 327,
     ADD = 328,
     SUB = 329,
     MUL = 330,
     UDIV = 331,
     SDIV = 332,
     FDIV = 333,
     UREM = 334,
     SREM = 335,
     FREM = 336,
     AND = 337,
     OR = 338,
     XOR = 339,
     SHL = 340,
     LSHR = 341,
     ASHR = 342,
     ICMP = 343,
     FCMP = 344,
     EQ = 345,
     NE = 346,
     SLT = 347,
     SGT = 348,
     SLE = 349,
     SGE = 350,
     ULT = 351,
     UGT = 352,
     ULE = 353,
     UGE = 354,
     OEQ = 355,
     ONE = 356,
     OLT = 357,
     OGT = 358,
     OLE = 359,
     OGE = 360,
     ORD = 361,
     UNO = 362,
     UEQ = 363,
     UNE = 364,
     MALLOC = 365,
     ALLOCA = 366,
     FREE = 367,
     LOAD = 368,
     STORE = 369,
     GETELEMENTPTR = 370,
     TRUNC = 371,
     ZEXT = 372,
     SEXT = 373,
     FPTRUNC = 374,
     FPEXT = 375,
     BITCAST = 376,
     UITOFP = 377,
     SITOFP = 378,
     FPTOUI = 379,
     FPTOSI = 380,
     INTTOPTR = 381,
     PTRTOINT = 382,
     PHI_TOK = 383,
     SELECT = 384,
     VAARG = 385,
     EXTRACTELEMENT = 386,
     INSERTELEMENT = 387,
     SHUFFLEVECTOR = 388,
     SIGNEXT = 389,
     ZEROEXT = 390,
     NORETURN = 391,
     INREG = 392,
     SRET = 393,
     NOUNWIND = 394,
     NOALIAS = 395,
     BYVAL = 396,
     NEST = 397,
     DEFAULT = 398,
     HIDDEN = 399,
     PROTECTED = 400
   };
#endif
#define ESINT64VAL 258
#define EUINT64VAL 259
#define ESAPINTVAL 260
#define EUAPINTVAL 261
#define LOCALVAL_ID 262
#define GLOBALVAL_ID 263
#define FPVAL 264
#define VOID 265
#define INTTYPE 266
#define FLOAT 267
#define DOUBLE 268
#define X86_FP80 269
#define FP128 270
#define PPC_FP128 271
#define LABEL 272
#define TYPE 273
#define LOCALVAR 274
#define GLOBALVAR 275
#define LABELSTR 276
#define STRINGCONSTANT 277
#define ATSTRINGCONSTANT 278
#define PCTSTRINGCONSTANT 279
#define ZEROINITIALIZER 280
#define TRUETOK 281
#define FALSETOK 282
#define BEGINTOK 283
#define ENDTOK 284
#define DECLARE 285
#define DEFINE 286
#define GLOBAL 287
#define CONSTANT 288
#define SECTION 289
#define ALIAS 290
#define VOLATILE 291
#define THREAD_LOCAL 292
#define TO 293
#define DOTDOTDOT 294
#define NULL_TOK 295
#define UNDEF 296
#define INTERNAL 297
#define LINKONCE 298
#define WEAK 299
#define APPENDING 300
#define DLLIMPORT 301
#define DLLEXPORT 302
#define EXTERN_WEAK 303
#define OPAQUE 304
#define EXTERNAL 305
#define TARGET 306
#define TRIPLE 307
#define ALIGN 308
#define DEPLIBS 309
#define CALL 310
#define TAIL 311
#define ASM_TOK 312
#define MODULE 313
#define SIDEEFFECT 314
#define CC_TOK 315
#define CCC_TOK 316
#define FASTCC_TOK 317
#define COLDCC_TOK 318
#define X86_STDCALLCC_TOK 319
#define X86_FASTCALLCC_TOK 320
#define DATALAYOUT 321
#define RET 322
#define BR 323
#define SWITCH 324
#define INVOKE 325
#define UNWIND 326
#define UNREACHABLE 327
#define ADD 328
#define SUB 329
#define MUL 330
#define UDIV 331
#define SDIV 332
#define FDIV 333
#define UREM 334
#define SREM 335
#define FREM 336
#define AND 337
#define OR 338
#define XOR 339
#define SHL 340
#define LSHR 341
#define ASHR 342
#define ICMP 343
#define FCMP 344
#define EQ 345
#define NE 346
#define SLT 347
#define SGT 348
#define SLE 349
#define SGE 350
#define ULT 351
#define UGT 352
#define ULE 353
#define UGE 354
#define OEQ 355
#define ONE 356
#define OLT 357
#define OGT 358
#define OLE 359
#define OGE 360
#define ORD 361
#define UNO 362
#define UEQ 363
#define UNE 364
#define MALLOC 365
#define ALLOCA 366
#define FREE 367
#define LOAD 368
#define STORE 369
#define GETELEMENTPTR 370
#define TRUNC 371
#define ZEXT 372
#define SEXT 373
#define FPTRUNC 374
#define FPEXT 375
#define BITCAST 376
#define UITOFP 377
#define SITOFP 378
#define FPTOUI 379
#define FPTOSI 380
#define INTTOPTR 381
#define PTRTOINT 382
#define PHI_TOK 383
#define SELECT 384
#define VAARG 385
#define EXTRACTELEMENT 386
#define INSERTELEMENT 387
#define SHUFFLEVECTOR 388
#define SIGNEXT 389
#define ZEROEXT 390
#define NORETURN 391
#define INREG 392
#define SRET 393
#define NOUNWIND 394
#define NOALIAS 395
#define BYVAL 396
#define NEST 397
#define DEFAULT 398
#define HIDDEN 399
#define PROTECTED 400




#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 963 "/users/dag/projects/cascade/llvm.modified/lib/AsmParser/llvmAsmParser.y"
typedef union YYSTYPE {
  llvm::Module                           *ModuleVal;
  llvm::Function                         *FunctionVal;
  llvm::BasicBlock                       *BasicBlockVal;
  llvm::TerminatorInst                   *TermInstVal;
  llvm::Instruction                      *InstVal;
  llvm::Constant                         *ConstVal;

  const llvm::Type                       *PrimType;
  std::list<llvm::PATypeHolder>          *TypeList;
  llvm::PATypeHolder                     *TypeVal;
  llvm::Value                            *ValueVal;
  std::vector<llvm::Value*>              *ValueList;
  llvm::ArgListType                      *ArgList;
  llvm::TypeWithAttrs                     TypeWithAttrs;
  llvm::TypeWithAttrsList                *TypeWithAttrsList;
  llvm::ValueRefList                     *ValueRefList;

  // Represent the RHS of PHI node
  std::list<std::pair<llvm::Value*,
                      llvm::BasicBlock*> > *PHIList;
  std::vector<std::pair<llvm::Constant*, llvm::BasicBlock*> > *JumpTable;
  std::vector<llvm::Constant*>           *ConstVector;

  llvm::GlobalValue::LinkageTypes         Linkage;
  llvm::GlobalValue::VisibilityTypes      Visibility;
  uint16_t                          ParamAttrs;
  llvm::APInt                       *APIntVal;
  int64_t                           SInt64Val;
  uint64_t                          UInt64Val;
  int                               SIntVal;
  unsigned                          UIntVal;
  double                            FPVal;
  bool                              BoolVal;

  std::string                      *StrVal;   // This memory must be deleted
  llvm::ValID                       ValIDVal;

  llvm::Instruction::BinaryOps      BinaryOpVal;
  llvm::Instruction::TermOps        TermOpVal;
  llvm::Instruction::MemoryOps      MemOpVal;
  llvm::Instruction::CastOps        CastOpVal;
  llvm::Instruction::OtherOps       OtherOpVal;
  llvm::ICmpInst::Predicate         IPredicate;
  llvm::FCmpInst::Predicate         FPredicate;
} YYSTYPE;
/* Line 1268 of yacc.c.  */
#line 374 "llvmAsmParser.tab.h"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE llvmAsmlval;



