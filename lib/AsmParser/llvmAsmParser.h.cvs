/* A Bison parser, made by GNU Bison 2.1.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ESINT64VAL = 258,
     EUINT64VAL = 259,
     SINTVAL = 260,
     UINTVAL = 261,
     FPVAL = 262,
     VOID = 263,
     BOOL = 264,
     SBYTE = 265,
     UBYTE = 266,
     SHORT = 267,
     USHORT = 268,
     INT = 269,
     UINT = 270,
     LONG = 271,
     ULONG = 272,
     FLOAT = 273,
     DOUBLE = 274,
     LABEL = 275,
     TYPE = 276,
     VAR_ID = 277,
     LABELSTR = 278,
     STRINGCONSTANT = 279,
     IMPLEMENTATION = 280,
     ZEROINITIALIZER = 281,
     TRUETOK = 282,
     FALSETOK = 283,
     BEGINTOK = 284,
     ENDTOK = 285,
     DECLARE = 286,
     DEFINE = 287,
     GLOBAL = 288,
     CONSTANT = 289,
     SECTION = 290,
     VOLATILE = 291,
     TO = 292,
     DOTDOTDOT = 293,
     NULL_TOK = 294,
     UNDEF = 295,
     CONST = 296,
     INTERNAL = 297,
     LINKONCE = 298,
     WEAK = 299,
     APPENDING = 300,
     DLLIMPORT = 301,
     DLLEXPORT = 302,
     EXTERN_WEAK = 303,
     OPAQUE = 304,
     NOT = 305,
     EXTERNAL = 306,
     TARGET = 307,
     TRIPLE = 308,
     ENDIAN = 309,
     POINTERSIZE = 310,
     LITTLE = 311,
     BIG = 312,
     ALIGN = 313,
     DEPLIBS = 314,
     CALL = 315,
     TAIL = 316,
     ASM_TOK = 317,
     MODULE = 318,
     SIDEEFFECT = 319,
     CC_TOK = 320,
     CCC_TOK = 321,
     CSRETCC_TOK = 322,
     FASTCC_TOK = 323,
     COLDCC_TOK = 324,
     X86_STDCALLCC_TOK = 325,
     X86_FASTCALLCC_TOK = 326,
     DATALAYOUT = 327,
     RET = 328,
     BR = 329,
     SWITCH = 330,
     INVOKE = 331,
     UNWIND = 332,
     UNREACHABLE = 333,
     ADD = 334,
     SUB = 335,
     MUL = 336,
     UDIV = 337,
     SDIV = 338,
     FDIV = 339,
     UREM = 340,
     SREM = 341,
     FREM = 342,
     AND = 343,
     OR = 344,
     XOR = 345,
     ICMP = 346,
     FCMP = 347,
     EQ = 348,
     NE = 349,
     SLT = 350,
     SGT = 351,
     SLE = 352,
     SGE = 353,
     ULT = 354,
     UGT = 355,
     ULE = 356,
     UGE = 357,
     OEQ = 358,
     ONE = 359,
     OLT = 360,
     OGT = 361,
     OLE = 362,
     OGE = 363,
     ORD = 364,
     UNO = 365,
     UEQ = 366,
     UNE = 367,
     MALLOC = 368,
     ALLOCA = 369,
     FREE = 370,
     LOAD = 371,
     STORE = 372,
     GETELEMENTPTR = 373,
     TRUNC = 374,
     ZEXT = 375,
     SEXT = 376,
     FPTRUNC = 377,
     FPEXT = 378,
     BITCAST = 379,
     UITOFP = 380,
     SITOFP = 381,
     FPTOUI = 382,
     FPTOSI = 383,
     INTTOPTR = 384,
     PTRTOINT = 385,
     PHI_TOK = 386,
     SELECT = 387,
     SHL = 388,
     LSHR = 389,
     ASHR = 390,
     VAARG = 391,
     EXTRACTELEMENT = 392,
     INSERTELEMENT = 393,
     SHUFFLEVECTOR = 394
   };
#endif
/* Tokens.  */
#define ESINT64VAL 258
#define EUINT64VAL 259
#define SINTVAL 260
#define UINTVAL 261
#define FPVAL 262
#define VOID 263
#define BOOL 264
#define SBYTE 265
#define UBYTE 266
#define SHORT 267
#define USHORT 268
#define INT 269
#define UINT 270
#define LONG 271
#define ULONG 272
#define FLOAT 273
#define DOUBLE 274
#define LABEL 275
#define TYPE 276
#define VAR_ID 277
#define LABELSTR 278
#define STRINGCONSTANT 279
#define IMPLEMENTATION 280
#define ZEROINITIALIZER 281
#define TRUETOK 282
#define FALSETOK 283
#define BEGINTOK 284
#define ENDTOK 285
#define DECLARE 286
#define DEFINE 287
#define GLOBAL 288
#define CONSTANT 289
#define SECTION 290
#define VOLATILE 291
#define TO 292
#define DOTDOTDOT 293
#define NULL_TOK 294
#define UNDEF 295
#define CONST 296
#define INTERNAL 297
#define LINKONCE 298
#define WEAK 299
#define APPENDING 300
#define DLLIMPORT 301
#define DLLEXPORT 302
#define EXTERN_WEAK 303
#define OPAQUE 304
#define NOT 305
#define EXTERNAL 306
#define TARGET 307
#define TRIPLE 308
#define ENDIAN 309
#define POINTERSIZE 310
#define LITTLE 311
#define BIG 312
#define ALIGN 313
#define DEPLIBS 314
#define CALL 315
#define TAIL 316
#define ASM_TOK 317
#define MODULE 318
#define SIDEEFFECT 319
#define CC_TOK 320
#define CCC_TOK 321
#define CSRETCC_TOK 322
#define FASTCC_TOK 323
#define COLDCC_TOK 324
#define X86_STDCALLCC_TOK 325
#define X86_FASTCALLCC_TOK 326
#define DATALAYOUT 327
#define RET 328
#define BR 329
#define SWITCH 330
#define INVOKE 331
#define UNWIND 332
#define UNREACHABLE 333
#define ADD 334
#define SUB 335
#define MUL 336
#define UDIV 337
#define SDIV 338
#define FDIV 339
#define UREM 340
#define SREM 341
#define FREM 342
#define AND 343
#define OR 344
#define XOR 345
#define ICMP 346
#define FCMP 347
#define EQ 348
#define NE 349
#define SLT 350
#define SGT 351
#define SLE 352
#define SGE 353
#define ULT 354
#define UGT 355
#define ULE 356
#define UGE 357
#define OEQ 358
#define ONE 359
#define OLT 360
#define OGT 361
#define OLE 362
#define OGE 363
#define ORD 364
#define UNO 365
#define UEQ 366
#define UNE 367
#define MALLOC 368
#define ALLOCA 369
#define FREE 370
#define LOAD 371
#define STORE 372
#define GETELEMENTPTR 373
#define TRUNC 374
#define ZEXT 375
#define SEXT 376
#define FPTRUNC 377
#define FPEXT 378
#define BITCAST 379
#define UITOFP 380
#define SITOFP 381
#define FPTOUI 382
#define FPTOSI 383
#define INTTOPTR 384
#define PTRTOINT 385
#define PHI_TOK 386
#define SELECT 387
#define SHL 388
#define LSHR 389
#define ASHR 390
#define VAARG 391
#define EXTRACTELEMENT 392
#define INSERTELEMENT 393
#define SHUFFLEVECTOR 394




#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 855 "/proj/llvm/llvm-1/lib/AsmParser/llvmAsmParser.y"
typedef union YYSTYPE {
  llvm::Module                           *ModuleVal;
  llvm::Function                         *FunctionVal;
  std::pair<llvm::PATypeHolder*, char*>  *ArgVal;
  llvm::BasicBlock                       *BasicBlockVal;
  llvm::TerminatorInst                   *TermInstVal;
  llvm::Instruction                      *InstVal;
  llvm::Constant                         *ConstVal;

  const llvm::Type                       *PrimType;
  llvm::PATypeHolder                     *TypeVal;
  llvm::Value                            *ValueVal;

  std::vector<std::pair<llvm::PATypeHolder*,char*> > *ArgList;
  std::vector<llvm::Value*>              *ValueList;
  std::list<llvm::PATypeHolder>          *TypeList;
  // Represent the RHS of PHI node
  std::list<std::pair<llvm::Value*,
                      llvm::BasicBlock*> > *PHIList;
  std::vector<std::pair<llvm::Constant*, llvm::BasicBlock*> > *JumpTable;
  std::vector<llvm::Constant*>           *ConstVector;

  llvm::GlobalValue::LinkageTypes         Linkage;
  int64_t                           SInt64Val;
  uint64_t                          UInt64Val;
  int                               SIntVal;
  unsigned                          UIntVal;
  double                            FPVal;
  bool                              BoolVal;

  char                             *StrVal;   // This memory is strdup'd!
  llvm::ValID                       ValIDVal; // strdup'd memory maybe!

  llvm::Instruction::BinaryOps      BinaryOpVal;
  llvm::Instruction::TermOps        TermOpVal;
  llvm::Instruction::MemoryOps      MemOpVal;
  llvm::Instruction::CastOps        CastOpVal;
  llvm::Instruction::OtherOps       OtherOpVal;
  llvm::Module::Endianness          Endianness;
  llvm::ICmpInst::Predicate         IPredicate;
  llvm::FCmpInst::Predicate         FPredicate;
} YYSTYPE;
/* Line 1447 of yacc.c.  */
#line 359 "llvmAsmParser.tab.h"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE llvmAsmlval;



