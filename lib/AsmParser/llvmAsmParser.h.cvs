/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton interface for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ESINT64VAL = 258,
     EUINT64VAL = 259,
     LOCALVAL_ID = 260,
     GLOBALVAL_ID = 261,
     FPVAL = 262,
     VOID = 263,
     INTTYPE = 264,
     FLOAT = 265,
     DOUBLE = 266,
     LABEL = 267,
     TYPE = 268,
     LOCALVAR = 269,
     GLOBALVAR = 270,
     LABELSTR = 271,
     STRINGCONSTANT = 272,
     ATSTRINGCONSTANT = 273,
     IMPLEMENTATION = 274,
     ZEROINITIALIZER = 275,
     TRUETOK = 276,
     FALSETOK = 277,
     BEGINTOK = 278,
     ENDTOK = 279,
     DECLARE = 280,
     DEFINE = 281,
     GLOBAL = 282,
     CONSTANT = 283,
     SECTION = 284,
     VOLATILE = 285,
     TO = 286,
     DOTDOTDOT = 287,
     NULL_TOK = 288,
     UNDEF = 289,
     INTERNAL = 290,
     LINKONCE = 291,
     WEAK = 292,
     APPENDING = 293,
     DLLIMPORT = 294,
     DLLEXPORT = 295,
     EXTERN_WEAK = 296,
     OPAQUE = 297,
     EXTERNAL = 298,
     TARGET = 299,
     TRIPLE = 300,
     ALIGN = 301,
     DEPLIBS = 302,
     CALL = 303,
     TAIL = 304,
     ASM_TOK = 305,
     MODULE = 306,
     SIDEEFFECT = 307,
     CC_TOK = 308,
     CCC_TOK = 309,
     FASTCC_TOK = 310,
     COLDCC_TOK = 311,
     X86_STDCALLCC_TOK = 312,
     X86_FASTCALLCC_TOK = 313,
     DATALAYOUT = 314,
     RET = 315,
     BR = 316,
     SWITCH = 317,
     INVOKE = 318,
     UNWIND = 319,
     UNREACHABLE = 320,
     ADD = 321,
     SUB = 322,
     MUL = 323,
     UDIV = 324,
     SDIV = 325,
     FDIV = 326,
     UREM = 327,
     SREM = 328,
     FREM = 329,
     AND = 330,
     OR = 331,
     XOR = 332,
     SHL = 333,
     LSHR = 334,
     ASHR = 335,
     ICMP = 336,
     FCMP = 337,
     EQ = 338,
     NE = 339,
     SLT = 340,
     SGT = 341,
     SLE = 342,
     SGE = 343,
     ULT = 344,
     UGT = 345,
     ULE = 346,
     UGE = 347,
     OEQ = 348,
     ONE = 349,
     OLT = 350,
     OGT = 351,
     OLE = 352,
     OGE = 353,
     ORD = 354,
     UNO = 355,
     UEQ = 356,
     UNE = 357,
     MALLOC = 358,
     ALLOCA = 359,
     FREE = 360,
     LOAD = 361,
     STORE = 362,
     GETELEMENTPTR = 363,
     TRUNC = 364,
     ZEXT = 365,
     SEXT = 366,
     FPTRUNC = 367,
     FPEXT = 368,
     BITCAST = 369,
     UITOFP = 370,
     SITOFP = 371,
     FPTOUI = 372,
     FPTOSI = 373,
     INTTOPTR = 374,
     PTRTOINT = 375,
     PHI_TOK = 376,
     SELECT = 377,
     VAARG = 378,
     EXTRACTELEMENT = 379,
     INSERTELEMENT = 380,
     SHUFFLEVECTOR = 381,
     NORETURN = 382,
     INREG = 383,
     SRET = 384,
     DEFAULT = 385,
     HIDDEN = 386
   };
#endif
/* Tokens.  */
#define ESINT64VAL 258
#define EUINT64VAL 259
#define LOCALVAL_ID 260
#define GLOBALVAL_ID 261
#define FPVAL 262
#define VOID 263
#define INTTYPE 264
#define FLOAT 265
#define DOUBLE 266
#define LABEL 267
#define TYPE 268
#define LOCALVAR 269
#define GLOBALVAR 270
#define LABELSTR 271
#define STRINGCONSTANT 272
#define ATSTRINGCONSTANT 273
#define IMPLEMENTATION 274
#define ZEROINITIALIZER 275
#define TRUETOK 276
#define FALSETOK 277
#define BEGINTOK 278
#define ENDTOK 279
#define DECLARE 280
#define DEFINE 281
#define GLOBAL 282
#define CONSTANT 283
#define SECTION 284
#define VOLATILE 285
#define TO 286
#define DOTDOTDOT 287
#define NULL_TOK 288
#define UNDEF 289
#define INTERNAL 290
#define LINKONCE 291
#define WEAK 292
#define APPENDING 293
#define DLLIMPORT 294
#define DLLEXPORT 295
#define EXTERN_WEAK 296
#define OPAQUE 297
#define EXTERNAL 298
#define TARGET 299
#define TRIPLE 300
#define ALIGN 301
#define DEPLIBS 302
#define CALL 303
#define TAIL 304
#define ASM_TOK 305
#define MODULE 306
#define SIDEEFFECT 307
#define CC_TOK 308
#define CCC_TOK 309
#define FASTCC_TOK 310
#define COLDCC_TOK 311
#define X86_STDCALLCC_TOK 312
#define X86_FASTCALLCC_TOK 313
#define DATALAYOUT 314
#define RET 315
#define BR 316
#define SWITCH 317
#define INVOKE 318
#define UNWIND 319
#define UNREACHABLE 320
#define ADD 321
#define SUB 322
#define MUL 323
#define UDIV 324
#define SDIV 325
#define FDIV 326
#define UREM 327
#define SREM 328
#define FREM 329
#define AND 330
#define OR 331
#define XOR 332
#define SHL 333
#define LSHR 334
#define ASHR 335
#define ICMP 336
#define FCMP 337
#define EQ 338
#define NE 339
#define SLT 340
#define SGT 341
#define SLE 342
#define SGE 343
#define ULT 344
#define UGT 345
#define ULE 346
#define UGE 347
#define OEQ 348
#define ONE 349
#define OLT 350
#define OGT 351
#define OLE 352
#define OGE 353
#define ORD 354
#define UNO 355
#define UEQ 356
#define UNE 357
#define MALLOC 358
#define ALLOCA 359
#define FREE 360
#define LOAD 361
#define STORE 362
#define GETELEMENTPTR 363
#define TRUNC 364
#define ZEXT 365
#define SEXT 366
#define FPTRUNC 367
#define FPEXT 368
#define BITCAST 369
#define UITOFP 370
#define SITOFP 371
#define FPTOUI 372
#define FPTOSI 373
#define INTTOPTR 374
#define PTRTOINT 375
#define PHI_TOK 376
#define SELECT 377
#define VAARG 378
#define EXTRACTELEMENT 379
#define INSERTELEMENT 380
#define SHUFFLEVECTOR 381
#define NORETURN 382
#define INREG 383
#define SRET 384
#define DEFAULT 385
#define HIDDEN 386




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 901 "/Users/sabre/llvm/lib/AsmParser/llvmAsmParser.y"
{
  llvm::Module                           *ModuleVal;
  llvm::Function                         *FunctionVal;
  llvm::BasicBlock                       *BasicBlockVal;
  llvm::TerminatorInst                   *TermInstVal;
  llvm::Instruction                      *InstVal;
  llvm::Constant                         *ConstVal;

  const llvm::Type                       *PrimType;
  std::list<llvm::PATypeHolder>          *TypeList;
  llvm::PATypeHolder                     *TypeVal;
  llvm::Value                            *ValueVal;
  std::vector<llvm::Value*>              *ValueList;
  llvm::ArgListType                      *ArgList;
  llvm::TypeWithAttrs                     TypeWithAttrs;
  llvm::TypeWithAttrsList                *TypeWithAttrsList;
  llvm::ValueRefList                     *ValueRefList;

  // Represent the RHS of PHI node
  std::list<std::pair<llvm::Value*,
                      llvm::BasicBlock*> > *PHIList;
  std::vector<std::pair<llvm::Constant*, llvm::BasicBlock*> > *JumpTable;
  std::vector<llvm::Constant*>           *ConstVector;

  llvm::GlobalValue::LinkageTypes         Linkage;
  llvm::GlobalValue::VisibilityTypes      Visibility;
  llvm::FunctionType::ParameterAttributes ParamAttrs;
  int64_t                           SInt64Val;
  uint64_t                          UInt64Val;
  int                               SIntVal;
  unsigned                          UIntVal;
  double                            FPVal;
  bool                              BoolVal;

  char                             *StrVal;   // This memory is strdup'd!
  llvm::ValID                       ValIDVal; // strdup'd memory maybe!

  llvm::Instruction::BinaryOps      BinaryOpVal;
  llvm::Instruction::TermOps        TermOpVal;
  llvm::Instruction::MemoryOps      MemOpVal;
  llvm::Instruction::CastOps        CastOpVal;
  llvm::Instruction::OtherOps       OtherOpVal;
  llvm::ICmpInst::Predicate         IPredicate;
  llvm::FCmpInst::Predicate         FPredicate;
}
/* Line 1529 of yacc.c.  */
#line 357 "llvmAsmParser.tab.h"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE llvmAsmlval;

