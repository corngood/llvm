
/*  A Bison parser, made from /Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse llvmAsmparse
#define yylex llvmAsmlex
#define yyerror llvmAsmerror
#define yylval llvmAsmlval
#define yychar llvmAsmchar
#define yydebug llvmAsmdebug
#define yynerrs llvmAsmnerrs
#define	ESINT64VAL	257
#define	EUINT64VAL	258
#define	ESAPINTVAL	259
#define	EUAPINTVAL	260
#define	LOCALVAL_ID	261
#define	GLOBALVAL_ID	262
#define	FPVAL	263
#define	VOID	264
#define	INTTYPE	265
#define	FLOAT	266
#define	DOUBLE	267
#define	LABEL	268
#define	TYPE	269
#define	LOCALVAR	270
#define	GLOBALVAR	271
#define	LABELSTR	272
#define	STRINGCONSTANT	273
#define	ATSTRINGCONSTANT	274
#define	ZEROINITIALIZER	275
#define	TRUETOK	276
#define	FALSETOK	277
#define	BEGINTOK	278
#define	ENDTOK	279
#define	DECLARE	280
#define	DEFINE	281
#define	GLOBAL	282
#define	CONSTANT	283
#define	SECTION	284
#define	ALIAS	285
#define	VOLATILE	286
#define	THREAD_LOCAL	287
#define	TO	288
#define	DOTDOTDOT	289
#define	NULL_TOK	290
#define	UNDEF	291
#define	INTERNAL	292
#define	LINKONCE	293
#define	WEAK	294
#define	APPENDING	295
#define	DLLIMPORT	296
#define	DLLEXPORT	297
#define	EXTERN_WEAK	298
#define	OPAQUE	299
#define	EXTERNAL	300
#define	TARGET	301
#define	TRIPLE	302
#define	ALIGN	303
#define	DEPLIBS	304
#define	CALL	305
#define	TAIL	306
#define	ASM_TOK	307
#define	MODULE	308
#define	SIDEEFFECT	309
#define	CC_TOK	310
#define	CCC_TOK	311
#define	FASTCC_TOK	312
#define	COLDCC_TOK	313
#define	X86_STDCALLCC_TOK	314
#define	X86_FASTCALLCC_TOK	315
#define	DATALAYOUT	316
#define	RET	317
#define	BR	318
#define	SWITCH	319
#define	INVOKE	320
#define	UNWIND	321
#define	UNREACHABLE	322
#define	ADD	323
#define	SUB	324
#define	MUL	325
#define	UDIV	326
#define	SDIV	327
#define	FDIV	328
#define	UREM	329
#define	SREM	330
#define	FREM	331
#define	AND	332
#define	OR	333
#define	XOR	334
#define	SHL	335
#define	LSHR	336
#define	ASHR	337
#define	ICMP	338
#define	FCMP	339
#define	EQ	340
#define	NE	341
#define	SLT	342
#define	SGT	343
#define	SLE	344
#define	SGE	345
#define	ULT	346
#define	UGT	347
#define	ULE	348
#define	UGE	349
#define	OEQ	350
#define	ONE	351
#define	OLT	352
#define	OGT	353
#define	OLE	354
#define	OGE	355
#define	ORD	356
#define	UNO	357
#define	UEQ	358
#define	UNE	359
#define	MALLOC	360
#define	ALLOCA	361
#define	FREE	362
#define	LOAD	363
#define	STORE	364
#define	GETELEMENTPTR	365
#define	TRUNC	366
#define	ZEXT	367
#define	SEXT	368
#define	FPTRUNC	369
#define	FPEXT	370
#define	BITCAST	371
#define	UITOFP	372
#define	SITOFP	373
#define	FPTOUI	374
#define	FPTOSI	375
#define	INTTOPTR	376
#define	PTRTOINT	377
#define	PHI_TOK	378
#define	SELECT	379
#define	VAARG	380
#define	EXTRACTELEMENT	381
#define	INSERTELEMENT	382
#define	SHUFFLEVECTOR	383
#define	NORETURN	384
#define	INREG	385
#define	SRET	386
#define	NOUNWIND	387
#define	DEFAULT	388
#define	HIDDEN	389
#define	PROTECTED	390

#line 14 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"

#include "ParserInternals.h"
#include "llvm/CallingConv.h"
#include "llvm/InlineAsm.h"
#include "llvm/Instructions.h"
#include "llvm/Module.h"
#include "llvm/ValueSymbolTable.h"
#include "llvm/Support/GetElementPtrTypeIterator.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/ADT/STLExtras.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/Streams.h"
#include <algorithm>
#include <list>
#include <map>
#include <utility>
#ifndef NDEBUG
#define YYDEBUG 1
#endif

// The following is a gross hack. In order to rid the libAsmParser library of
// exceptions, we have to have a way of getting the yyparse function to go into
// an error situation. So, whenever we want an error to occur, the GenerateError
// function (see bottom of file) sets TriggerError. Then, at the end of each 
// production in the grammer we use CHECK_FOR_ERROR which will invoke YYERROR 
// (a goto) to put YACC in error state. Furthermore, several calls to 
// GenerateError are made from inside productions and they must simulate the
// previous exception behavior by exiting the production immediately. We have
// replaced these with the GEN_ERROR macro which calls GeneratError and then
// immediately invokes YYERROR. This would be so much cleaner if it was a 
// recursive descent parser.
static bool TriggerError = false;
#define CHECK_FOR_ERROR { if (TriggerError) { TriggerError = false; YYABORT; } }
#define GEN_ERROR(msg) { GenerateError(msg); YYERROR; }

int yyerror(const char *ErrorMsg); // Forward declarations to prevent "implicit
int yylex();                       // declaration" of xxx warnings.
int yyparse();

namespace llvm {
  std::string CurFilename;
#if YYDEBUG
static cl::opt<bool>
Debug("debug-yacc", cl::desc("Print yacc debug state changes"), 
      cl::Hidden, cl::init(false));
#endif
}
using namespace llvm;

static Module *ParserResult;

// DEBUG_UPREFS - Define this symbol if you want to enable debugging output
// relating to upreferences in the input stream.
//
//#define DEBUG_UPREFS 1
#ifdef DEBUG_UPREFS
#define UR_OUT(X) cerr << X
#else
#define UR_OUT(X)
#endif

#define YYERROR_VERBOSE 1

static GlobalVariable *CurGV;


// This contains info used when building the body of a function.  It is
// destroyed when the function is completed.
//
typedef std::vector<Value *> ValueList;           // Numbered defs

static void 
ResolveDefinitions(ValueList &LateResolvers, ValueList *FutureLateResolvers=0);

static struct PerModuleInfo {
  Module *CurrentModule;
  ValueList Values; // Module level numbered definitions
  ValueList LateResolveValues;
  std::vector<PATypeHolder>    Types;
  std::map<ValID, PATypeHolder> LateResolveTypes;

  /// PlaceHolderInfo - When temporary placeholder objects are created, remember
  /// how they were referenced and on which line of the input they came from so
  /// that we can resolve them later and print error messages as appropriate.
  std::map<Value*, std::pair<ValID, int> > PlaceHolderInfo;

  // GlobalRefs - This maintains a mapping between <Type, ValID>'s and forward
  // references to global values.  Global values may be referenced before they
  // are defined, and if so, the temporary object that they represent is held
  // here.  This is used for forward references of GlobalValues.
  //
  typedef std::map<std::pair<const PointerType *,
                             ValID>, GlobalValue*> GlobalRefsType;
  GlobalRefsType GlobalRefs;

  void ModuleDone() {
    // If we could not resolve some functions at function compilation time
    // (calls to functions before they are defined), resolve them now...  Types
    // are resolved when the constant pool has been completely parsed.
    //
    ResolveDefinitions(LateResolveValues);
    if (TriggerError)
      return;

    // Check to make sure that all global value forward references have been
    // resolved!
    //
    if (!GlobalRefs.empty()) {
      std::string UndefinedReferences = "Unresolved global references exist:\n";

      for (GlobalRefsType::iterator I = GlobalRefs.begin(), E =GlobalRefs.end();
           I != E; ++I) {
        UndefinedReferences += "  " + I->first.first->getDescription() + " " +
                               I->first.second.getName() + "\n";
      }
      GenerateError(UndefinedReferences);
      return;
    }

    Values.clear();         // Clear out function local definitions
    Types.clear();
    CurrentModule = 0;
  }

  // GetForwardRefForGlobal - Check to see if there is a forward reference
  // for this global.  If so, remove it from the GlobalRefs map and return it.
  // If not, just return null.
  GlobalValue *GetForwardRefForGlobal(const PointerType *PTy, ValID ID) {
    // Check to see if there is a forward reference to this global variable...
    // if there is, eliminate it and patch the reference to use the new def'n.
    GlobalRefsType::iterator I = GlobalRefs.find(std::make_pair(PTy, ID));
    GlobalValue *Ret = 0;
    if (I != GlobalRefs.end()) {
      Ret = I->second;
      GlobalRefs.erase(I);
    }
    return Ret;
  }

  bool TypeIsUnresolved(PATypeHolder* PATy) {
    // If it isn't abstract, its resolved
    const Type* Ty = PATy->get();
    if (!Ty->isAbstract())
      return false;
    // Traverse the type looking for abstract types. If it isn't abstract then
    // we don't need to traverse that leg of the type. 
    std::vector<const Type*> WorkList, SeenList;
    WorkList.push_back(Ty);
    while (!WorkList.empty()) {
      const Type* Ty = WorkList.back();
      SeenList.push_back(Ty);
      WorkList.pop_back();
      if (const OpaqueType* OpTy = dyn_cast<OpaqueType>(Ty)) {
        // Check to see if this is an unresolved type
        std::map<ValID, PATypeHolder>::iterator I = LateResolveTypes.begin();
        std::map<ValID, PATypeHolder>::iterator E = LateResolveTypes.end();
        for ( ; I != E; ++I) {
          if (I->second.get() == OpTy)
            return true;
        }
      } else if (const SequentialType* SeqTy = dyn_cast<SequentialType>(Ty)) {
        const Type* TheTy = SeqTy->getElementType();
        if (TheTy->isAbstract() && TheTy != Ty) {
          std::vector<const Type*>::iterator I = SeenList.begin(), 
                                             E = SeenList.end();
          for ( ; I != E; ++I)
            if (*I == TheTy)
              break;
          if (I == E)
            WorkList.push_back(TheTy);
        }
      } else if (const StructType* StrTy = dyn_cast<StructType>(Ty)) {
        for (unsigned i = 0; i < StrTy->getNumElements(); ++i) {
          const Type* TheTy = StrTy->getElementType(i);
          if (TheTy->isAbstract() && TheTy != Ty) {
            std::vector<const Type*>::iterator I = SeenList.begin(), 
                                               E = SeenList.end();
            for ( ; I != E; ++I)
              if (*I == TheTy)
                break;
            if (I == E)
              WorkList.push_back(TheTy);
          }
        }
      }
    }
    return false;
  }
} CurModule;

static struct PerFunctionInfo {
  Function *CurrentFunction;     // Pointer to current function being created

  ValueList Values; // Keep track of #'d definitions
  unsigned NextValNum;
  ValueList LateResolveValues;
  bool isDeclare;                   // Is this function a forward declararation?
  GlobalValue::LinkageTypes Linkage; // Linkage for forward declaration.
  GlobalValue::VisibilityTypes Visibility;

  /// BBForwardRefs - When we see forward references to basic blocks, keep
  /// track of them here.
  std::map<ValID, BasicBlock*> BBForwardRefs;

  inline PerFunctionInfo() {
    CurrentFunction = 0;
    isDeclare = false;
    Linkage = GlobalValue::ExternalLinkage;
    Visibility = GlobalValue::DefaultVisibility;
  }

  inline void FunctionStart(Function *M) {
    CurrentFunction = M;
    NextValNum = 0;
  }

  void FunctionDone() {
    // Any forward referenced blocks left?
    if (!BBForwardRefs.empty()) {
      GenerateError("Undefined reference to label " +
                     BBForwardRefs.begin()->second->getName());
      return;
    }

    // Resolve all forward references now.
    ResolveDefinitions(LateResolveValues, &CurModule.LateResolveValues);

    Values.clear();         // Clear out function local definitions
    BBForwardRefs.clear();
    CurrentFunction = 0;
    isDeclare = false;
    Linkage = GlobalValue::ExternalLinkage;
    Visibility = GlobalValue::DefaultVisibility;
  }
} CurFun;  // Info for the current function...

static bool inFunctionScope() { return CurFun.CurrentFunction != 0; }


//===----------------------------------------------------------------------===//
//               Code to handle definitions of all the types
//===----------------------------------------------------------------------===//

static void InsertValue(Value *V, ValueList &ValueTab = CurFun.Values) {
  // Things that have names or are void typed don't get slot numbers
  if (V->hasName() || (V->getType() == Type::VoidTy))
    return;

  // In the case of function values, we have to allow for the forward reference
  // of basic blocks, which are included in the numbering. Consequently, we keep
  // track of the next insertion location with NextValNum. When a BB gets 
  // inserted, it could change the size of the CurFun.Values vector.
  if (&ValueTab == &CurFun.Values) {
    if (ValueTab.size() <= CurFun.NextValNum)
      ValueTab.resize(CurFun.NextValNum+1);
    ValueTab[CurFun.NextValNum++] = V;
    return;
  } 
  // For all other lists, its okay to just tack it on the back of the vector.
  ValueTab.push_back(V);
}

static const Type *getTypeVal(const ValID &D, bool DoNotImprovise = false) {
  switch (D.Type) {
  case ValID::LocalID:               // Is it a numbered definition?
    // Module constants occupy the lowest numbered slots...
    if (D.Num < CurModule.Types.size())
      return CurModule.Types[D.Num];
    break;
  case ValID::LocalName:                 // Is it a named definition?
    if (const Type *N = CurModule.CurrentModule->getTypeByName(D.Name)) {
      D.destroy();  // Free old strdup'd memory...
      return N;
    }
    break;
  default:
    GenerateError("Internal parser error: Invalid symbol type reference");
    return 0;
  }

  // If we reached here, we referenced either a symbol that we don't know about
  // or an id number that hasn't been read yet.  We may be referencing something
  // forward, so just create an entry to be resolved later and get to it...
  //
  if (DoNotImprovise) return 0;  // Do we just want a null to be returned?


  if (inFunctionScope()) {
    if (D.Type == ValID::LocalName) {
      GenerateError("Reference to an undefined type: '" + D.getName() + "'");
      return 0;
    } else {
      GenerateError("Reference to an undefined type: #" + utostr(D.Num));
      return 0;
    }
  }

  std::map<ValID, PATypeHolder>::iterator I =CurModule.LateResolveTypes.find(D);
  if (I != CurModule.LateResolveTypes.end())
    return I->second;

  Type *Typ = OpaqueType::get();
  CurModule.LateResolveTypes.insert(std::make_pair(D, Typ));
  return Typ;
 }

// getExistingVal - Look up the value specified by the provided type and
// the provided ValID.  If the value exists and has already been defined, return
// it.  Otherwise return null.
//
static Value *getExistingVal(const Type *Ty, const ValID &D) {
  if (isa<FunctionType>(Ty)) {
    GenerateError("Functions are not values and "
                   "must be referenced as pointers");
    return 0;
  }

  switch (D.Type) {
  case ValID::LocalID: {                 // Is it a numbered definition?
    // Check that the number is within bounds.
    if (D.Num >= CurFun.Values.size()) 
      return 0;
    Value *Result = CurFun.Values[D.Num];
    if (Ty != Result->getType()) {
      GenerateError("Numbered value (%" + utostr(D.Num) + ") of type '" +
                    Result->getType()->getDescription() + "' does not match " 
                    "expected type, '" + Ty->getDescription() + "'");
      return 0;
    }
    return Result;
  }
  case ValID::GlobalID: {                 // Is it a numbered definition?
    if (D.Num >= CurModule.Values.size()) 
      return 0;
    Value *Result = CurModule.Values[D.Num];
    if (Ty != Result->getType()) {
      GenerateError("Numbered value (@" + utostr(D.Num) + ") of type '" +
                    Result->getType()->getDescription() + "' does not match " 
                    "expected type, '" + Ty->getDescription() + "'");
      return 0;
    }
    return Result;
  }
    
  case ValID::LocalName: {                // Is it a named definition?
    if (!inFunctionScope()) 
      return 0;
    ValueSymbolTable &SymTab = CurFun.CurrentFunction->getValueSymbolTable();
    Value *N = SymTab.lookup(D.Name);
    if (N == 0) 
      return 0;
    if (N->getType() != Ty)
      return 0;
    
    D.destroy();  // Free old strdup'd memory...
    return N;
  }
  case ValID::GlobalName: {                // Is it a named definition?
    ValueSymbolTable &SymTab = CurModule.CurrentModule->getValueSymbolTable();
    Value *N = SymTab.lookup(D.Name);
    if (N == 0) 
      return 0;
    if (N->getType() != Ty)
      return 0;

    D.destroy();  // Free old strdup'd memory...
    return N;
  }

  // Check to make sure that "Ty" is an integral type, and that our
  // value will fit into the specified type...
  case ValID::ConstSIntVal:    // Is it a constant pool reference??
    if (!ConstantInt::isValueValidForType(Ty, D.ConstPool64)) {
      GenerateError("Signed integral constant '" +
                     itostr(D.ConstPool64) + "' is invalid for type '" +
                     Ty->getDescription() + "'");
      return 0;
    }
    return ConstantInt::get(Ty, D.ConstPool64, true);

  case ValID::ConstUIntVal:     // Is it an unsigned const pool reference?
    if (!ConstantInt::isValueValidForType(Ty, D.UConstPool64)) {
      if (!ConstantInt::isValueValidForType(Ty, D.ConstPool64)) {
        GenerateError("Integral constant '" + utostr(D.UConstPool64) +
                       "' is invalid or out of range");
        return 0;
      } else {     // This is really a signed reference.  Transmogrify.
        return ConstantInt::get(Ty, D.ConstPool64, true);
      }
    } else {
      return ConstantInt::get(Ty, D.UConstPool64);
    }

  case ValID::ConstFPVal:        // Is it a floating point const pool reference?
    if (!ConstantFP::isValueValidForType(Ty, D.ConstPoolFP)) {
      GenerateError("FP constant invalid for type");
      return 0;
    }
    return ConstantFP::get(Ty, D.ConstPoolFP);

  case ValID::ConstNullVal:      // Is it a null value?
    if (!isa<PointerType>(Ty)) {
      GenerateError("Cannot create a a non pointer null");
      return 0;
    }
    return ConstantPointerNull::get(cast<PointerType>(Ty));

  case ValID::ConstUndefVal:      // Is it an undef value?
    return UndefValue::get(Ty);

  case ValID::ConstZeroVal:      // Is it a zero value?
    return Constant::getNullValue(Ty);
    
  case ValID::ConstantVal:       // Fully resolved constant?
    if (D.ConstantValue->getType() != Ty) {
      GenerateError("Constant expression type different from required type");
      return 0;
    }
    return D.ConstantValue;

  case ValID::InlineAsmVal: {    // Inline asm expression
    const PointerType *PTy = dyn_cast<PointerType>(Ty);
    const FunctionType *FTy =
      PTy ? dyn_cast<FunctionType>(PTy->getElementType()) : 0;
    if (!FTy || !InlineAsm::Verify(FTy, D.IAD->Constraints)) {
      GenerateError("Invalid type for asm constraint string");
      return 0;
    }
    InlineAsm *IA = InlineAsm::get(FTy, D.IAD->AsmString, D.IAD->Constraints,
                                   D.IAD->HasSideEffects);
    D.destroy();   // Free InlineAsmDescriptor.
    return IA;
  }
  default:
    assert(0 && "Unhandled case!");
    return 0;
  }   // End of switch

  assert(0 && "Unhandled case!");
  return 0;
}

// getVal - This function is identical to getExistingVal, except that if a
// value is not already defined, it "improvises" by creating a placeholder var
// that looks and acts just like the requested variable.  When the value is
// defined later, all uses of the placeholder variable are replaced with the
// real thing.
//
static Value *getVal(const Type *Ty, const ValID &ID) {
  if (Ty == Type::LabelTy) {
    GenerateError("Cannot use a basic block here");
    return 0;
  }

  // See if the value has already been defined.
  Value *V = getExistingVal(Ty, ID);
  if (V) return V;
  if (TriggerError) return 0;

  if (!Ty->isFirstClassType() && !isa<OpaqueType>(Ty)) {
    GenerateError("Invalid use of a composite type");
    return 0;
  }

  // If we reached here, we referenced either a symbol that we don't know about
  // or an id number that hasn't been read yet.  We may be referencing something
  // forward, so just create an entry to be resolved later and get to it...
  //
  switch (ID.Type) {
  case ValID::GlobalName:
  case ValID::GlobalID: {
   const PointerType *PTy = dyn_cast<PointerType>(Ty);
   if (!PTy) {
     GenerateError("Invalid type for reference to global" );
     return 0;
   }
   const Type* ElTy = PTy->getElementType();
   if (const FunctionType *FTy = dyn_cast<FunctionType>(ElTy))
     V = new Function(FTy, GlobalValue::ExternalLinkage);
   else
     V = new GlobalVariable(ElTy, false, GlobalValue::ExternalLinkage);
   break;
  }
  default:
   V = new Argument(Ty);
  }
  
  // Remember where this forward reference came from.  FIXME, shouldn't we try
  // to recycle these things??
  CurModule.PlaceHolderInfo.insert(std::make_pair(V, std::make_pair(ID,
                                                               llvmAsmlineno)));

  if (inFunctionScope())
    InsertValue(V, CurFun.LateResolveValues);
  else
    InsertValue(V, CurModule.LateResolveValues);
  return V;
}

/// defineBBVal - This is a definition of a new basic block with the specified
/// identifier which must be the same as CurFun.NextValNum, if its numeric.
static BasicBlock *defineBBVal(const ValID &ID) {
  assert(inFunctionScope() && "Can't get basic block at global scope!");

  BasicBlock *BB = 0;

  // First, see if this was forward referenced

  std::map<ValID, BasicBlock*>::iterator BBI = CurFun.BBForwardRefs.find(ID);
  if (BBI != CurFun.BBForwardRefs.end()) {
    BB = BBI->second;
    // The forward declaration could have been inserted anywhere in the
    // function: insert it into the correct place now.
    CurFun.CurrentFunction->getBasicBlockList().remove(BB);
    CurFun.CurrentFunction->getBasicBlockList().push_back(BB);

    // We're about to erase the entry, save the key so we can clean it up.
    ValID Tmp = BBI->first;

    // Erase the forward ref from the map as its no longer "forward"
    CurFun.BBForwardRefs.erase(ID);

    // The key has been removed from the map but so we don't want to leave 
    // strdup'd memory around so destroy it too.
    Tmp.destroy();

    // If its a numbered definition, bump the number and set the BB value.
    if (ID.Type == ValID::LocalID) {
      assert(ID.Num == CurFun.NextValNum && "Invalid new block number");
      InsertValue(BB);
    }

    ID.destroy();
    return BB;
  } 
  
  // We haven't seen this BB before and its first mention is a definition. 
  // Just create it and return it.
  std::string Name (ID.Type == ValID::LocalName ? ID.Name : "");
  BB = new BasicBlock(Name, CurFun.CurrentFunction);
  if (ID.Type == ValID::LocalID) {
    assert(ID.Num == CurFun.NextValNum && "Invalid new block number");
    InsertValue(BB);
  }

  ID.destroy(); // Free strdup'd memory
  return BB;
}

/// getBBVal - get an existing BB value or create a forward reference for it.
/// 
static BasicBlock *getBBVal(const ValID &ID) {
  assert(inFunctionScope() && "Can't get basic block at global scope!");

  BasicBlock *BB =  0;

  std::map<ValID, BasicBlock*>::iterator BBI = CurFun.BBForwardRefs.find(ID);
  if (BBI != CurFun.BBForwardRefs.end()) {
    BB = BBI->second;
  } if (ID.Type == ValID::LocalName) {
    std::string Name = ID.Name;
    Value *N = CurFun.CurrentFunction->getValueSymbolTable().lookup(Name);
    if (N)
      if (N->getType()->getTypeID() == Type::LabelTyID)
        BB = cast<BasicBlock>(N);
      else
        GenerateError("Reference to label '" + Name + "' is actually of type '"+
          N->getType()->getDescription() + "'");
  } else if (ID.Type == ValID::LocalID) {
    if (ID.Num < CurFun.NextValNum && ID.Num < CurFun.Values.size()) {
      if (CurFun.Values[ID.Num]->getType()->getTypeID() == Type::LabelTyID)
        BB = cast<BasicBlock>(CurFun.Values[ID.Num]);
      else
        GenerateError("Reference to label '%" + utostr(ID.Num) + 
          "' is actually of type '"+ 
          CurFun.Values[ID.Num]->getType()->getDescription() + "'");
    }
  } else {
    GenerateError("Illegal label reference " + ID.getName());
    return 0;
  }

  // If its already been defined, return it now.
  if (BB) {
    ID.destroy(); // Free strdup'd memory.
    return BB;
  }

  // Otherwise, this block has not been seen before, create it.
  std::string Name;
  if (ID.Type == ValID::LocalName)
    Name = ID.Name;
  BB = new BasicBlock(Name, CurFun.CurrentFunction);

  // Insert it in the forward refs map.
  CurFun.BBForwardRefs[ID] = BB;

  return BB;
}


//===----------------------------------------------------------------------===//
//              Code to handle forward references in instructions
//===----------------------------------------------------------------------===//
//
// This code handles the late binding needed with statements that reference
// values not defined yet... for example, a forward branch, or the PHI node for
// a loop body.
//
// This keeps a table (CurFun.LateResolveValues) of all such forward references
// and back patchs after we are done.
//

// ResolveDefinitions - If we could not resolve some defs at parsing
// time (forward branches, phi functions for loops, etc...) resolve the
// defs now...
//
static void 
ResolveDefinitions(ValueList &LateResolvers, ValueList *FutureLateResolvers) {
  // Loop over LateResolveDefs fixing up stuff that couldn't be resolved
  while (!LateResolvers.empty()) {
    Value *V = LateResolvers.back();
    LateResolvers.pop_back();

    std::map<Value*, std::pair<ValID, int> >::iterator PHI =
      CurModule.PlaceHolderInfo.find(V);
    assert(PHI != CurModule.PlaceHolderInfo.end() && "Placeholder error!");

    ValID &DID = PHI->second.first;

    Value *TheRealValue = getExistingVal(V->getType(), DID);
    if (TriggerError)
      return;
    if (TheRealValue) {
      V->replaceAllUsesWith(TheRealValue);
      delete V;
      CurModule.PlaceHolderInfo.erase(PHI);
    } else if (FutureLateResolvers) {
      // Functions have their unresolved items forwarded to the module late
      // resolver table
      InsertValue(V, *FutureLateResolvers);
    } else {
      if (DID.Type == ValID::LocalName || DID.Type == ValID::GlobalName) {
        GenerateError("Reference to an invalid definition: '" +DID.getName()+
                       "' of type '" + V->getType()->getDescription() + "'",
                       PHI->second.second);
        return;
      } else {
        GenerateError("Reference to an invalid definition: #" +
                       itostr(DID.Num) + " of type '" +
                       V->getType()->getDescription() + "'",
                       PHI->second.second);
        return;
      }
    }
  }
  LateResolvers.clear();
}

// ResolveTypeTo - A brand new type was just declared.  This means that (if
// name is not null) things referencing Name can be resolved.  Otherwise, things
// refering to the number can be resolved.  Do this now.
//
static void ResolveTypeTo(char *Name, const Type *ToTy) {
  ValID D;
  if (Name) D = ValID::createLocalName(Name);
  else      D = ValID::createLocalID(CurModule.Types.size());

  std::map<ValID, PATypeHolder>::iterator I =
    CurModule.LateResolveTypes.find(D);
  if (I != CurModule.LateResolveTypes.end()) {
    ((DerivedType*)I->second.get())->refineAbstractTypeTo(ToTy);
    CurModule.LateResolveTypes.erase(I);
  }
}

// setValueName - Set the specified value to the name given.  The name may be
// null potentially, in which case this is a noop.  The string passed in is
// assumed to be a malloc'd string buffer, and is free'd by this function.
//
static void setValueName(Value *V, char *NameStr) {
  if (!NameStr) return;
  std::string Name(NameStr);      // Copy string
  free(NameStr);                  // Free old string

  if (V->getType() == Type::VoidTy) {
    GenerateError("Can't assign name '" + Name+"' to value with void type");
    return;
  }

  assert(inFunctionScope() && "Must be in function scope!");
  ValueSymbolTable &ST = CurFun.CurrentFunction->getValueSymbolTable();
  if (ST.lookup(Name)) {
    GenerateError("Redefinition of value '" + Name + "' of type '" +
                   V->getType()->getDescription() + "'");
    return;
  }

  // Set the name.
  V->setName(Name);
}

/// ParseGlobalVariable - Handle parsing of a global.  If Initializer is null,
/// this is a declaration, otherwise it is a definition.
static GlobalVariable *
ParseGlobalVariable(char *NameStr,
                    GlobalValue::LinkageTypes Linkage,
                    GlobalValue::VisibilityTypes Visibility,
                    bool isConstantGlobal, const Type *Ty,
                    Constant *Initializer, bool IsThreadLocal) {
  if (isa<FunctionType>(Ty)) {
    GenerateError("Cannot declare global vars of function type");
    return 0;
  }

  const PointerType *PTy = PointerType::get(Ty);

  std::string Name;
  if (NameStr) {
    Name = NameStr;      // Copy string
    free(NameStr);       // Free old string
  }

  // See if this global value was forward referenced.  If so, recycle the
  // object.
  ValID ID;
  if (!Name.empty()) {
    ID = ValID::createGlobalName((char*)Name.c_str());
  } else {
    ID = ValID::createGlobalID(CurModule.Values.size());
  }

  if (GlobalValue *FWGV = CurModule.GetForwardRefForGlobal(PTy, ID)) {
    // Move the global to the end of the list, from whereever it was
    // previously inserted.
    GlobalVariable *GV = cast<GlobalVariable>(FWGV);
    CurModule.CurrentModule->getGlobalList().remove(GV);
    CurModule.CurrentModule->getGlobalList().push_back(GV);
    GV->setInitializer(Initializer);
    GV->setLinkage(Linkage);
    GV->setVisibility(Visibility);
    GV->setConstant(isConstantGlobal);
    GV->setThreadLocal(IsThreadLocal);
    InsertValue(GV, CurModule.Values);
    return GV;
  }

  // If this global has a name
  if (!Name.empty()) {
    // if the global we're parsing has an initializer (is a definition) and
    // has external linkage.
    if (Initializer && Linkage != GlobalValue::InternalLinkage)
      // If there is already a global with external linkage with this name
      if (CurModule.CurrentModule->getGlobalVariable(Name, false)) {
        // If we allow this GVar to get created, it will be renamed in the
        // symbol table because it conflicts with an existing GVar. We can't
        // allow redefinition of GVars whose linking indicates that their name
        // must stay the same. Issue the error.
        GenerateError("Redefinition of global variable named '" + Name +
                       "' of type '" + Ty->getDescription() + "'");
        return 0;
      }
  }

  // Otherwise there is no existing GV to use, create one now.
  GlobalVariable *GV =
    new GlobalVariable(Ty, isConstantGlobal, Linkage, Initializer, Name,
                       CurModule.CurrentModule, IsThreadLocal);
  GV->setVisibility(Visibility);
  InsertValue(GV, CurModule.Values);
  return GV;
}

// setTypeName - Set the specified type to the name given.  The name may be
// null potentially, in which case this is a noop.  The string passed in is
// assumed to be a malloc'd string buffer, and is freed by this function.
//
// This function returns true if the type has already been defined, but is
// allowed to be redefined in the specified context.  If the name is a new name
// for the type plane, it is inserted and false is returned.
static bool setTypeName(const Type *T, char *NameStr) {
  assert(!inFunctionScope() && "Can't give types function-local names!");
  if (NameStr == 0) return false;
 
  std::string Name(NameStr);      // Copy string
  free(NameStr);                  // Free old string

  // We don't allow assigning names to void type
  if (T == Type::VoidTy) {
    GenerateError("Can't assign name '" + Name + "' to the void type");
    return false;
  }

  // Set the type name, checking for conflicts as we do so.
  bool AlreadyExists = CurModule.CurrentModule->addTypeName(Name, T);

  if (AlreadyExists) {   // Inserting a name that is already defined???
    const Type *Existing = CurModule.CurrentModule->getTypeByName(Name);
    assert(Existing && "Conflict but no matching type?!");

    // There is only one case where this is allowed: when we are refining an
    // opaque type.  In this case, Existing will be an opaque type.
    if (const OpaqueType *OpTy = dyn_cast<OpaqueType>(Existing)) {
      // We ARE replacing an opaque type!
      const_cast<OpaqueType*>(OpTy)->refineAbstractTypeTo(T);
      return true;
    }

    // Otherwise, this is an attempt to redefine a type. That's okay if
    // the redefinition is identical to the original. This will be so if
    // Existing and T point to the same Type object. In this one case we
    // allow the equivalent redefinition.
    if (Existing == T) return true;  // Yes, it's equal.

    // Any other kind of (non-equivalent) redefinition is an error.
    GenerateError("Redefinition of type named '" + Name + "' of type '" +
                   T->getDescription() + "'");
  }

  return false;
}

//===----------------------------------------------------------------------===//
// Code for handling upreferences in type names...
//

// TypeContains - Returns true if Ty directly contains E in it.
//
static bool TypeContains(const Type *Ty, const Type *E) {
  return std::find(Ty->subtype_begin(), Ty->subtype_end(),
                   E) != Ty->subtype_end();
}

namespace {
  struct UpRefRecord {
    // NestingLevel - The number of nesting levels that need to be popped before
    // this type is resolved.
    unsigned NestingLevel;

    // LastContainedTy - This is the type at the current binding level for the
    // type.  Every time we reduce the nesting level, this gets updated.
    const Type *LastContainedTy;

    // UpRefTy - This is the actual opaque type that the upreference is
    // represented with.
    OpaqueType *UpRefTy;

    UpRefRecord(unsigned NL, OpaqueType *URTy)
      : NestingLevel(NL), LastContainedTy(URTy), UpRefTy(URTy) {}
  };
}

// UpRefs - A list of the outstanding upreferences that need to be resolved.
static std::vector<UpRefRecord> UpRefs;

/// HandleUpRefs - Every time we finish a new layer of types, this function is
/// called.  It loops through the UpRefs vector, which is a list of the
/// currently active types.  For each type, if the up reference is contained in
/// the newly completed type, we decrement the level count.  When the level
/// count reaches zero, the upreferenced type is the type that is passed in:
/// thus we can complete the cycle.
///
static PATypeHolder HandleUpRefs(const Type *ty) {
  // If Ty isn't abstract, or if there are no up-references in it, then there is
  // nothing to resolve here.
  if (!ty->isAbstract() || UpRefs.empty()) return ty;
  
  PATypeHolder Ty(ty);
  UR_OUT("Type '" << Ty->getDescription() <<
         "' newly formed.  Resolving upreferences.\n" <<
         UpRefs.size() << " upreferences active!\n");

  // If we find any resolvable upreferences (i.e., those whose NestingLevel goes
  // to zero), we resolve them all together before we resolve them to Ty.  At
  // the end of the loop, if there is anything to resolve to Ty, it will be in
  // this variable.
  OpaqueType *TypeToResolve = 0;

  for (unsigned i = 0; i != UpRefs.size(); ++i) {
    UR_OUT("  UR#" << i << " - TypeContains(" << Ty->getDescription() << ", "
           << UpRefs[i].second->getDescription() << ") = "
           << (TypeContains(Ty, UpRefs[i].second) ? "true" : "false") << "\n");
    if (TypeContains(Ty, UpRefs[i].LastContainedTy)) {
      // Decrement level of upreference
      unsigned Level = --UpRefs[i].NestingLevel;
      UpRefs[i].LastContainedTy = Ty;
      UR_OUT("  Uplevel Ref Level = " << Level << "\n");
      if (Level == 0) {                     // Upreference should be resolved!
        if (!TypeToResolve) {
          TypeToResolve = UpRefs[i].UpRefTy;
        } else {
          UR_OUT("  * Resolving upreference for "
                 << UpRefs[i].second->getDescription() << "\n";
                 std::string OldName = UpRefs[i].UpRefTy->getDescription());
          UpRefs[i].UpRefTy->refineAbstractTypeTo(TypeToResolve);
          UR_OUT("  * Type '" << OldName << "' refined upreference to: "
                 << (const void*)Ty << ", " << Ty->getDescription() << "\n");
        }
        UpRefs.erase(UpRefs.begin()+i);     // Remove from upreference list...
        --i;                                // Do not skip the next element...
      }
    }
  }

  if (TypeToResolve) {
    UR_OUT("  * Resolving upreference for "
           << UpRefs[i].second->getDescription() << "\n";
           std::string OldName = TypeToResolve->getDescription());
    TypeToResolve->refineAbstractTypeTo(Ty);
  }

  return Ty;
}

//===----------------------------------------------------------------------===//
//            RunVMAsmParser - Define an interface to this parser
//===----------------------------------------------------------------------===//
//
static Module* RunParser(Module * M);

Module *llvm::RunVMAsmParser(const std::string &Filename, FILE *F) {
  set_scan_file(F);

  CurFilename = Filename;
  return RunParser(new Module(CurFilename));
}

Module *llvm::RunVMAsmParser(const char * AsmString, Module * M) {
  set_scan_string(AsmString);

  CurFilename = "from_memory";
  if (M == NULL) {
    return RunParser(new Module (CurFilename));
  } else {
    return RunParser(M);
  }
}


#line 955 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
typedef union {
  llvm::Module                           *ModuleVal;
  llvm::Function                         *FunctionVal;
  llvm::BasicBlock                       *BasicBlockVal;
  llvm::TerminatorInst                   *TermInstVal;
  llvm::Instruction                      *InstVal;
  llvm::Constant                         *ConstVal;

  const llvm::Type                       *PrimType;
  std::list<llvm::PATypeHolder>          *TypeList;
  llvm::PATypeHolder                     *TypeVal;
  llvm::Value                            *ValueVal;
  std::vector<llvm::Value*>              *ValueList;
  llvm::ArgListType                      *ArgList;
  llvm::TypeWithAttrs                     TypeWithAttrs;
  llvm::TypeWithAttrsList                *TypeWithAttrsList;
  llvm::ValueRefList                     *ValueRefList;

  // Represent the RHS of PHI node
  std::list<std::pair<llvm::Value*,
                      llvm::BasicBlock*> > *PHIList;
  std::vector<std::pair<llvm::Constant*, llvm::BasicBlock*> > *JumpTable;
  std::vector<llvm::Constant*>           *ConstVector;

  llvm::GlobalValue::LinkageTypes         Linkage;
  llvm::GlobalValue::VisibilityTypes      Visibility;
  uint16_t                          ParamAttrs;
  llvm::APInt                       *APIntVal;
  int64_t                           SInt64Val;
  uint64_t                          UInt64Val;
  int                               SIntVal;
  unsigned                          UIntVal;
  double                            FPVal;
  bool                              BoolVal;

  char                             *StrVal;   // This memory is strdup'd!
  llvm::ValID                       ValIDVal; // strdup'd memory maybe!

  llvm::Instruction::BinaryOps      BinaryOpVal;
  llvm::Instruction::TermOps        TermOpVal;
  llvm::Instruction::MemoryOps      MemOpVal;
  llvm::Instruction::CastOps        CastOpVal;
  llvm::Instruction::OtherOps       OtherOpVal;
  llvm::ICmpInst::Predicate         IPredicate;
  llvm::FCmpInst::Predicate         FPredicate;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		581
#define	YYFLAG		-32768
#define	YYNTBASE	151

#define YYTRANSLATE(x) ((unsigned)(x) <= 390 ? yytranslate[x] : 232)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   141,
   142,   139,     2,   138,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   146,
   137,   147,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   143,   140,   145,     2,     2,     2,     2,     2,   150,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   144,
     2,     2,   148,     2,   149,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    22,    24,    26,    28,    30,    32,    34,    36,    38,
    40,    42,    44,    46,    48,    50,    52,    54,    56,    58,
    60,    62,    64,    66,    68,    70,    72,    74,    76,    78,
    80,    82,    84,    86,    88,    90,    92,    94,    96,    98,
   100,   102,   104,   106,   108,   110,   112,   114,   116,   118,
   119,   122,   123,   125,   127,   129,   130,   133,   135,   137,
   139,   141,   143,   145,   147,   149,   150,   152,   154,   156,
   157,   159,   161,   162,   164,   166,   168,   170,   171,   173,
   175,   176,   178,   180,   182,   184,   186,   189,   191,   193,
   195,   197,   198,   201,   203,   205,   207,   208,   211,   212,
   215,   216,   220,   223,   224,   226,   227,   231,   233,   236,
   238,   240,   242,   244,   246,   248,   251,   253,   256,   262,
   268,   274,   280,   284,   287,   293,   298,   301,   303,   305,
   307,   311,   313,   317,   319,   320,   322,   326,   331,   335,
   339,   344,   349,   353,   360,   366,   369,   372,   375,   378,
   381,   384,   387,   390,   393,   396,   399,   402,   409,   415,
   424,   431,   438,   446,   454,   461,   470,   479,   483,   485,
   487,   489,   491,   492,   495,   502,   504,   505,   507,   510,
   511,   515,   516,   520,   524,   528,   532,   533,   541,   542,
   551,   552,   561,   567,   570,   574,   576,   580,   584,   588,
   592,   594,   595,   601,   605,   607,   611,   613,   614,   624,
   626,   628,   633,   635,   637,   640,   644,   645,   647,   649,
   651,   653,   655,   657,   659,   661,   663,   667,   669,   675,
   677,   679,   681,   683,   685,   687,   690,   693,   696,   700,
   703,   704,   706,   709,   712,   716,   726,   736,   745,   760,
   762,   764,   771,   777,   780,   787,   795,   799,   805,   806,
   807,   811,   814,   816,   822,   828,   835,   842,   847,   854,
   859,   864,   871,   878,   881,   890,   892,   894,   895,   899,
   906,   910,   917,   920,   926,   934
};

static const short yyrhs[] = {    69,
     0,    70,     0,    71,     0,    72,     0,    73,     0,    74,
     0,    75,     0,    76,     0,    77,     0,    81,     0,    82,
     0,    83,     0,    78,     0,    79,     0,    80,     0,   112,
     0,   113,     0,   114,     0,   115,     0,   116,     0,   117,
     0,   118,     0,   119,     0,   120,     0,   121,     0,   122,
     0,   123,     0,    86,     0,    87,     0,    88,     0,    89,
     0,    90,     0,    91,     0,    92,     0,    93,     0,    94,
     0,    95,     0,    96,     0,    97,     0,    98,     0,    99,
     0,   100,     0,   101,     0,   102,     0,   103,     0,   104,
     0,   105,     0,    92,     0,    93,     0,    94,     0,    95,
     0,    22,     0,    23,     0,    11,     0,    12,     0,    13,
     0,    16,     0,    19,     0,   158,     0,     0,   158,   137,
     0,     0,    17,     0,    20,     0,   163,     0,     0,   161,
   137,     0,    38,     0,    40,     0,    39,     0,    41,     0,
    43,     0,    42,     0,    44,     0,    46,     0,     0,   134,
     0,   135,     0,   136,     0,     0,    42,     0,    44,     0,
     0,    38,     0,    39,     0,    40,     0,    43,     0,     0,
    40,     0,    38,     0,     0,    57,     0,    58,     0,    59,
     0,    60,     0,    61,     0,    56,     4,     0,   113,     0,
   114,     0,   131,     0,   132,     0,     0,   172,   171,     0,
   130,     0,   133,     0,   171,     0,     0,   174,   173,     0,
     0,    49,     4,     0,     0,   138,    49,     4,     0,    30,
    19,     0,     0,   177,     0,     0,   138,   180,   179,     0,
   177,     0,    49,     4,     0,    11,     0,    12,     0,    13,
     0,    14,     0,    45,     0,   181,     0,   182,   139,     0,
   216,     0,   140,     4,     0,   182,   141,   186,   142,   174,
     0,    10,   141,   186,   142,   174,     0,   143,     4,   144,
   182,   145,     0,   146,     4,   144,   182,   147,     0,   148,
   187,   149,     0,   148,   149,     0,   146,   148,   187,   149,
   147,     0,   146,   148,   149,   147,     0,   182,   172,     0,
   182,     0,    10,     0,   183,     0,   185,   138,   183,     0,
   185,     0,   185,   138,    35,     0,    35,     0,     0,   182,
     0,   187,   138,   182,     0,   182,   143,   190,   145,     0,
   182,   143,   145,     0,   182,   150,    19,     0,   182,   146,
   190,   147,     0,   182,   148,   190,   149,     0,   182,   148,
   149,     0,   182,   146,   148,   190,   149,   147,     0,   182,
   146,   148,   149,   147,     0,   182,    36,     0,   182,    37,
     0,   182,   216,     0,   182,   189,     0,   182,    21,     0,
   156,     3,     0,   156,     5,     0,   156,     4,     0,   156,
     6,     0,    11,    22,     0,    11,    23,     0,   157,     9,
     0,   153,   141,   188,    34,   182,   142,     0,   111,   141,
   188,   227,   142,     0,   125,   141,   188,   138,   188,   138,
   188,   142,     0,   151,   141,   188,   138,   188,   142,     0,
   152,   141,   188,   138,   188,   142,     0,    84,   154,   141,
   188,   138,   188,   142,     0,    85,   155,   141,   188,   138,
   188,   142,     0,   127,   141,   188,   138,   188,   142,     0,
   128,   141,   188,   138,   188,   138,   188,   142,     0,   129,
   141,   188,   138,   188,   138,   188,   142,     0,   190,   138,
   188,     0,   188,     0,    28,     0,    29,     0,    33,     0,
     0,   184,   216,     0,   117,   141,   193,    34,   182,   142,
     0,   195,     0,     0,   196,     0,   195,   196,     0,     0,
    27,   197,   212,     0,     0,    26,   198,   213,     0,    54,
    53,   202,     0,   160,    15,   182,     0,   160,    15,    10,
     0,     0,   162,   166,   192,   191,   188,   199,   179,     0,
     0,   162,   164,   166,   192,   191,   188,   200,   179,     0,
     0,   162,   165,   166,   192,   191,   182,   201,   179,     0,
   162,   166,    31,   169,   193,     0,    47,   203,     0,    50,
   137,   204,     0,    19,     0,    48,   137,    19,     0,    62,
   137,    19,     0,   143,   205,   145,     0,   205,   138,    19,
     0,    19,     0,     0,   206,   138,   182,   172,   159,     0,
   182,   172,   159,     0,   206,     0,   206,   138,    35,     0,
    35,     0,     0,   170,   184,   161,   141,   207,   142,   174,
   178,   175,     0,    24,     0,   148,     0,   168,   166,   208,
   209,     0,    25,     0,   149,     0,   219,   211,     0,   167,
   166,   208,     0,     0,    55,     0,     3,     0,     4,     0,
     9,     0,    22,     0,    23,     0,    36,     0,    37,     0,
    21,     0,   146,   190,   147,     0,   189,     0,    53,   214,
    19,   138,    19,     0,     7,     0,     8,     0,   158,     0,
   161,     0,   216,     0,   215,     0,   182,   217,     0,   219,
   220,     0,   210,   220,     0,   221,   160,   222,     0,   221,
   224,     0,     0,    18,     0,    63,   218,     0,    63,    10,
     0,    64,    14,   217,     0,    64,    11,   217,   138,    14,
   217,   138,    14,   217,     0,    65,   156,   217,   138,    14,
   217,   143,   223,   145,     0,    65,   156,   217,   138,    14,
   217,   143,   145,     0,    66,   170,   184,   217,   141,   226,
   142,   174,    34,    14,   217,    67,    14,   217,     0,    67,
     0,    68,     0,   223,   156,   215,   138,    14,   217,     0,
   156,   215,   138,    14,   217,     0,   160,   229,     0,   182,
   143,   217,   138,   217,   145,     0,   225,   138,   143,   217,
   138,   217,   145,     0,   182,   217,   172,     0,   226,   138,
   182,   217,   172,     0,     0,     0,   227,   138,   218,     0,
    52,    51,     0,    51,     0,   151,   182,   217,   138,   217,
     0,   152,   182,   217,   138,   217,     0,    84,   154,   182,
   217,   138,   217,     0,    85,   155,   182,   217,   138,   217,
     0,   153,   218,    34,   182,     0,   125,   218,   138,   218,
   138,   218,     0,   126,   218,   138,   182,     0,   127,   218,
   138,   218,     0,   128,   218,   138,   218,   138,   218,     0,
   129,   218,   138,   218,   138,   218,     0,   124,   225,     0,
   228,   170,   184,   217,   141,   226,   142,   174,     0,   231,
     0,    32,     0,     0,   106,   182,   176,     0,   106,   182,
   138,    11,   217,   176,     0,   107,   182,   176,     0,   107,
   182,   138,    11,   217,   176,     0,   108,   218,     0,   230,
   109,   182,   217,   176,     0,   230,   110,   218,   138,   182,
   217,   176,     0,   111,   182,   217,   227,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
  1111,  1111,  1111,  1111,  1111,  1111,  1111,  1111,  1111,  1112,
  1112,  1112,  1112,  1112,  1112,  1113,  1113,  1113,  1113,  1113,
  1113,  1113,  1114,  1114,  1114,  1114,  1114,  1117,  1117,  1118,
  1118,  1119,  1119,  1120,  1120,  1121,  1121,  1125,  1125,  1126,
  1126,  1127,  1127,  1128,  1128,  1129,  1129,  1130,  1130,  1131,
  1131,  1132,  1133,  1138,  1139,  1139,  1141,  1141,  1142,  1142,
  1146,  1150,  1155,  1155,  1157,  1158,  1163,  1169,  1170,  1171,
  1172,  1173,  1177,  1178,  1179,  1183,  1184,  1185,  1186,  1190,
  1191,  1192,  1196,  1197,  1198,  1199,  1200,  1204,  1205,  1206,
  1209,  1209,  1210,  1211,  1212,  1213,  1214,  1222,  1223,  1224,
  1225,  1228,  1229,  1234,  1235,  1236,  1239,  1240,  1247,  1247,
  1254,  1254,  1263,  1271,  1271,  1277,  1277,  1279,  1284,  1297,
  1297,  1297,  1297,  1300,  1304,  1308,  1315,  1320,  1328,  1358,
  1389,  1394,  1406,  1416,  1420,  1430,  1437,  1444,  1451,  1456,
  1461,  1468,  1469,  1476,  1483,  1491,  1497,  1509,  1537,  1553,
  1582,  1610,  1636,  1656,  1682,  1702,  1714,  1721,  1787,  1797,
  1807,  1813,  1823,  1829,  1839,  1844,  1849,  1857,  1869,  1891,
  1899,  1905,  1916,  1921,  1926,  1932,  1938,  1947,  1951,  1959,
  1959,  1962,  1962,  1965,  1976,  1997,  2002,  2010,  2011,  2015,
  2015,  2019,  2019,  2022,  2025,  2049,  2060,  2067,  2070,  2076,
  2079,  2086,  2090,  2105,  2108,  2114,  2127,  2131,  2136,  2138,
  2143,  2148,  2157,  2167,  2178,  2182,  2191,  2200,  2205,  2327,
  2327,  2329,  2338,  2338,  2340,  2345,  2357,  2361,  2366,  2370,
  2374,  2378,  2382,  2386,  2390,  2394,  2398,  2423,  2427,  2441,
  2445,  2449,  2453,  2459,  2459,  2465,  2474,  2478,  2487,  2496,
  2505,  2509,  2514,  2518,  2522,  2527,  2537,  2556,  2565,  2645,
  2649,  2656,  2667,  2680,  2690,  2701,  2711,  2720,  2729,  2732,
  2733,  2740,  2744,  2749,  2770,  2787,  2801,  2815,  2827,  2835,
  2842,  2848,  2854,  2860,  2875,  2960,  2965,  2969,  2976,  2983,
  2991,  2998,  3006,  3014,  3028,  3045
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","ESINT64VAL",
"EUINT64VAL","ESAPINTVAL","EUAPINTVAL","LOCALVAL_ID","GLOBALVAL_ID","FPVAL",
"VOID","INTTYPE","FLOAT","DOUBLE","LABEL","TYPE","LOCALVAR","GLOBALVAR","LABELSTR",
"STRINGCONSTANT","ATSTRINGCONSTANT","ZEROINITIALIZER","TRUETOK","FALSETOK","BEGINTOK",
"ENDTOK","DECLARE","DEFINE","GLOBAL","CONSTANT","SECTION","ALIAS","VOLATILE",
"THREAD_LOCAL","TO","DOTDOTDOT","NULL_TOK","UNDEF","INTERNAL","LINKONCE","WEAK",
"APPENDING","DLLIMPORT","DLLEXPORT","EXTERN_WEAK","OPAQUE","EXTERNAL","TARGET",
"TRIPLE","ALIGN","DEPLIBS","CALL","TAIL","ASM_TOK","MODULE","SIDEEFFECT","CC_TOK",
"CCC_TOK","FASTCC_TOK","COLDCC_TOK","X86_STDCALLCC_TOK","X86_FASTCALLCC_TOK",
"DATALAYOUT","RET","BR","SWITCH","INVOKE","UNWIND","UNREACHABLE","ADD","SUB",
"MUL","UDIV","SDIV","FDIV","UREM","SREM","FREM","AND","OR","XOR","SHL","LSHR",
"ASHR","ICMP","FCMP","EQ","NE","SLT","SGT","SLE","SGE","ULT","UGT","ULE","UGE",
"OEQ","ONE","OLT","OGT","OLE","OGE","ORD","UNO","UEQ","UNE","MALLOC","ALLOCA",
"FREE","LOAD","STORE","GETELEMENTPTR","TRUNC","ZEXT","SEXT","FPTRUNC","FPEXT",
"BITCAST","UITOFP","SITOFP","FPTOUI","FPTOSI","INTTOPTR","PTRTOINT","PHI_TOK",
"SELECT","VAARG","EXTRACTELEMENT","INSERTELEMENT","SHUFFLEVECTOR","NORETURN",
"INREG","SRET","NOUNWIND","DEFAULT","HIDDEN","PROTECTED","'='","','","'*'","'\\\\'",
"'('","')'","'['","'x'","']'","'<'","'>'","'{'","'}'","'c'","ArithmeticOps",
"LogicalOps","CastOps","IPredicates","FPredicates","IntType","FPType","LocalName",
"OptLocalName","OptLocalAssign","GlobalName","OptGlobalAssign","GlobalAssign",
"GVInternalLinkage","GVExternalLinkage","GVVisibilityStyle","FunctionDeclareLinkage",
"FunctionDefineLinkage","AliasLinkage","OptCallingConv","ParamAttr","OptParamAttrs",
"FuncAttr","OptFuncAttrs","OptAlign","OptCAlign","SectionString","OptSection",
"GlobalVarAttributes","GlobalVarAttribute","PrimType","Types","ArgType","ResultTypes",
"ArgTypeList","ArgTypeListI","TypeListI","ConstVal","ConstExpr","ConstVector",
"GlobalType","ThreadLocal","AliaseeRef","Module","DefinitionList","Definition",
"@1","@2","@3","@4","@5","AsmBlock","TargetDefinition","LibrariesDefinition",
"LibList","ArgListH","ArgList","FunctionHeaderH","BEGIN","FunctionHeader","END",
"Function","FunctionProto","OptSideEffect","ConstValueRef","SymbolicValueRef",
"ValueRef","ResolvedVal","BasicBlockList","BasicBlock","InstructionList","BBTerminatorInst",
"JumpTable","Inst","PHIList","ValueRefList","IndexList","OptTailCall","InstVal",
"OptVolatile","MemoryInst", NULL
};
#endif

static const short yyr1[] = {     0,
   151,   151,   151,   151,   151,   151,   151,   151,   151,   152,
   152,   152,   152,   152,   152,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   156,   157,   157,   158,   158,   159,   159,
   160,   160,   161,   161,   162,   162,   163,   164,   164,   164,
   164,   164,   165,   165,   165,   166,   166,   166,   166,   167,
   167,   167,   168,   168,   168,   168,   168,   169,   169,   169,
   170,   170,   170,   170,   170,   170,   170,   171,   171,   171,
   171,   172,   172,   173,   173,   173,   174,   174,   175,   175,
   176,   176,   177,   178,   178,   179,   179,   180,   180,   181,
   181,   181,   181,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   183,   184,   184,   185,
   185,   186,   186,   186,   186,   187,   187,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   189,   190,   190,   191,
   191,   192,   192,   193,   193,   194,   194,   195,   195,   197,
   196,   198,   196,   196,   196,   196,   199,   196,   200,   196,
   201,   196,   196,   196,   196,   202,   203,   203,   204,   205,
   205,   205,   206,   206,   207,   207,   207,   207,   208,   209,
   209,   210,   211,   211,   212,   213,   214,   214,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   216,
   216,   216,   216,   217,   217,   218,   219,   219,   220,   221,
   221,   221,   222,   222,   222,   222,   222,   222,   222,   222,
   222,   223,   223,   224,   225,   225,   226,   226,   226,   227,
   227,   228,   228,   229,   229,   229,   229,   229,   229,   229,
   229,   229,   229,   229,   229,   229,   230,   230,   231,   231,
   231,   231,   231,   231,   231,   231
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     2,     0,     1,     1,     1,     0,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     1,     1,     1,     0,
     1,     1,     0,     1,     1,     1,     1,     0,     1,     1,
     0,     1,     1,     1,     1,     1,     2,     1,     1,     1,
     1,     0,     2,     1,     1,     1,     0,     2,     0,     2,
     0,     3,     2,     0,     1,     0,     3,     1,     2,     1,
     1,     1,     1,     1,     1,     2,     1,     2,     5,     5,
     5,     5,     3,     2,     5,     4,     2,     1,     1,     1,
     3,     1,     3,     1,     0,     1,     3,     4,     3,     3,
     4,     4,     3,     6,     5,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     6,     5,     8,
     6,     6,     7,     7,     6,     8,     8,     3,     1,     1,
     1,     1,     0,     2,     6,     1,     0,     1,     2,     0,
     3,     0,     3,     3,     3,     3,     0,     7,     0,     8,
     0,     8,     5,     2,     3,     1,     3,     3,     3,     3,
     1,     0,     5,     3,     1,     3,     1,     0,     9,     1,
     1,     4,     1,     1,     2,     3,     0,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     5,     1,
     1,     1,     1,     1,     1,     2,     2,     2,     3,     2,
     0,     1,     2,     2,     3,     9,     9,     8,    14,     1,
     1,     6,     5,     2,     6,     7,     3,     5,     0,     0,
     3,     2,     1,     5,     5,     6,     6,     4,     6,     4,
     4,     6,     6,     2,     8,     1,     1,     0,     3,     6,
     3,     6,     2,     5,     7,     4
};

static const short yydefact[] = {    66,
    57,    63,    58,    64,   192,   190,     0,     0,     0,     0,
     0,     0,    76,    65,    66,   188,    80,    83,     0,     0,
   204,     0,     0,    61,     0,    67,    68,    70,    69,    71,
    73,    72,    74,    75,    77,    78,    79,    76,    76,   183,
   189,    81,    82,    76,   193,    84,    85,    86,    87,    76,
   251,   191,   251,     0,     0,   212,   205,   206,   194,   240,
   241,   196,   120,   121,   122,   123,   124,     0,     0,     0,
     0,   242,   243,   125,   195,   127,   183,   183,    88,   182,
     0,    91,    91,   252,   248,    62,   223,   224,   225,   247,
   207,   208,   211,     0,   145,   128,     0,     0,     0,     0,
   134,   146,     0,   126,   145,     0,     0,    90,    89,     0,
   180,   181,     0,     0,    92,    93,    94,    95,    96,     0,
   226,     0,   288,   250,     0,   209,   144,   102,   140,   142,
     0,     0,     0,     0,     0,     0,   133,     0,     0,     0,
   139,     0,   138,     0,   203,   120,   121,   122,     0,     0,
     0,   197,    97,     0,   220,   221,   222,   287,   273,     0,
     0,     0,     0,    91,   260,   261,     1,     2,     3,     4,
     5,     6,     7,     8,     9,    13,    14,    15,    10,    11,
    12,     0,     0,     0,     0,     0,     0,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   249,    91,
   264,     0,   286,   210,   137,     0,   107,     0,     0,   136,
     0,   147,   107,   199,   201,     0,   184,   165,   166,   161,
   163,   162,   164,   167,   160,   156,   157,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   159,   158,   116,     0,   272,   254,     0,   253,     0,
     0,    54,     0,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,     0,    52,    53,    48,    49,    50,
    51,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,     0,   111,   111,   293,     0,     0,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    98,
    99,   100,   101,   103,   143,   141,   130,   131,   132,   135,
   129,   116,   116,     0,     0,     0,     0,     0,     0,     0,
     0,   149,   179,     0,     0,     0,   153,     0,   150,     0,
     0,     0,     0,   198,   218,   229,   230,   231,   236,   232,
   233,   234,   235,   227,     0,   238,   245,   244,   246,     0,
   255,     0,     0,     0,     0,     0,   289,     0,   291,   270,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   104,   105,   106,   108,   200,   202,     0,
     0,     0,   270,     0,     0,     0,     0,     0,   148,   134,
   146,     0,   151,   152,     0,     0,     0,     0,     0,   118,
   116,   217,   102,   215,     0,   228,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   296,     0,     0,     0,
   280,   281,     0,     0,     0,     0,   278,     0,   111,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   178,   155,
     0,     0,     0,     0,   113,   119,   117,    60,     0,   107,
     0,   237,     0,     0,   269,     0,     0,   111,   112,   111,
     0,     0,     0,     0,     0,     0,   274,   275,   269,     0,
   294,     0,   185,     0,     0,   169,     0,     0,     0,     0,
   154,     0,     0,     0,    59,   214,   216,   102,   114,     0,
     0,     0,     0,     0,   276,   277,   290,   292,   271,     0,
     0,   279,   282,   283,     0,   111,     0,     0,     0,   175,
     0,     0,   171,   172,   168,    60,   115,   109,   239,     0,
     0,   102,     0,   107,   265,     0,   107,   295,   173,   174,
     0,     0,     0,   213,     0,   219,     0,   258,     0,     0,
   267,     0,     0,   266,   285,   170,   176,   177,   110,   256,
     0,   257,     0,   102,     0,     0,     0,   268,     0,     0,
     0,     0,   263,     0,     0,   262,     0,   259,     0,     0,
     0
};

static const short yydefgoto[] = {   249,
   250,   251,   275,   292,   149,   150,    72,   496,    11,    73,
    13,    14,    38,    39,    40,    44,    50,   110,   120,   314,
   215,   387,   317,   546,   367,   410,   528,   344,   411,    74,
   151,   129,   144,   130,   131,   103,   333,   356,   334,   113,
    81,   145,   579,    15,    16,    18,    17,   254,   322,   323,
    59,    21,    57,    94,   414,   415,   121,   157,    51,    89,
    52,    45,   417,   357,    76,   359,   259,    53,    85,    86,
   209,   550,   124,   298,   504,   427,   210,   211,   212,   213
};

static const short yypact[] = {    58,
-32768,-32768,-32768,-32768,-32768,-32768,   -31,   -88,   100,   -74,
   156,    -6,   492,-32768,   595,-32768,    78,   161,    76,    79,
-32768,    99,   202,-32768,  1112,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   147,   147,   191,
-32768,-32768,-32768,   147,-32768,-32768,-32768,-32768,-32768,   147,
   235,-32768,    37,   243,   256,   259,-32768,-32768,-32768,-32768,
-32768,   150,-32768,-32768,-32768,-32768,-32768,   284,   300,     4,
    26,-32768,-32768,-32768,   169,-32768,   287,   287,   293,-32768,
   237,   199,   199,-32768,-32768,    95,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   -81,   453,-32768,   181,   184,   198,   150,
-32768,   169,   -97,-32768,   453,   237,   237,-32768,-32768,   956,
-32768,-32768,  1148,   328,-32768,-32768,-32768,-32768,-32768,  1194,
-32768,    -8,  1356,-32768,   315,-32768,-32768,   169,-32768,   204,
   201,  1208,  1208,   208,   -82,  1208,-32768,   206,  1148,  1208,
   150,   215,   169,   299,-32768,    96,   340,   354,   297,   355,
   781,-32768,-32768,   125,-32768,-32768,-32768,-32768,-32768,   314,
  1254,   162,   357,   199,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   487,   467,  1208,  1208,  1208,  1208,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1208,
  1208,  1208,  1208,  1208,  1208,  1208,  1208,  1208,-32768,   199,
-32768,   187,-32768,-32768,   119,  1001,-32768,    10,    84,-32768,
   223,   169,-32768,-32768,   169,   956,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   487,   467,   234,
   236,   238,   239,   240,  1037,  1270,   260,   359,   253,   261,
   263,-32768,-32768,   246,   264,-32768,   150,   631,-32768,   759,
   759,-32768,   759,  1194,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1208,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1208,   -45,   -35,-32768,   631,   170,   269,   273,   274,
   275,   276,   278,   631,   631,   342,  1194,  1208,  1208,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,     2,-32768,-32768,-32768,
     2,   246,   246,   363,   279,   280,  1148,  1148,  1148,  1148,
  1148,-32768,-32768,   -50,   379,   -55,-32768,   -69,-32768,  1148,
  1148,  1148,    30,-32768,  1052,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   346,  1148,-32768,-32768,-32768,-32768,   281,
-32768,   290,   759,   631,   631,    17,-32768,    19,-32768,-32768,
   759,   282,  1208,  1208,  1208,  1208,  1208,   292,   296,  1208,
   759,   631,   301,-32768,-32768,-32768,-32768,-32768,-32768,  1208,
  1148,  1148,-32768,   303,   305,   306,   307,  1148,-32768,   288,
   781,   -68,-32768,-32768,   308,   309,   404,   430,   446,-32768,
   246,-32768,   169,   316,   313,-32768,   438,   -49,   445,   448,
   327,   333,   336,   759,   471,   759,   343,   344,   759,   353,
   169,-32768,   356,   358,   759,   759,   169,   339,   361,  1208,
    49,   362,   364,    -1,  1148,  1148,  1148,  1148,-32768,-32768,
   345,  1148,  1148,  1208,-32768,-32768,-32768,    16,  1098,-32768,
   367,-32768,   759,   759,  1208,   759,   759,   361,-32768,   361,
  1208,   759,   368,  1208,  1208,  1208,-32768,-32768,  1208,   452,
-32768,   631,-32768,  1148,  1148,-32768,   369,   366,   371,   373,
-32768,   370,   372,   182,-32768,-32768,-32768,   169,   106,   476,
   375,   374,   631,    18,-32768,-32768,-32768,-32768,-32768,   352,
   759,-32768,-32768,-32768,    60,   361,   376,   378,  1148,-32768,
  1148,  1148,-32768,-32768,-32768,    16,-32768,   472,-32768,   509,
    -2,-32768,  1208,-32768,-32768,   384,-32768,-32768,-32768,-32768,
   382,   395,   397,-32768,   536,-32768,   759,-32768,   912,     1,
   119,   631,   116,-32768,     2,-32768,-32768,-32768,-32768,-32768,
   403,-32768,   912,-32768,   528,   529,   406,   119,   759,   759,
   531,   480,-32768,   759,   535,-32768,   759,-32768,   554,   555,
-32768
};

static const short yypgoto[] = {   433,
   460,   461,   349,   351,  -162,-32768,     0,    65,   506,    11,
-32768,-32768,-32768,-32768,    15,-32768,-32768,-32768,  -120,  -292,
  -407,-32768,  -220,-32768,  -281,    98,-32768,  -272,-32768,-32768,
   -23,   386,  -110,-32768,   493,   501,    31,  -147,  -228,   230,
   262,   377,-32768,-32768,   590,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   523,-32768,-32768,-32768,
-32768,-32768,-32768,  -502,  -137,   122,  -181,-32768,   556,-32768,
-32768,-32768,-32768,-32768,   128,   220,-32768,-32768,-32768,-32768
};


#define	YYLAST		1485


static const short yytable[] = {    10,
   263,    75,   321,   252,   295,   458,   227,    98,   262,   154,
    12,   262,   369,   253,    10,   155,    19,   336,   338,   299,
   300,   301,   302,   303,   386,    12,   306,   424,   386,   426,
    20,     1,    60,    61,     3,   100,    63,    64,    65,    66,
   136,     1,     2,   264,     3,     4,   561,   102,    22,   388,
   389,   137,    77,    78,    84,   136,   125,  -187,    82,   408,
   567,    87,    24,   126,    83,   425,   221,   425,   398,   398,
    67,   128,   -62,     1,     2,   102,     3,     4,   409,   404,
   451,   128,   398,     5,     6,    10,   143,   398,   398,   307,
   526,   403,   366,   104,   399,   105,   143,   462,   -54,   -54,
   -54,   -54,   368,   104,     7,   105,   402,     8,   218,   219,
     1,     9,   222,     3,   310,   311,   225,   228,   229,    42,
   358,    43,   358,   358,   551,   358,   418,   383,   310,   311,
    26,   384,   312,   313,   385,   408,   471,   258,   457,   156,
   486,     2,   548,   152,     4,   562,   312,   313,   104,   565,
   105,    99,    23,   363,   318,   533,   568,   481,   358,   534,
   293,   294,   258,   296,   255,    68,   358,   358,    69,   224,
    25,    70,   260,    71,   101,   261,   297,   258,   258,   258,
   258,   258,   304,   305,   258,    88,   507,   104,   508,   105,
   483,   430,   128,   432,   433,   434,   381,   533,    46,    47,
    48,   537,   143,    49,    60,    61,   386,   100,    63,    64,
    65,    66,    54,     1,     2,    55,     3,     4,   310,   311,
    58,    79,   104,    80,   105,   358,   358,   358,   310,   311,
   319,   310,   311,   358,   538,   384,   312,   313,   385,   499,
   143,    56,    67,   358,   358,   384,   312,   313,   385,   312,
   313,   364,    84,   252,   114,   115,   116,   117,   118,   119,
   386,    91,   386,   253,   111,   112,    60,    61,   365,   100,
   146,   147,   148,    66,    92,     1,     2,    93,     3,     4,
    35,    36,    37,   143,   382,   258,   358,    96,   358,   509,
    95,   358,   512,   513,   514,   308,   309,   358,   358,   230,
   231,   232,   233,    97,    67,    60,    61,   104,   104,   105,
   105,   401,   371,   553,     1,     2,   555,     3,     4,    80,
   104,   413,   105,   525,   132,   358,   358,   133,   358,   358,
   108,   153,   109,   214,   358,   139,   140,    68,   106,   107,
    69,   216,   217,    70,   358,    71,   134,   223,   -55,   258,
   431,   258,   258,   258,   220,   226,   437,   393,   394,   395,
   396,   397,   -56,   234,   256,   358,   441,   262,   549,   320,
   405,   406,   407,   358,   327,   380,   328,   339,   329,   330,
   331,   360,   361,   343,   362,    60,    61,   563,   100,   146,
   147,   148,    66,   340,     1,     2,   390,     3,     4,    68,
   416,   341,    69,   342,   345,    70,   372,    71,   337,   358,
   373,   374,   375,   376,   358,   377,   482,   370,   419,   391,
   392,   442,   443,    67,   429,   378,   379,   420,   449,   435,
   494,   358,   358,   436,   450,   498,   358,   454,   440,   358,
   445,   503,   446,   447,   448,   452,   453,   258,   455,   456,
   258,   258,   258,   459,   460,   503,   461,   495,   463,    60,
    61,   464,   100,    63,    64,    65,    66,   465,     1,     2,
   466,     3,     4,   467,   469,   487,   488,   489,   490,   479,
   471,   472,   492,   493,   421,   422,   423,   127,   276,   277,
   474,   491,   428,   475,   529,   476,   535,    67,   480,   484,
   425,   485,   438,   439,   500,   511,   519,   520,   521,   552,
   522,   523,   530,   524,   517,   518,   531,   539,    68,   540,
   545,    69,   547,   556,    70,   495,    71,   400,   554,    27,
    28,    29,    30,    31,    32,    33,   557,    34,   558,   559,
   566,   569,   570,   571,   574,   468,   575,   470,   577,   541,
   473,   542,   543,   580,   581,   206,   477,   478,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   207,   208,   501,   502,   325,   505,   506,   326,
   544,   123,    68,   510,  -186,    69,   527,   138,    70,   135,
    71,   316,   324,   516,    41,   122,   515,     0,    90,   -62,
     1,     2,   444,     3,     4,     0,     0,     0,     0,     0,
     5,     6,     0,     0,   532,    35,    36,    37,     0,     0,
     0,     0,   536,   346,   347,     0,     0,    60,    61,   348,
     0,     7,     0,     0,     8,     0,     1,     2,     9,     3,
     4,   349,   350,   351,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   352,   353,   560,     0,
     0,     0,     0,   564,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   354,     0,     0,     0,     0,     0,     0,
   572,   573,     0,     0,     0,   576,     0,     0,   578,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,   179,   180,   181,   238,   239,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   240,   188,   189,   190,   191,   192,   193,   194,   195,
   196,   197,   198,   199,     0,   241,     0,   242,   243,   244,
     0,   346,   347,     0,     0,    60,    61,   348,     0,   104,
     0,   105,     0,     0,     1,     2,   355,     3,     4,   349,
   350,   351,     0,     0,     0,     0,     0,    60,    61,     0,
     0,     0,     0,     0,   352,   353,     1,     2,     0,     3,
     4,   235,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   354,     0,     0,     0,     0,   236,   237,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   181,   238,   239,     0,     0,     0,     0,     0,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,   179,   180,   181,   238,   239,     0,     0,     0,   240,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,     0,   241,     0,   242,   243,   244,     0,     0,
     0,   240,   188,   189,   190,   191,   192,   193,   194,   195,
   196,   197,   198,   199,   355,   241,     0,   242,   243,   244,
     0,     0,     0,     0,   346,   347,     0,     0,     0,   104,
   348,   105,     0,   245,     0,     0,   246,     0,   247,     0,
   248,     0,   349,   350,   351,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   352,   353,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    60,    61,   354,   141,    63,    64,    65,    66,
     0,     1,     2,     0,     3,     4,     0,     0,     0,     0,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   238,   239,     0,     0,     0,
    67,     0,     0,     0,     0,     0,     0,    60,    61,     0,
   100,    63,    64,    65,    66,     0,     1,     2,     0,     3,
     4,     0,   240,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   197,   198,   199,   315,   241,     0,   242,   243,
   244,     0,     0,    60,    61,    67,   100,   146,   147,   148,
    66,     0,     1,     2,     0,     3,     4,   355,    60,    61,
     0,   100,    63,    64,    65,    66,     0,     1,     2,     0,
     3,     4,   142,     0,     0,     0,     0,     0,     0,     0,
     0,    67,     0,     0,     0,     0,   412,     0,     0,     0,
     0,     0,     0,     0,     0,    68,    67,     0,    69,     0,
     0,    70,     0,    71,    60,    61,     0,   100,    63,    64,
    65,    66,     0,     1,     2,     0,     3,     4,    60,    61,
     0,    62,    63,    64,    65,    66,     0,     1,     2,     0,
     3,     4,   497,     0,     0,     0,     0,     0,     0,     0,
    68,     0,    67,    69,     0,     0,    70,     0,    71,     0,
     0,     0,     0,     0,    60,    61,    67,   100,   146,   147,
   148,    66,     0,     1,     2,     0,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,    68,     0,     0,    69,
     0,   332,    70,     0,    71,     0,     0,     0,     0,     0,
     0,    68,    67,     0,    69,     0,     0,    70,     0,    71,
    60,    61,     0,   141,    63,    64,    65,    66,     0,     1,
     2,     0,     3,     4,    60,    61,     0,   100,    63,    64,
    65,    66,     0,     1,     2,     0,     3,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    68,    67,     0,
    69,     0,     0,    70,     0,    71,     0,     0,     0,     0,
     0,    68,    67,     0,    69,     0,     0,    70,     0,    71,
    60,    61,     0,   257,    63,    64,    65,    66,     0,     1,
     2,     0,     3,     4,     0,     0,    60,    61,     0,   100,
   146,   147,   148,    66,     0,     1,     2,    68,     3,     4,
    69,     0,     0,    70,     0,    71,     0,     0,    67,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    67,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    68,     0,     0,    69,     0,     0,    70,
     0,    71,     0,     0,     0,     0,     0,    68,     0,     0,
    69,     0,     0,    70,     0,    71,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   158,     0,     0,
     0,     0,     0,    68,     0,     0,    69,     0,     0,    70,
     0,    71,     0,     0,     0,     0,   159,   160,     0,    68,
     0,     0,    69,     0,     0,    70,     0,   335,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   184,   185,   186,     0,     0,   187,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   203,   204,   205
};

static const short yycheck[] = {     0,
   163,    25,   223,   151,   186,   413,   144,     4,    11,   120,
     0,    11,   294,   151,    15,    24,    48,   246,   247,   201,
   202,   203,   204,   205,   317,    15,   208,    11,   321,    11,
    62,    16,     7,     8,    19,    10,    11,    12,    13,    14,
   138,    16,    17,   164,    19,    20,   549,    71,   137,   322,
   323,   149,    38,    39,    18,   138,   138,     0,    44,    30,
   563,    25,   137,   145,    50,    49,   149,    49,   138,   138,
    45,    95,    15,    16,    17,    99,    19,    20,    49,   149,
   149,   105,   138,    26,    27,    86,   110,   138,   138,   210,
   498,   147,   138,   139,   145,   141,   120,   147,     3,     4,
     5,     6,   138,   139,    47,   141,   335,    50,   132,   133,
    16,    54,   136,    19,   113,   114,   140,    22,    23,    42,
   258,    44,   260,   261,   532,   263,   355,   309,   113,   114,
   137,   130,   131,   132,   133,    30,   138,   161,   411,   148,
   142,    17,   145,   113,    20,   145,   131,   132,   139,    34,
   141,   148,    53,   264,   145,   138,   564,   439,   296,   142,
   184,   185,   186,   187,   154,   140,   304,   305,   143,   139,
    15,   146,    11,   148,   149,    14,   200,   201,   202,   203,
   204,   205,   206,   207,   208,   149,   468,   139,   470,   141,
   142,   373,   216,   375,   376,   377,   307,   138,    38,    39,
    40,   142,   226,    43,     7,     8,   499,    10,    11,    12,
    13,    14,   137,    16,    17,   137,    19,    20,   113,   114,
    19,    31,   139,    33,   141,   363,   364,   365,   113,   114,
   147,   113,   114,   371,   516,   130,   131,   132,   133,   460,
   264,   143,    45,   381,   382,   130,   131,   132,   133,   131,
   132,   275,    18,   401,    56,    57,    58,    59,    60,    61,
   553,    19,   555,   401,    28,    29,     7,     8,   292,    10,
    11,    12,    13,    14,    19,    16,    17,    19,    19,    20,
   134,   135,   136,   307,   308,   309,   424,     4,   426,   471,
   141,   429,   474,   475,   476,   109,   110,   435,   436,     3,
     4,     5,     6,     4,    45,     7,     8,   139,   139,   141,
   141,   335,   143,   534,    16,    17,   537,    19,    20,    33,
   139,   345,   141,   142,   144,   463,   464,   144,   466,   467,
    38,     4,    40,    19,   472,   106,   107,   140,    77,    78,
   143,   138,   142,   146,   482,   148,   149,   142,     9,   373,
   374,   375,   376,   377,   147,   141,   380,   327,   328,   329,
   330,   331,     9,     9,    51,   503,   390,    11,   531,   147,
   340,   341,   342,   511,   141,    34,   141,    19,   141,   141,
   141,   260,   261,   138,   263,     7,     8,   550,    10,    11,
    12,    13,    14,   141,    16,    17,    34,    19,    20,   140,
    55,   141,   143,   141,   141,   146,   138,   148,   149,   547,
   138,   138,   138,   138,   552,   138,   440,   296,   138,   141,
   141,   391,   392,    45,   143,   304,   305,   138,   398,   138,
   454,   569,   570,   138,   147,   459,   574,    34,   138,   577,
   138,   465,   138,   138,   138,   138,   138,   471,    19,     4,
   474,   475,   476,   138,   142,   479,    19,   458,    14,     7,
     8,    14,    10,    11,    12,    13,    14,   141,    16,    17,
   138,    19,    20,   138,     4,   445,   446,   447,   448,   141,
   138,   138,   452,   453,   363,   364,   365,    35,    22,    23,
   138,   147,   371,   138,    19,   138,   145,    45,   138,   138,
    49,   138,   381,   382,   138,   138,   138,   142,   138,   533,
   138,   142,   138,   142,   484,   485,   143,   142,   140,   142,
    49,   143,    14,   142,   146,   526,   148,   149,   145,    38,
    39,    40,    41,    42,    43,    44,   142,    46,   142,     4,
   138,    14,    14,   138,    14,   424,    67,   426,    14,   519,
   429,   521,   522,     0,     0,   123,   435,   436,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,   123,   123,   463,   464,   238,   466,   467,   239,
   526,    86,   140,   472,     0,   143,   499,   105,   146,    99,
   148,   216,   226,   482,    15,    83,   479,    -1,    53,    15,
    16,    17,   393,    19,    20,    -1,    -1,    -1,    -1,    -1,
    26,    27,    -1,    -1,   503,   134,   135,   136,    -1,    -1,
    -1,    -1,   511,     3,     4,    -1,    -1,     7,     8,     9,
    -1,    47,    -1,    -1,    50,    -1,    16,    17,    54,    19,
    20,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,   547,    -1,
    -1,    -1,    -1,   552,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
   569,   570,    -1,    -1,    -1,   574,    -1,    -1,   577,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,    -1,   127,   128,   129,
    -1,     3,     4,    -1,    -1,     7,     8,     9,    -1,   139,
    -1,   141,    -1,    -1,    16,    17,   146,    19,    20,    21,
    22,    23,    -1,    -1,    -1,    -1,    -1,     7,     8,    -1,
    -1,    -1,    -1,    -1,    36,    37,    16,    17,    -1,    19,
    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    53,    -1,    -1,    -1,    -1,    36,    37,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    -1,    -1,    -1,    -1,    -1,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    -1,    -1,    -1,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,    -1,   127,   128,   129,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   146,   125,    -1,   127,   128,   129,
    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,    -1,   139,
     9,   141,    -1,   143,    -1,    -1,   146,    -1,   148,    -1,
   150,    -1,    21,    22,    23,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     7,     8,    53,    10,    11,    12,    13,    14,
    -1,    16,    17,    -1,    19,    20,    -1,    -1,    -1,    -1,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    -1,    -1,    -1,
    45,    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,    -1,
    10,    11,    12,    13,    14,    -1,    16,    17,    -1,    19,
    20,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    35,   125,    -1,   127,   128,
   129,    -1,    -1,     7,     8,    45,    10,    11,    12,    13,
    14,    -1,    16,    17,    -1,    19,    20,   146,     7,     8,
    -1,    10,    11,    12,    13,    14,    -1,    16,    17,    -1,
    19,    20,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    45,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   140,    45,    -1,   143,    -1,
    -1,   146,    -1,   148,     7,     8,    -1,    10,    11,    12,
    13,    14,    -1,    16,    17,    -1,    19,    20,     7,     8,
    -1,    10,    11,    12,    13,    14,    -1,    16,    17,    -1,
    19,    20,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   140,    -1,    45,   143,    -1,    -1,   146,    -1,   148,    -1,
    -1,    -1,    -1,    -1,     7,     8,    45,    10,    11,    12,
    13,    14,    -1,    16,    17,    -1,    19,    20,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,   143,
    -1,   145,   146,    -1,   148,    -1,    -1,    -1,    -1,    -1,
    -1,   140,    45,    -1,   143,    -1,    -1,   146,    -1,   148,
     7,     8,    -1,    10,    11,    12,    13,    14,    -1,    16,
    17,    -1,    19,    20,     7,     8,    -1,    10,    11,    12,
    13,    14,    -1,    16,    17,    -1,    19,    20,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   140,    45,    -1,
   143,    -1,    -1,   146,    -1,   148,    -1,    -1,    -1,    -1,
    -1,   140,    45,    -1,   143,    -1,    -1,   146,    -1,   148,
     7,     8,    -1,    10,    11,    12,    13,    14,    -1,    16,
    17,    -1,    19,    20,    -1,    -1,     7,     8,    -1,    10,
    11,    12,    13,    14,    -1,    16,    17,   140,    19,    20,
   143,    -1,    -1,   146,    -1,   148,    -1,    -1,    45,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,
    -1,   148,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,
   143,    -1,    -1,   146,    -1,   148,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
    -1,    -1,    -1,   140,    -1,    -1,   143,    -1,    -1,   146,
    -1,   148,    -1,    -1,    -1,    -1,    51,    52,    -1,   140,
    -1,    -1,   143,    -1,    -1,   146,    -1,   148,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   106,   107,   108,    -1,    -1,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 28:
#line 1117 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_EQ; ;
    break;}
case 29:
#line 1117 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_NE; ;
    break;}
case 30:
#line 1118 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_SLT; ;
    break;}
case 31:
#line 1118 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_SGT; ;
    break;}
case 32:
#line 1119 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_SLE; ;
    break;}
case 33:
#line 1119 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_SGE; ;
    break;}
case 34:
#line 1120 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_ULT; ;
    break;}
case 35:
#line 1120 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_UGT; ;
    break;}
case 36:
#line 1121 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_ULE; ;
    break;}
case 37:
#line 1121 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_UGE; ;
    break;}
case 38:
#line 1125 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OEQ; ;
    break;}
case 39:
#line 1125 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_ONE; ;
    break;}
case 40:
#line 1126 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OLT; ;
    break;}
case 41:
#line 1126 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OGT; ;
    break;}
case 42:
#line 1127 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OLE; ;
    break;}
case 43:
#line 1127 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OGE; ;
    break;}
case 44:
#line 1128 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_ORD; ;
    break;}
case 45:
#line 1128 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UNO; ;
    break;}
case 46:
#line 1129 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UEQ; ;
    break;}
case 47:
#line 1129 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UNE; ;
    break;}
case 48:
#line 1130 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_ULT; ;
    break;}
case 49:
#line 1130 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UGT; ;
    break;}
case 50:
#line 1131 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_ULE; ;
    break;}
case 51:
#line 1131 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UGE; ;
    break;}
case 52:
#line 1132 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_TRUE; ;
    break;}
case 53:
#line 1133 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_FALSE; ;
    break;}
case 60:
#line 1142 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.StrVal = 0; ;
    break;}
case 61:
#line 1146 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.StrVal = yyvsp[-1].StrVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 62:
#line 1150 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.StrVal = 0;
    CHECK_FOR_ERROR
  ;
    break;}
case 66:
#line 1158 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.StrVal = 0;
    CHECK_FOR_ERROR
  ;
    break;}
case 67:
#line 1163 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.StrVal = yyvsp[-1].StrVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 68:
#line 1169 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::InternalLinkage; ;
    break;}
case 69:
#line 1170 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::WeakLinkage; ;
    break;}
case 70:
#line 1171 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::LinkOnceLinkage; ;
    break;}
case 71:
#line 1172 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::AppendingLinkage; ;
    break;}
case 72:
#line 1173 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::DLLExportLinkage; ;
    break;}
case 73:
#line 1177 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::DLLImportLinkage; ;
    break;}
case 74:
#line 1178 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalWeakLinkage; ;
    break;}
case 75:
#line 1179 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalLinkage; ;
    break;}
case 76:
#line 1183 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Visibility = GlobalValue::DefaultVisibility;   ;
    break;}
case 77:
#line 1184 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Visibility = GlobalValue::DefaultVisibility;   ;
    break;}
case 78:
#line 1185 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Visibility = GlobalValue::HiddenVisibility;    ;
    break;}
case 79:
#line 1186 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Visibility = GlobalValue::ProtectedVisibility; ;
    break;}
case 80:
#line 1190 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalLinkage; ;
    break;}
case 81:
#line 1191 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::DLLImportLinkage; ;
    break;}
case 82:
#line 1192 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalWeakLinkage; ;
    break;}
case 83:
#line 1196 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalLinkage; ;
    break;}
case 84:
#line 1197 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::InternalLinkage; ;
    break;}
case 85:
#line 1198 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::LinkOnceLinkage; ;
    break;}
case 86:
#line 1199 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::WeakLinkage; ;
    break;}
case 87:
#line 1200 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::DLLExportLinkage; ;
    break;}
case 88:
#line 1204 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalLinkage; ;
    break;}
case 89:
#line 1205 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::WeakLinkage; ;
    break;}
case 90:
#line 1206 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::InternalLinkage; ;
    break;}
case 91:
#line 1209 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::C; ;
    break;}
case 92:
#line 1210 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::C; ;
    break;}
case 93:
#line 1211 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::Fast; ;
    break;}
case 94:
#line 1212 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::Cold; ;
    break;}
case 95:
#line 1213 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::X86_StdCall; ;
    break;}
case 96:
#line 1214 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::X86_FastCall; ;
    break;}
case 97:
#line 1215 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
                   if ((unsigned)yyvsp[0].UInt64Val != yyvsp[0].UInt64Val)
                     GEN_ERROR("Calling conv too large");
                   yyval.UIntVal = yyvsp[0].UInt64Val;
                  CHECK_FOR_ERROR
                 ;
    break;}
case 98:
#line 1222 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = ParamAttr::ZExt;      ;
    break;}
case 99:
#line 1223 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = ParamAttr::SExt;      ;
    break;}
case 100:
#line 1224 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = ParamAttr::InReg;     ;
    break;}
case 101:
#line 1225 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = ParamAttr::StructRet; ;
    break;}
case 102:
#line 1228 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = ParamAttr::None; ;
    break;}
case 103:
#line 1229 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
                yyval.ParamAttrs = yyvsp[-1].ParamAttrs | yyvsp[0].ParamAttrs;
              ;
    break;}
case 104:
#line 1234 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = ParamAttr::NoReturn; ;
    break;}
case 105:
#line 1235 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = ParamAttr::NoUnwind; ;
    break;}
case 107:
#line 1239 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = ParamAttr::None; ;
    break;}
case 108:
#line 1240 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
                yyval.ParamAttrs = yyvsp[-1].ParamAttrs | yyvsp[0].ParamAttrs;
              ;
    break;}
case 109:
#line 1247 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = 0; ;
    break;}
case 110:
#line 1248 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  yyval.UIntVal = yyvsp[0].UInt64Val;
  if (yyval.UIntVal != 0 && !isPowerOf2_32(yyval.UIntVal))
    GEN_ERROR("Alignment must be a power of two");
  CHECK_FOR_ERROR
;
    break;}
case 111:
#line 1254 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = 0; ;
    break;}
case 112:
#line 1255 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  yyval.UIntVal = yyvsp[0].UInt64Val;
  if (yyval.UIntVal != 0 && !isPowerOf2_32(yyval.UIntVal))
    GEN_ERROR("Alignment must be a power of two");
  CHECK_FOR_ERROR
;
    break;}
case 113:
#line 1263 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  for (unsigned i = 0, e = strlen(yyvsp[0].StrVal); i != e; ++i)
    if (yyvsp[0].StrVal[i] == '"' || yyvsp[0].StrVal[i] == '\\')
      GEN_ERROR("Invalid character in section name");
  yyval.StrVal = yyvsp[0].StrVal;
  CHECK_FOR_ERROR
;
    break;}
case 114:
#line 1271 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.StrVal = 0; ;
    break;}
case 115:
#line 1272 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.StrVal = yyvsp[0].StrVal; ;
    break;}
case 116:
#line 1277 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{;
    break;}
case 117:
#line 1278 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{;
    break;}
case 118:
#line 1279 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurGV->setSection(yyvsp[0].StrVal);
    free(yyvsp[0].StrVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 119:
#line 1284 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[0].UInt64Val != 0 && !isPowerOf2_32(yyvsp[0].UInt64Val))
      GEN_ERROR("Alignment must be a power of two");
    CurGV->setAlignment(yyvsp[0].UInt64Val);
    CHECK_FOR_ERROR
  ;
    break;}
case 124:
#line 1300 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeVal = new PATypeHolder(OpaqueType::get());
    CHECK_FOR_ERROR
  ;
    break;}
case 125:
#line 1304 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeVal = new PATypeHolder(yyvsp[0].PrimType);
    CHECK_FOR_ERROR
  ;
    break;}
case 126:
#line 1308 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                             // Pointer type?
    if (*yyvsp[-1].TypeVal == Type::LabelTy)
      GEN_ERROR("Cannot form a pointer to a basic block");
    yyval.TypeVal = new PATypeHolder(HandleUpRefs(PointerType::get(*yyvsp[-1].TypeVal)));
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 127:
#line 1315 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{            // Named types are also simple types...
    const Type* tmp = getTypeVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.TypeVal = new PATypeHolder(tmp);
  ;
    break;}
case 128:
#line 1320 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                   // Type UpReference
    if (yyvsp[0].UInt64Val > (uint64_t)~0U) GEN_ERROR("Value out of range");
    OpaqueType *OT = OpaqueType::get();        // Use temporary placeholder
    UpRefs.push_back(UpRefRecord((unsigned)yyvsp[0].UInt64Val, OT));  // Add to vector...
    yyval.TypeVal = new PATypeHolder(OT);
    UR_OUT("New Upreference!\n");
    CHECK_FOR_ERROR
  ;
    break;}
case 129:
#line 1328 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    std::vector<const Type*> Params;
    ParamAttrsVector Attrs;
    if (yyvsp[0].ParamAttrs != ParamAttr::None) {
      ParamAttrsWithIndex X; X.index = 0; X.attrs = yyvsp[0].ParamAttrs;
      Attrs.push_back(X);
    }
    unsigned index = 1;
    TypeWithAttrsList::iterator I = yyvsp[-2].TypeWithAttrsList->begin(), E = yyvsp[-2].TypeWithAttrsList->end();
    for (; I != E; ++I, ++index) {
      const Type *Ty = I->Ty->get();
      Params.push_back(Ty);
      if (Ty != Type::VoidTy)
        if (I->Attrs != ParamAttr::None) {
          ParamAttrsWithIndex X; X.index = index; X.attrs = I->Attrs;
          Attrs.push_back(X);
        }
    }
    bool isVarArg = Params.size() && Params.back() == Type::VoidTy;
    if (isVarArg) Params.pop_back();

    ParamAttrsList *ActualAttrs = 0;
    if (!Attrs.empty())
      ActualAttrs = ParamAttrsList::get(Attrs);
    FunctionType *FT = FunctionType::get(*yyvsp[-4].TypeVal, Params, isVarArg, ActualAttrs);
    delete yyvsp[-2].TypeWithAttrsList;   // Delete the argument list
    delete yyvsp[-4].TypeVal;   // Delete the return type handle
    yyval.TypeVal = new PATypeHolder(HandleUpRefs(FT)); 
    CHECK_FOR_ERROR
  ;
    break;}
case 130:
#line 1358 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    std::vector<const Type*> Params;
    ParamAttrsVector Attrs;
    if (yyvsp[0].ParamAttrs != ParamAttr::None) {
      ParamAttrsWithIndex X; X.index = 0; X.attrs = yyvsp[0].ParamAttrs;
      Attrs.push_back(X);
    }
    TypeWithAttrsList::iterator I = yyvsp[-2].TypeWithAttrsList->begin(), E = yyvsp[-2].TypeWithAttrsList->end();
    unsigned index = 1;
    for ( ; I != E; ++I, ++index) {
      const Type* Ty = I->Ty->get();
      Params.push_back(Ty);
      if (Ty != Type::VoidTy)
        if (I->Attrs != ParamAttr::None) {
          ParamAttrsWithIndex X; X.index = index; X.attrs = I->Attrs;
          Attrs.push_back(X);
        }
    }
    bool isVarArg = Params.size() && Params.back() == Type::VoidTy;
    if (isVarArg) Params.pop_back();

    ParamAttrsList *ActualAttrs = 0;
    if (!Attrs.empty())
      ActualAttrs = ParamAttrsList::get(Attrs);

    FunctionType *FT = FunctionType::get(yyvsp[-4].PrimType, Params, isVarArg, ActualAttrs);
    delete yyvsp[-2].TypeWithAttrsList;      // Delete the argument list
    yyval.TypeVal = new PATypeHolder(HandleUpRefs(FT)); 
    CHECK_FOR_ERROR
  ;
    break;}
case 131:
#line 1389 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{          // Sized array type?
    yyval.TypeVal = new PATypeHolder(HandleUpRefs(ArrayType::get(*yyvsp[-1].TypeVal, (unsigned)yyvsp[-3].UInt64Val)));
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 132:
#line 1394 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{          // Vector type?
     const llvm::Type* ElemTy = yyvsp[-1].TypeVal->get();
     if ((unsigned)yyvsp[-3].UInt64Val != yyvsp[-3].UInt64Val)
        GEN_ERROR("Unsigned result not equal to signed result");
     if (!ElemTy->isFloatingPoint() && !ElemTy->isInteger())
        GEN_ERROR("Element type of a VectorType must be primitive");
     if (!isPowerOf2_32(yyvsp[-3].UInt64Val))
       GEN_ERROR("Vector length should be a power of 2");
     yyval.TypeVal = new PATypeHolder(HandleUpRefs(VectorType::get(*yyvsp[-1].TypeVal, (unsigned)yyvsp[-3].UInt64Val)));
     delete yyvsp[-1].TypeVal;
     CHECK_FOR_ERROR
  ;
    break;}
case 133:
#line 1406 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                        // Structure type?
    std::vector<const Type*> Elements;
    for (std::list<llvm::PATypeHolder>::iterator I = yyvsp[-1].TypeList->begin(),
           E = yyvsp[-1].TypeList->end(); I != E; ++I)
      Elements.push_back(*I);

    yyval.TypeVal = new PATypeHolder(HandleUpRefs(StructType::get(Elements)));
    delete yyvsp[-1].TypeList;
    CHECK_FOR_ERROR
  ;
    break;}
case 134:
#line 1416 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                                  // Empty structure type?
    yyval.TypeVal = new PATypeHolder(StructType::get(std::vector<const Type*>()));
    CHECK_FOR_ERROR
  ;
    break;}
case 135:
#line 1420 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    std::vector<const Type*> Elements;
    for (std::list<llvm::PATypeHolder>::iterator I = yyvsp[-2].TypeList->begin(),
           E = yyvsp[-2].TypeList->end(); I != E; ++I)
      Elements.push_back(*I);

    yyval.TypeVal = new PATypeHolder(HandleUpRefs(StructType::get(Elements, true)));
    delete yyvsp[-2].TypeList;
    CHECK_FOR_ERROR
  ;
    break;}
case 136:
#line 1430 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                         // Empty structure type?
    yyval.TypeVal = new PATypeHolder(StructType::get(std::vector<const Type*>(), true));
    CHECK_FOR_ERROR
  ;
    break;}
case 137:
#line 1437 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ 
    yyval.TypeWithAttrs.Ty = yyvsp[-1].TypeVal; 
    yyval.TypeWithAttrs.Attrs = yyvsp[0].ParamAttrs; 
  ;
    break;}
case 138:
#line 1444 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    if (!(*yyvsp[0].TypeVal)->isFirstClassType())
      GEN_ERROR("LLVM functions cannot return aggregate types");
    yyval.TypeVal = yyvsp[0].TypeVal;
  ;
    break;}
case 139:
#line 1451 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeVal = new PATypeHolder(Type::VoidTy);
  ;
    break;}
case 140:
#line 1456 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeWithAttrsList = new TypeWithAttrsList();
    yyval.TypeWithAttrsList->push_back(yyvsp[0].TypeWithAttrs);
    CHECK_FOR_ERROR
  ;
    break;}
case 141:
#line 1461 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    (yyval.TypeWithAttrsList=yyvsp[-2].TypeWithAttrsList)->push_back(yyvsp[0].TypeWithAttrs);
    CHECK_FOR_ERROR
  ;
    break;}
case 143:
#line 1469 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeWithAttrsList=yyvsp[-2].TypeWithAttrsList;
    TypeWithAttrs TWA; TWA.Attrs = ParamAttr::None;
    TWA.Ty = new PATypeHolder(Type::VoidTy);
    yyval.TypeWithAttrsList->push_back(TWA);
    CHECK_FOR_ERROR
  ;
    break;}
case 144:
#line 1476 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeWithAttrsList = new TypeWithAttrsList;
    TypeWithAttrs TWA; TWA.Attrs = ParamAttr::None;
    TWA.Ty = new PATypeHolder(Type::VoidTy);
    yyval.TypeWithAttrsList->push_back(TWA);
    CHECK_FOR_ERROR
  ;
    break;}
case 145:
#line 1483 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeWithAttrsList = new TypeWithAttrsList();
    CHECK_FOR_ERROR
  ;
    break;}
case 146:
#line 1491 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeList = new std::list<PATypeHolder>();
    yyval.TypeList->push_back(*yyvsp[0].TypeVal); 
    delete yyvsp[0].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 147:
#line 1497 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    (yyval.TypeList=yyvsp[-2].TypeList)->push_back(*yyvsp[0].TypeVal); 
    delete yyvsp[0].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 148:
#line 1509 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ // Nonempty unsized arr
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    const ArrayType *ATy = dyn_cast<ArrayType>(yyvsp[-3].TypeVal->get());
    if (ATy == 0)
      GEN_ERROR("Cannot make array constant with type: '" + 
                     (*yyvsp[-3].TypeVal)->getDescription() + "'");
    const Type *ETy = ATy->getElementType();
    int NumElements = ATy->getNumElements();

    // Verify that we have the correct size...
    if (NumElements != -1 && NumElements != (int)yyvsp[-1].ConstVector->size())
      GEN_ERROR("Type mismatch: constant sized array initialized with " +
                     utostr(yyvsp[-1].ConstVector->size()) +  " arguments, but has size of " + 
                     itostr(NumElements) + "");

    // Verify all elements are correct type!
    for (unsigned i = 0; i < yyvsp[-1].ConstVector->size(); i++) {
      if (ETy != (*yyvsp[-1].ConstVector)[i]->getType())
        GEN_ERROR("Element #" + utostr(i) + " is not of type '" + 
                       ETy->getDescription() +"' as required!\nIt is of type '"+
                       (*yyvsp[-1].ConstVector)[i]->getType()->getDescription() + "'.");
    }

    yyval.ConstVal = ConstantArray::get(ATy, *yyvsp[-1].ConstVector);
    delete yyvsp[-3].TypeVal; delete yyvsp[-1].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 149:
#line 1537 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    const ArrayType *ATy = dyn_cast<ArrayType>(yyvsp[-2].TypeVal->get());
    if (ATy == 0)
      GEN_ERROR("Cannot make array constant with type: '" + 
                     (*yyvsp[-2].TypeVal)->getDescription() + "'");

    int NumElements = ATy->getNumElements();
    if (NumElements != -1 && NumElements != 0) 
      GEN_ERROR("Type mismatch: constant sized array initialized with 0"
                     " arguments, but has size of " + itostr(NumElements) +"");
    yyval.ConstVal = ConstantArray::get(ATy, std::vector<Constant*>());
    delete yyvsp[-2].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 150:
#line 1553 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    const ArrayType *ATy = dyn_cast<ArrayType>(yyvsp[-2].TypeVal->get());
    if (ATy == 0)
      GEN_ERROR("Cannot make array constant with type: '" + 
                     (*yyvsp[-2].TypeVal)->getDescription() + "'");

    int NumElements = ATy->getNumElements();
    const Type *ETy = ATy->getElementType();
    char *EndStr = UnEscapeLexed(yyvsp[0].StrVal, true);
    if (NumElements != -1 && NumElements != (EndStr-yyvsp[0].StrVal))
      GEN_ERROR("Can't build string constant of size " + 
                     itostr((int)(EndStr-yyvsp[0].StrVal)) +
                     " when array has size " + itostr(NumElements) + "");
    std::vector<Constant*> Vals;
    if (ETy == Type::Int8Ty) {
      for (unsigned char *C = (unsigned char *)yyvsp[0].StrVal; 
        C != (unsigned char*)EndStr; ++C)
      Vals.push_back(ConstantInt::get(ETy, *C));
    } else {
      free(yyvsp[0].StrVal);
      GEN_ERROR("Cannot build string arrays of non byte sized elements");
    }
    free(yyvsp[0].StrVal);
    yyval.ConstVal = ConstantArray::get(ATy, Vals);
    delete yyvsp[-2].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 151:
#line 1582 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ // Nonempty unsized arr
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    const VectorType *PTy = dyn_cast<VectorType>(yyvsp[-3].TypeVal->get());
    if (PTy == 0)
      GEN_ERROR("Cannot make packed constant with type: '" + 
                     (*yyvsp[-3].TypeVal)->getDescription() + "'");
    const Type *ETy = PTy->getElementType();
    int NumElements = PTy->getNumElements();

    // Verify that we have the correct size...
    if (NumElements != -1 && NumElements != (int)yyvsp[-1].ConstVector->size())
      GEN_ERROR("Type mismatch: constant sized packed initialized with " +
                     utostr(yyvsp[-1].ConstVector->size()) +  " arguments, but has size of " + 
                     itostr(NumElements) + "");

    // Verify all elements are correct type!
    for (unsigned i = 0; i < yyvsp[-1].ConstVector->size(); i++) {
      if (ETy != (*yyvsp[-1].ConstVector)[i]->getType())
        GEN_ERROR("Element #" + utostr(i) + " is not of type '" + 
           ETy->getDescription() +"' as required!\nIt is of type '"+
           (*yyvsp[-1].ConstVector)[i]->getType()->getDescription() + "'.");
    }

    yyval.ConstVal = ConstantVector::get(PTy, *yyvsp[-1].ConstVector);
    delete yyvsp[-3].TypeVal; delete yyvsp[-1].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 152:
#line 1610 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    const StructType *STy = dyn_cast<StructType>(yyvsp[-3].TypeVal->get());
    if (STy == 0)
      GEN_ERROR("Cannot make struct constant with type: '" + 
                     (*yyvsp[-3].TypeVal)->getDescription() + "'");

    if (yyvsp[-1].ConstVector->size() != STy->getNumContainedTypes())
      GEN_ERROR("Illegal number of initializers for structure type");

    // Check to ensure that constants are compatible with the type initializer!
    for (unsigned i = 0, e = yyvsp[-1].ConstVector->size(); i != e; ++i)
      if ((*yyvsp[-1].ConstVector)[i]->getType() != STy->getElementType(i))
        GEN_ERROR("Expected type '" +
                       STy->getElementType(i)->getDescription() +
                       "' for element #" + utostr(i) +
                       " of structure initializer");

    // Check to ensure that Type is not packed
    if (STy->isPacked())
      GEN_ERROR("Unpacked Initializer to vector type '" +
                STy->getDescription() + "'");

    yyval.ConstVal = ConstantStruct::get(STy, *yyvsp[-1].ConstVector);
    delete yyvsp[-3].TypeVal; delete yyvsp[-1].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 153:
#line 1636 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    const StructType *STy = dyn_cast<StructType>(yyvsp[-2].TypeVal->get());
    if (STy == 0)
      GEN_ERROR("Cannot make struct constant with type: '" + 
                     (*yyvsp[-2].TypeVal)->getDescription() + "'");

    if (STy->getNumContainedTypes() != 0)
      GEN_ERROR("Illegal number of initializers for structure type");

    // Check to ensure that Type is not packed
    if (STy->isPacked())
      GEN_ERROR("Unpacked Initializer to vector type '" +
                STy->getDescription() + "'");

    yyval.ConstVal = ConstantStruct::get(STy, std::vector<Constant*>());
    delete yyvsp[-2].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 154:
#line 1656 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    const StructType *STy = dyn_cast<StructType>(yyvsp[-5].TypeVal->get());
    if (STy == 0)
      GEN_ERROR("Cannot make struct constant with type: '" + 
                     (*yyvsp[-5].TypeVal)->getDescription() + "'");

    if (yyvsp[-2].ConstVector->size() != STy->getNumContainedTypes())
      GEN_ERROR("Illegal number of initializers for structure type");

    // Check to ensure that constants are compatible with the type initializer!
    for (unsigned i = 0, e = yyvsp[-2].ConstVector->size(); i != e; ++i)
      if ((*yyvsp[-2].ConstVector)[i]->getType() != STy->getElementType(i))
        GEN_ERROR("Expected type '" +
                       STy->getElementType(i)->getDescription() +
                       "' for element #" + utostr(i) +
                       " of structure initializer");

    // Check to ensure that Type is packed
    if (!STy->isPacked())
      GEN_ERROR("Vector initializer to non-vector type '" + 
                STy->getDescription() + "'");

    yyval.ConstVal = ConstantStruct::get(STy, *yyvsp[-2].ConstVector);
    delete yyvsp[-5].TypeVal; delete yyvsp[-2].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 155:
#line 1682 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-4].TypeVal)->getDescription());
    const StructType *STy = dyn_cast<StructType>(yyvsp[-4].TypeVal->get());
    if (STy == 0)
      GEN_ERROR("Cannot make struct constant with type: '" + 
                     (*yyvsp[-4].TypeVal)->getDescription() + "'");

    if (STy->getNumContainedTypes() != 0)
      GEN_ERROR("Illegal number of initializers for structure type");

    // Check to ensure that Type is packed
    if (!STy->isPacked())
      GEN_ERROR("Vector initializer to non-vector type '" + 
                STy->getDescription() + "'");

    yyval.ConstVal = ConstantStruct::get(STy, std::vector<Constant*>());
    delete yyvsp[-4].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 156:
#line 1702 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    const PointerType *PTy = dyn_cast<PointerType>(yyvsp[-1].TypeVal->get());
    if (PTy == 0)
      GEN_ERROR("Cannot make null pointer constant with type: '" + 
                     (*yyvsp[-1].TypeVal)->getDescription() + "'");

    yyval.ConstVal = ConstantPointerNull::get(PTy);
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 157:
#line 1714 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    yyval.ConstVal = UndefValue::get(yyvsp[-1].TypeVal->get());
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 158:
#line 1721 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    const PointerType *Ty = dyn_cast<PointerType>(yyvsp[-1].TypeVal->get());
    if (Ty == 0)
      GEN_ERROR("Global const reference must be a pointer type");

    // ConstExprs can exist in the body of a function, thus creating
    // GlobalValues whenever they refer to a variable.  Because we are in
    // the context of a function, getExistingVal will search the functions
    // symbol table instead of the module symbol table for the global symbol,
    // which throws things all off.  To get around this, we just tell
    // getExistingVal that we are at global scope here.
    //
    Function *SavedCurFn = CurFun.CurrentFunction;
    CurFun.CurrentFunction = 0;

    Value *V = getExistingVal(Ty, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR

    CurFun.CurrentFunction = SavedCurFn;

    // If this is an initializer for a constant pointer, which is referencing a
    // (currently) undefined variable, create a stub now that shall be replaced
    // in the future with the right type of variable.
    //
    if (V == 0) {
      assert(isa<PointerType>(Ty) && "Globals may only be used as pointers!");
      const PointerType *PT = cast<PointerType>(Ty);

      // First check to see if the forward references value is already created!
      PerModuleInfo::GlobalRefsType::iterator I =
        CurModule.GlobalRefs.find(std::make_pair(PT, yyvsp[0].ValIDVal));
    
      if (I != CurModule.GlobalRefs.end()) {
        V = I->second;             // Placeholder already exists, use it...
        yyvsp[0].ValIDVal.destroy();
      } else {
        std::string Name;
        if (yyvsp[0].ValIDVal.Type == ValID::GlobalName)
          Name = yyvsp[0].ValIDVal.Name;
        else if (yyvsp[0].ValIDVal.Type != ValID::GlobalID)
          GEN_ERROR("Invalid reference to global");

        // Create the forward referenced global.
        GlobalValue *GV;
        if (const FunctionType *FTy = 
                 dyn_cast<FunctionType>(PT->getElementType())) {
          GV = new Function(FTy, GlobalValue::ExternalWeakLinkage, Name,
                            CurModule.CurrentModule);
        } else {
          GV = new GlobalVariable(PT->getElementType(), false,
                                  GlobalValue::ExternalWeakLinkage, 0,
                                  Name, CurModule.CurrentModule);
        }

        // Keep track of the fact that we have a forward ref to recycle it
        CurModule.GlobalRefs.insert(std::make_pair(std::make_pair(PT, yyvsp[0].ValIDVal), GV));
        V = GV;
      }
    }

    yyval.ConstVal = cast<GlobalValue>(V);
    delete yyvsp[-1].TypeVal;            // Free the type handle
    CHECK_FOR_ERROR
  ;
    break;}
case 159:
#line 1787 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    if (yyvsp[-1].TypeVal->get() != yyvsp[0].ConstVal->getType())
      GEN_ERROR("Mismatched types for constant expression: " + 
        (*yyvsp[-1].TypeVal)->getDescription() + " and " + yyvsp[0].ConstVal->getType()->getDescription());
    yyval.ConstVal = yyvsp[0].ConstVal;
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 160:
#line 1797 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    const Type *Ty = yyvsp[-1].TypeVal->get();
    if (isa<FunctionType>(Ty) || Ty == Type::LabelTy || isa<OpaqueType>(Ty))
      GEN_ERROR("Cannot create a null initialized value of this type");
    yyval.ConstVal = Constant::getNullValue(Ty);
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 161:
#line 1807 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{      // integral constants
    if (!ConstantInt::isValueValidForType(yyvsp[-1].PrimType, yyvsp[0].SInt64Val))
      GEN_ERROR("Constant value doesn't fit in type");
    yyval.ConstVal = ConstantInt::get(yyvsp[-1].PrimType, yyvsp[0].SInt64Val, true);
    CHECK_FOR_ERROR
  ;
    break;}
case 162:
#line 1813 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{      // arbitrary precision integer constants
    uint32_t BitWidth = cast<IntegerType>(yyvsp[-1].PrimType)->getBitWidth();
    if (yyvsp[0].APIntVal->getBitWidth() > BitWidth) {
      GEN_ERROR("Constant value does not fit in type");
    }
    yyvsp[0].APIntVal->sextOrTrunc(BitWidth);
    yyval.ConstVal = ConstantInt::get(*yyvsp[0].APIntVal);
    delete yyvsp[0].APIntVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 163:
#line 1823 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{      // integral constants
    if (!ConstantInt::isValueValidForType(yyvsp[-1].PrimType, yyvsp[0].UInt64Val))
      GEN_ERROR("Constant value doesn't fit in type");
    yyval.ConstVal = ConstantInt::get(yyvsp[-1].PrimType, yyvsp[0].UInt64Val, false);
    CHECK_FOR_ERROR
  ;
    break;}
case 164:
#line 1829 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{      // arbitrary precision integer constants
    uint32_t BitWidth = cast<IntegerType>(yyvsp[-1].PrimType)->getBitWidth();
    if (yyvsp[0].APIntVal->getBitWidth() > BitWidth) {
      GEN_ERROR("Constant value does not fit in type");
    } 
    yyvsp[0].APIntVal->zextOrTrunc(BitWidth);
    yyval.ConstVal = ConstantInt::get(*yyvsp[0].APIntVal);
    delete yyvsp[0].APIntVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 165:
#line 1839 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                      // Boolean constants
    assert(cast<IntegerType>(yyvsp[-1].PrimType)->getBitWidth() == 1 && "Not Bool?");
    yyval.ConstVal = ConstantInt::getTrue();
    CHECK_FOR_ERROR
  ;
    break;}
case 166:
#line 1844 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                     // Boolean constants
    assert(cast<IntegerType>(yyvsp[-1].PrimType)->getBitWidth() == 1 && "Not Bool?");
    yyval.ConstVal = ConstantInt::getFalse();
    CHECK_FOR_ERROR
  ;
    break;}
case 167:
#line 1849 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                   // Float & Double constants
    if (!ConstantFP::isValueValidForType(yyvsp[-1].PrimType, yyvsp[0].FPVal))
      GEN_ERROR("Floating point constant invalid for type");
    yyval.ConstVal = ConstantFP::get(yyvsp[-1].PrimType, yyvsp[0].FPVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 168:
#line 1857 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    Constant *Val = yyvsp[-3].ConstVal;
    const Type *DestTy = yyvsp[-1].TypeVal->get();
    if (!CastInst::castIsValid(yyvsp[-5].CastOpVal, yyvsp[-3].ConstVal, DestTy))
      GEN_ERROR("invalid cast opcode for cast from '" +
                Val->getType()->getDescription() + "' to '" +
                DestTy->getDescription() + "'"); 
    yyval.ConstVal = ConstantExpr::getCast(yyvsp[-5].CastOpVal, yyvsp[-3].ConstVal, DestTy);
    delete yyvsp[-1].TypeVal;
  ;
    break;}
case 169:
#line 1869 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!isa<PointerType>(yyvsp[-2].ConstVal->getType()))
      GEN_ERROR("GetElementPtr requires a pointer operand");

    const Type *IdxTy =
      GetElementPtrInst::getIndexedType(yyvsp[-2].ConstVal->getType(), &(*yyvsp[-1].ValueList)[0], yyvsp[-1].ValueList->size(),
                                        true);
    if (!IdxTy)
      GEN_ERROR("Index list invalid for constant getelementptr");

    SmallVector<Constant*, 8> IdxVec;
    for (unsigned i = 0, e = yyvsp[-1].ValueList->size(); i != e; ++i)
      if (Constant *C = dyn_cast<Constant>((*yyvsp[-1].ValueList)[i]))
        IdxVec.push_back(C);
      else
        GEN_ERROR("Indices to constant getelementptr must be constants");

    delete yyvsp[-1].ValueList;

    yyval.ConstVal = ConstantExpr::getGetElementPtr(yyvsp[-2].ConstVal, &IdxVec[0], IdxVec.size());
    CHECK_FOR_ERROR
  ;
    break;}
case 170:
#line 1891 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-5].ConstVal->getType() != Type::Int1Ty)
      GEN_ERROR("Select condition must be of boolean type");
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("Select operand types must match");
    yyval.ConstVal = ConstantExpr::getSelect(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 171:
#line 1899 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("Binary operator types must match");
    CHECK_FOR_ERROR;
    yyval.ConstVal = ConstantExpr::get(yyvsp[-5].BinaryOpVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
  ;
    break;}
case 172:
#line 1905 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("Logical operator types must match");
    if (!yyvsp[-3].ConstVal->getType()->isInteger()) {
      if (Instruction::isShift(yyvsp[-5].BinaryOpVal) || !isa<VectorType>(yyvsp[-3].ConstVal->getType()) || 
          !cast<VectorType>(yyvsp[-3].ConstVal->getType())->getElementType()->isInteger())
        GEN_ERROR("Logical operator requires integral operands");
    }
    yyval.ConstVal = ConstantExpr::get(yyvsp[-5].BinaryOpVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 173:
#line 1916 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("icmp operand types must match");
    yyval.ConstVal = ConstantExpr::getICmp(yyvsp[-5].IPredicate, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
  ;
    break;}
case 174:
#line 1921 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("fcmp operand types must match");
    yyval.ConstVal = ConstantExpr::getFCmp(yyvsp[-5].FPredicate, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
  ;
    break;}
case 175:
#line 1926 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!ExtractElementInst::isValidOperands(yyvsp[-3].ConstVal, yyvsp[-1].ConstVal))
      GEN_ERROR("Invalid extractelement operands");
    yyval.ConstVal = ConstantExpr::getExtractElement(yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 176:
#line 1932 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!InsertElementInst::isValidOperands(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal))
      GEN_ERROR("Invalid insertelement operands");
    yyval.ConstVal = ConstantExpr::getInsertElement(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 177:
#line 1938 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!ShuffleVectorInst::isValidOperands(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal))
      GEN_ERROR("Invalid shufflevector operands");
    yyval.ConstVal = ConstantExpr::getShuffleVector(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 178:
#line 1947 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    (yyval.ConstVector = yyvsp[-2].ConstVector)->push_back(yyvsp[0].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 179:
#line 1951 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ConstVector = new std::vector<Constant*>();
    yyval.ConstVector->push_back(yyvsp[0].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 180:
#line 1959 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.BoolVal = false; ;
    break;}
case 181:
#line 1959 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.BoolVal = true; ;
    break;}
case 182:
#line 1962 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.BoolVal = true; ;
    break;}
case 183:
#line 1962 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.BoolVal = false; ;
    break;}
case 184:
#line 1965 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    const Type* VTy = yyvsp[-1].TypeVal->get();
    Value *V = getVal(VTy, yyvsp[0].ValIDVal);
    GlobalValue* Aliasee = dyn_cast<GlobalValue>(V);
    if (!Aliasee)
      GEN_ERROR("Aliases can be created only to global values");

    yyval.ConstVal = Aliasee;
    CHECK_FOR_ERROR
    delete yyvsp[-1].TypeVal;
   ;
    break;}
case 185:
#line 1976 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    Constant *Val = yyvsp[-3].ConstVal;
    const Type *DestTy = yyvsp[-1].TypeVal->get();
    if (!CastInst::castIsValid(yyvsp[-5].CastOpVal, yyvsp[-3].ConstVal, DestTy))
      GEN_ERROR("invalid cast opcode for cast from '" +
                Val->getType()->getDescription() + "' to '" +
                DestTy->getDescription() + "'");
    
    yyval.ConstVal = ConstantExpr::getCast(yyvsp[-5].CastOpVal, yyvsp[-3].ConstVal, DestTy);
    CHECK_FOR_ERROR
    delete yyvsp[-1].TypeVal;
   ;
    break;}
case 186:
#line 1997 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ModuleVal = ParserResult = CurModule.CurrentModule;
    CurModule.ModuleDone();
    CHECK_FOR_ERROR;
  ;
    break;}
case 187:
#line 2002 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ModuleVal = ParserResult = CurModule.CurrentModule;
    CurModule.ModuleDone();
    CHECK_FOR_ERROR;
  ;
    break;}
case 190:
#line 2015 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ CurFun.isDeclare = false; ;
    break;}
case 191:
#line 2015 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurFun.FunctionDone();
    CHECK_FOR_ERROR
  ;
    break;}
case 192:
#line 2019 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ CurFun.isDeclare = true; ;
    break;}
case 193:
#line 2019 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CHECK_FOR_ERROR
  ;
    break;}
case 194:
#line 2022 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CHECK_FOR_ERROR
  ;
    break;}
case 195:
#line 2025 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    // Eagerly resolve types.  This is not an optimization, this is a
    // requirement that is due to the fact that we could have this:
    //
    // %list = type { %list * }
    // %list = type { %list * }    ; repeated type decl
    //
    // If types are not resolved eagerly, then the two types will not be
    // determined to be the same type!
    //
    ResolveTypeTo(yyvsp[-2].StrVal, *yyvsp[0].TypeVal);

    if (!setTypeName(*yyvsp[0].TypeVal, yyvsp[-2].StrVal) && !yyvsp[-2].StrVal) {
      CHECK_FOR_ERROR
      // If this is a named type that is not a redefinition, add it to the slot
      // table.
      CurModule.Types.push_back(*yyvsp[0].TypeVal);
    }

    delete yyvsp[0].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 196:
#line 2049 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    ResolveTypeTo(yyvsp[-2].StrVal, yyvsp[0].PrimType);

    if (!setTypeName(yyvsp[0].PrimType, yyvsp[-2].StrVal) && !yyvsp[-2].StrVal) {
      CHECK_FOR_ERROR
      // If this is a named type that is not a redefinition, add it to the slot
      // table.
      CurModule.Types.push_back(yyvsp[0].PrimType);
    }
    CHECK_FOR_ERROR
  ;
    break;}
case 197:
#line 2060 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ 
    /* "Externally Visible" Linkage */
    if (yyvsp[0].ConstVal == 0) 
      GEN_ERROR("Global value initializer is not a constant");
    CurGV = ParseGlobalVariable(yyvsp[-4].StrVal, GlobalValue::ExternalLinkage,
                                yyvsp[-3].Visibility, yyvsp[-1].BoolVal, yyvsp[0].ConstVal->getType(), yyvsp[0].ConstVal, yyvsp[-2].BoolVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 198:
#line 2067 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurGV = 0;
  ;
    break;}
case 199:
#line 2071 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[0].ConstVal == 0) 
      GEN_ERROR("Global value initializer is not a constant");
    CurGV = ParseGlobalVariable(yyvsp[-5].StrVal, yyvsp[-4].Linkage, yyvsp[-3].Visibility, yyvsp[-1].BoolVal, yyvsp[0].ConstVal->getType(), yyvsp[0].ConstVal, yyvsp[-2].BoolVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 200:
#line 2076 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurGV = 0;
  ;
    break;}
case 201:
#line 2080 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    CurGV = ParseGlobalVariable(yyvsp[-5].StrVal, yyvsp[-4].Linkage, yyvsp[-3].Visibility, yyvsp[-1].BoolVal, *yyvsp[0].TypeVal, 0, yyvsp[-2].BoolVal);
    CHECK_FOR_ERROR
    delete yyvsp[0].TypeVal;
  ;
    break;}
case 202:
#line 2086 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurGV = 0;
    CHECK_FOR_ERROR
  ;
    break;}
case 203:
#line 2090 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    std::string Name(yyvsp[-4].StrVal);
    if (Name.empty())
      GEN_ERROR("Alias name cannot be empty");
    
    Constant* Aliasee = yyvsp[0].ConstVal;
    if (Aliasee == 0)
      GEN_ERROR(std::string("Invalid aliasee for alias: ") + yyvsp[-4].StrVal);

    GlobalAlias* GA = new GlobalAlias(Aliasee->getType(), yyvsp[-1].Linkage, Name, Aliasee,
                                      CurModule.CurrentModule);
    GA->setVisibility(yyvsp[-3].Visibility);
    InsertValue(GA, CurModule.Values);
    CHECK_FOR_ERROR
  ;
    break;}
case 204:
#line 2105 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ 
    CHECK_FOR_ERROR
  ;
    break;}
case 205:
#line 2108 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CHECK_FOR_ERROR
  ;
    break;}
case 206:
#line 2114 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  const std::string &AsmSoFar = CurModule.CurrentModule->getModuleInlineAsm();
  char *EndStr = UnEscapeLexed(yyvsp[0].StrVal, true);
  std::string NewAsm(yyvsp[0].StrVal, EndStr);
  free(yyvsp[0].StrVal);

  if (AsmSoFar.empty())
    CurModule.CurrentModule->setModuleInlineAsm(NewAsm);
  else
    CurModule.CurrentModule->setModuleInlineAsm(AsmSoFar+"\n"+NewAsm);
  CHECK_FOR_ERROR
;
    break;}
case 207:
#line 2127 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurModule.CurrentModule->setTargetTriple(yyvsp[0].StrVal);
    free(yyvsp[0].StrVal);
  ;
    break;}
case 208:
#line 2131 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurModule.CurrentModule->setDataLayout(yyvsp[0].StrVal);
    free(yyvsp[0].StrVal);
  ;
    break;}
case 210:
#line 2138 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
          CurModule.CurrentModule->addLibrary(yyvsp[0].StrVal);
          free(yyvsp[0].StrVal);
          CHECK_FOR_ERROR
        ;
    break;}
case 211:
#line 2143 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
          CurModule.CurrentModule->addLibrary(yyvsp[0].StrVal);
          free(yyvsp[0].StrVal);
          CHECK_FOR_ERROR
        ;
    break;}
case 212:
#line 2148 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
          CHECK_FOR_ERROR
        ;
    break;}
case 213:
#line 2157 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    if (*yyvsp[-2].TypeVal == Type::VoidTy)
      GEN_ERROR("void typed arguments are invalid");
    ArgListEntry E; E.Attrs = yyvsp[-1].ParamAttrs; E.Ty = yyvsp[-2].TypeVal; E.Name = yyvsp[0].StrVal;
    yyval.ArgList = yyvsp[-4].ArgList;
    yyvsp[-4].ArgList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 214:
#line 2167 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    if (*yyvsp[-2].TypeVal == Type::VoidTy)
      GEN_ERROR("void typed arguments are invalid");
    ArgListEntry E; E.Attrs = yyvsp[-1].ParamAttrs; E.Ty = yyvsp[-2].TypeVal; E.Name = yyvsp[0].StrVal;
    yyval.ArgList = new ArgListType;
    yyval.ArgList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 215:
#line 2178 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ArgList = yyvsp[0].ArgList;
    CHECK_FOR_ERROR
  ;
    break;}
case 216:
#line 2182 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ArgList = yyvsp[-2].ArgList;
    struct ArgListEntry E;
    E.Ty = new PATypeHolder(Type::VoidTy);
    E.Name = 0;
    E.Attrs = ParamAttr::None;
    yyval.ArgList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 217:
#line 2191 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ArgList = new ArgListType;
    struct ArgListEntry E;
    E.Ty = new PATypeHolder(Type::VoidTy);
    E.Name = 0;
    E.Attrs = ParamAttr::None;
    yyval.ArgList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 218:
#line 2200 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ArgList = 0;
    CHECK_FOR_ERROR
  ;
    break;}
case 219:
#line 2206 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  UnEscapeLexed(yyvsp[-6].StrVal);
  std::string FunctionName(yyvsp[-6].StrVal);
  free(yyvsp[-6].StrVal);  // Free strdup'd memory!
  
  // Check the function result for abstractness if this is a define. We should
  // have no abstract types at this point
  if (!CurFun.isDeclare && CurModule.TypeIsUnresolved(yyvsp[-7].TypeVal))
    GEN_ERROR("Reference to abstract result: "+ yyvsp[-7].TypeVal->get()->getDescription());

  std::vector<const Type*> ParamTypeList;
  ParamAttrsVector Attrs;
  if (yyvsp[-2].ParamAttrs != ParamAttr::None) {
    ParamAttrsWithIndex PAWI; PAWI.index = 0; PAWI.attrs = yyvsp[-2].ParamAttrs;
    Attrs.push_back(PAWI);
  }
  if (yyvsp[-4].ArgList) {   // If there are arguments...
    unsigned index = 1;
    for (ArgListType::iterator I = yyvsp[-4].ArgList->begin(); I != yyvsp[-4].ArgList->end(); ++I, ++index) {
      const Type* Ty = I->Ty->get();
      if (!CurFun.isDeclare && CurModule.TypeIsUnresolved(I->Ty))
        GEN_ERROR("Reference to abstract argument: " + Ty->getDescription());
      ParamTypeList.push_back(Ty);
      if (Ty != Type::VoidTy)
        if (I->Attrs != ParamAttr::None) {
          ParamAttrsWithIndex PAWI; PAWI.index = index; PAWI.attrs = I->Attrs;
          Attrs.push_back(PAWI);
        }
    }
  }

  bool isVarArg = ParamTypeList.size() && ParamTypeList.back() == Type::VoidTy;
  if (isVarArg) ParamTypeList.pop_back();

  ParamAttrsList *PAL = 0;
  if (!Attrs.empty())
    PAL = ParamAttrsList::get(Attrs);

  FunctionType *FT = FunctionType::get(*yyvsp[-7].TypeVal, ParamTypeList, isVarArg, PAL);
  const PointerType *PFT = PointerType::get(FT);
  delete yyvsp[-7].TypeVal;

  ValID ID;
  if (!FunctionName.empty()) {
    ID = ValID::createGlobalName((char*)FunctionName.c_str());
  } else {
    ID = ValID::createGlobalID(CurModule.Values.size());
  }

  Function *Fn = 0;
  // See if this function was forward referenced.  If so, recycle the object.
  if (GlobalValue *FWRef = CurModule.GetForwardRefForGlobal(PFT, ID)) {
    // Move the function to the end of the list, from whereever it was 
    // previously inserted.
    Fn = cast<Function>(FWRef);
    CurModule.CurrentModule->getFunctionList().remove(Fn);
    CurModule.CurrentModule->getFunctionList().push_back(Fn);
  } else if (!FunctionName.empty() &&     // Merge with an earlier prototype?
             (Fn = CurModule.CurrentModule->getFunction(FunctionName))) {
    if (Fn->getFunctionType() != FT) {
      // The existing function doesn't have the same type. This is an overload
      // error.
      GEN_ERROR("Overload of function '" + FunctionName + "' not permitted.");
    } else if (!CurFun.isDeclare && !Fn->isDeclaration()) {
      // Neither the existing or the current function is a declaration and they
      // have the same name and same type. Clearly this is a redefinition.
      GEN_ERROR("Redefinition of function '" + FunctionName + "'");
    } if (Fn->isDeclaration()) {
      // Make sure to strip off any argument names so we can't get conflicts.
      for (Function::arg_iterator AI = Fn->arg_begin(), AE = Fn->arg_end();
           AI != AE; ++AI)
        AI->setName("");
    }
  } else  {  // Not already defined?
    Fn = new Function(FT, GlobalValue::ExternalWeakLinkage, FunctionName,
                      CurModule.CurrentModule);

    InsertValue(Fn, CurModule.Values);
  }

  CurFun.FunctionStart(Fn);

  if (CurFun.isDeclare) {
    // If we have declaration, always overwrite linkage.  This will allow us to
    // correctly handle cases, when pointer to function is passed as argument to
    // another function.
    Fn->setLinkage(CurFun.Linkage);
    Fn->setVisibility(CurFun.Visibility);
  }
  Fn->setCallingConv(yyvsp[-8].UIntVal);
  Fn->setAlignment(yyvsp[0].UIntVal);
  if (yyvsp[-1].StrVal) {
    Fn->setSection(yyvsp[-1].StrVal);
    free(yyvsp[-1].StrVal);
  }

  // Add all of the arguments we parsed to the function...
  if (yyvsp[-4].ArgList) {                     // Is null if empty...
    if (isVarArg) {  // Nuke the last entry
      assert(yyvsp[-4].ArgList->back().Ty->get() == Type::VoidTy && yyvsp[-4].ArgList->back().Name == 0 &&
             "Not a varargs marker!");
      delete yyvsp[-4].ArgList->back().Ty;
      yyvsp[-4].ArgList->pop_back();  // Delete the last entry
    }
    Function::arg_iterator ArgIt = Fn->arg_begin();
    Function::arg_iterator ArgEnd = Fn->arg_end();
    unsigned Idx = 1;
    for (ArgListType::iterator I = yyvsp[-4].ArgList->begin(); 
         I != yyvsp[-4].ArgList->end() && ArgIt != ArgEnd; ++I, ++ArgIt) {
      delete I->Ty;                          // Delete the typeholder...
      setValueName(ArgIt, I->Name);          // Insert arg into symtab...
      CHECK_FOR_ERROR
      InsertValue(ArgIt);
      Idx++;
    }

    delete yyvsp[-4].ArgList;                     // We're now done with the argument list
  }
  CHECK_FOR_ERROR
;
    break;}
case 222:
#line 2329 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  yyval.FunctionVal = CurFun.CurrentFunction;

  // Make sure that we keep track of the linkage type even if there was a
  // previous "declare".
  yyval.FunctionVal->setLinkage(yyvsp[-3].Linkage);
  yyval.FunctionVal->setVisibility(yyvsp[-2].Visibility);
;
    break;}
case 225:
#line 2340 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  yyval.FunctionVal = yyvsp[-1].FunctionVal;
  CHECK_FOR_ERROR
;
    break;}
case 226:
#line 2345 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurFun.CurrentFunction->setLinkage(yyvsp[-2].Linkage);
    CurFun.CurrentFunction->setVisibility(yyvsp[-1].Visibility);
    yyval.FunctionVal = CurFun.CurrentFunction;
    CurFun.FunctionDone();
    CHECK_FOR_ERROR
  ;
    break;}
case 227:
#line 2357 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = false;
    CHECK_FOR_ERROR
  ;
    break;}
case 228:
#line 2361 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = true;
    CHECK_FOR_ERROR
  ;
    break;}
case 229:
#line 2366 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{    // A reference to a direct constant
    yyval.ValIDVal = ValID::create(yyvsp[0].SInt64Val);
    CHECK_FOR_ERROR
  ;
    break;}
case 230:
#line 2370 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::create(yyvsp[0].UInt64Val);
    CHECK_FOR_ERROR
  ;
    break;}
case 231:
#line 2374 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                     // Perhaps it's an FP constant?
    yyval.ValIDVal = ValID::create(yyvsp[0].FPVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 232:
#line 2378 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::create(ConstantInt::getTrue());
    CHECK_FOR_ERROR
  ;
    break;}
case 233:
#line 2382 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::create(ConstantInt::getFalse());
    CHECK_FOR_ERROR
  ;
    break;}
case 234:
#line 2386 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::createNull();
    CHECK_FOR_ERROR
  ;
    break;}
case 235:
#line 2390 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::createUndef();
    CHECK_FOR_ERROR
  ;
    break;}
case 236:
#line 2394 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{     // A vector zero constant.
    yyval.ValIDVal = ValID::createZeroInit();
    CHECK_FOR_ERROR
  ;
    break;}
case 237:
#line 2398 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ // Nonempty unsized packed vector
    const Type *ETy = (*yyvsp[-1].ConstVector)[0]->getType();
    int NumElements = yyvsp[-1].ConstVector->size(); 
    
    VectorType* pt = VectorType::get(ETy, NumElements);
    PATypeHolder* PTy = new PATypeHolder(
                                         HandleUpRefs(
                                            VectorType::get(
                                                ETy, 
                                                NumElements)
                                            )
                                         );
    
    // Verify all elements are correct type!
    for (unsigned i = 0; i < yyvsp[-1].ConstVector->size(); i++) {
      if (ETy != (*yyvsp[-1].ConstVector)[i]->getType())
        GEN_ERROR("Element #" + utostr(i) + " is not of type '" + 
                     ETy->getDescription() +"' as required!\nIt is of type '" +
                     (*yyvsp[-1].ConstVector)[i]->getType()->getDescription() + "'.");
    }

    yyval.ValIDVal = ValID::create(ConstantVector::get(pt, *yyvsp[-1].ConstVector));
    delete PTy; delete yyvsp[-1].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 238:
#line 2423 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::create(yyvsp[0].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 239:
#line 2427 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    char *End = UnEscapeLexed(yyvsp[-2].StrVal, true);
    std::string AsmStr = std::string(yyvsp[-2].StrVal, End);
    End = UnEscapeLexed(yyvsp[0].StrVal, true);
    std::string Constraints = std::string(yyvsp[0].StrVal, End);
    yyval.ValIDVal = ValID::createInlineAsm(AsmStr, Constraints, yyvsp[-3].BoolVal);
    free(yyvsp[-2].StrVal);
    free(yyvsp[0].StrVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 240:
#line 2441 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{  // Is it an integer reference...?
    yyval.ValIDVal = ValID::createLocalID(yyvsp[0].UIntVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 241:
#line 2445 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::createGlobalID(yyvsp[0].UIntVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 242:
#line 2449 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                   // Is it a named reference...?
    yyval.ValIDVal = ValID::createLocalName(yyvsp[0].StrVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 243:
#line 2453 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                   // Is it a named reference...?
    yyval.ValIDVal = ValID::createGlobalName(yyvsp[0].StrVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 246:
#line 2465 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    yyval.ValueVal = getVal(*yyvsp[-1].TypeVal, yyvsp[0].ValIDVal); 
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 247:
#line 2474 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.FunctionVal = yyvsp[-1].FunctionVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 248:
#line 2478 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ // Do not allow functions with 0 basic blocks   
    yyval.FunctionVal = yyvsp[-1].FunctionVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 249:
#line 2487 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    setValueName(yyvsp[0].TermInstVal, yyvsp[-1].StrVal);
    CHECK_FOR_ERROR
    InsertValue(yyvsp[0].TermInstVal);
    yyvsp[-2].BasicBlockVal->getInstList().push_back(yyvsp[0].TermInstVal);
    yyval.BasicBlockVal = yyvsp[-2].BasicBlockVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 250:
#line 2496 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (CastInst *CI1 = dyn_cast<CastInst>(yyvsp[0].InstVal))
      if (CastInst *CI2 = dyn_cast<CastInst>(CI1->getOperand(0)))
        if (CI2->getParent() == 0)
          yyvsp[-1].BasicBlockVal->getInstList().push_back(CI2);
    yyvsp[-1].BasicBlockVal->getInstList().push_back(yyvsp[0].InstVal);
    yyval.BasicBlockVal = yyvsp[-1].BasicBlockVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 251:
#line 2505 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{          // Empty space between instruction lists
    yyval.BasicBlockVal = defineBBVal(ValID::createLocalID(CurFun.NextValNum));
    CHECK_FOR_ERROR
  ;
    break;}
case 252:
#line 2509 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{             // Labelled (named) basic block
    yyval.BasicBlockVal = defineBBVal(ValID::createLocalName(yyvsp[0].StrVal));
    CHECK_FOR_ERROR
  ;
    break;}
case 253:
#line 2514 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{              // Return with a result...
    yyval.TermInstVal = new ReturnInst(yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 254:
#line 2518 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                                    // Return with no result...
    yyval.TermInstVal = new ReturnInst();
    CHECK_FOR_ERROR
  ;
    break;}
case 255:
#line 2522 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                           // Unconditional Branch...
    BasicBlock* tmpBB = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.TermInstVal = new BranchInst(tmpBB);
  ;
    break;}
case 256:
#line 2527 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{  
    assert(cast<IntegerType>(yyvsp[-7].PrimType)->getBitWidth() == 1 && "Not Bool?");
    BasicBlock* tmpBBA = getBBVal(yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBBB = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    Value* tmpVal = getVal(Type::Int1Ty, yyvsp[-6].ValIDVal);
    CHECK_FOR_ERROR
    yyval.TermInstVal = new BranchInst(tmpBBA, tmpBBB, tmpVal);
  ;
    break;}
case 257:
#line 2537 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    Value* tmpVal = getVal(yyvsp[-7].PrimType, yyvsp[-6].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBB = getBBVal(yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    SwitchInst *S = new SwitchInst(tmpVal, tmpBB, yyvsp[-1].JumpTable->size());
    yyval.TermInstVal = S;

    std::vector<std::pair<Constant*,BasicBlock*> >::iterator I = yyvsp[-1].JumpTable->begin(),
      E = yyvsp[-1].JumpTable->end();
    for (; I != E; ++I) {
      if (ConstantInt *CI = dyn_cast<ConstantInt>(I->first))
          S->addCase(CI, I->second);
      else
        GEN_ERROR("Switch case is constant, but not a simple integer");
    }
    delete yyvsp[-1].JumpTable;
    CHECK_FOR_ERROR
  ;
    break;}
case 258:
#line 2556 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    Value* tmpVal = getVal(yyvsp[-6].PrimType, yyvsp[-5].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBB = getBBVal(yyvsp[-2].ValIDVal);
    CHECK_FOR_ERROR
    SwitchInst *S = new SwitchInst(tmpVal, tmpBB, 0);
    yyval.TermInstVal = S;
    CHECK_FOR_ERROR
  ;
    break;}
case 259:
#line 2566 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{

    // Handle the short syntax
    const PointerType *PFTy = 0;
    const FunctionType *Ty = 0;
    if (!(PFTy = dyn_cast<PointerType>(yyvsp[-11].TypeVal->get())) ||
        !(Ty = dyn_cast<FunctionType>(PFTy->getElementType()))) {
      // Pull out the types of all of the arguments...
      std::vector<const Type*> ParamTypes;
      ParamAttrsVector Attrs;
      if (yyvsp[-6].ParamAttrs != ParamAttr::None) {
        ParamAttrsWithIndex PAWI; PAWI.index = 0; PAWI.attrs = yyvsp[-6].ParamAttrs;
        Attrs.push_back(PAWI);
      }
      ValueRefList::iterator I = yyvsp[-8].ValueRefList->begin(), E = yyvsp[-8].ValueRefList->end();
      unsigned index = 1;
      for (; I != E; ++I, ++index) {
        const Type *Ty = I->Val->getType();
        if (Ty == Type::VoidTy)
          GEN_ERROR("Short call syntax cannot be used with varargs");
        ParamTypes.push_back(Ty);
        if (I->Attrs != ParamAttr::None) {
          ParamAttrsWithIndex PAWI; PAWI.index = index; PAWI.attrs = I->Attrs;
          Attrs.push_back(PAWI);
        }
      }

      ParamAttrsList *PAL = 0;
      if (!Attrs.empty())
        PAL = ParamAttrsList::get(Attrs);
      Ty = FunctionType::get(yyvsp[-11].TypeVal->get(), ParamTypes, false, PAL);
      PFTy = PointerType::get(Ty);
    }

    delete yyvsp[-11].TypeVal;

    Value *V = getVal(PFTy, yyvsp[-10].ValIDVal);   // Get the function we're calling...
    CHECK_FOR_ERROR
    BasicBlock *Normal = getBBVal(yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock *Except = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR

    // Check the arguments
    ValueList Args;
    if (yyvsp[-8].ValueRefList->empty()) {                                   // Has no arguments?
      // Make sure no arguments is a good thing!
      if (Ty->getNumParams() != 0)
        GEN_ERROR("No arguments passed to a function that "
                       "expects arguments");
    } else {                                     // Has arguments?
      // Loop through FunctionType's arguments and ensure they are specified
      // correctly!
      FunctionType::param_iterator I = Ty->param_begin();
      FunctionType::param_iterator E = Ty->param_end();
      ValueRefList::iterator ArgI = yyvsp[-8].ValueRefList->begin(), ArgE = yyvsp[-8].ValueRefList->end();

      for (; ArgI != ArgE && I != E; ++ArgI, ++I) {
        if (ArgI->Val->getType() != *I)
          GEN_ERROR("Parameter " + ArgI->Val->getName()+ " is not of type '" +
                         (*I)->getDescription() + "'");
        Args.push_back(ArgI->Val);
      }

      if (Ty->isVarArg()) {
        if (I == E)
          for (; ArgI != ArgE; ++ArgI)
            Args.push_back(ArgI->Val); // push the remaining varargs
      } else if (I != E || ArgI != ArgE)
        GEN_ERROR("Invalid number of parameters detected");
    }

    // Create the InvokeInst
    InvokeInst *II = new InvokeInst(V, Normal, Except, &Args[0], Args.size());
    II->setCallingConv(yyvsp[-12].UIntVal);
    yyval.TermInstVal = II;
    delete yyvsp[-8].ValueRefList;
    CHECK_FOR_ERROR
  ;
    break;}
case 260:
#line 2645 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TermInstVal = new UnwindInst();
    CHECK_FOR_ERROR
  ;
    break;}
case 261:
#line 2649 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TermInstVal = new UnreachableInst();
    CHECK_FOR_ERROR
  ;
    break;}
case 262:
#line 2656 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.JumpTable = yyvsp[-5].JumpTable;
    Constant *V = cast<Constant>(getExistingVal(yyvsp[-4].PrimType, yyvsp[-3].ValIDVal));
    CHECK_FOR_ERROR
    if (V == 0)
      GEN_ERROR("May only switch on a constant pool value");

    BasicBlock* tmpBB = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.JumpTable->push_back(std::make_pair(V, tmpBB));
  ;
    break;}
case 263:
#line 2667 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.JumpTable = new std::vector<std::pair<Constant*, BasicBlock*> >();
    Constant *V = cast<Constant>(getExistingVal(yyvsp[-4].PrimType, yyvsp[-3].ValIDVal));
    CHECK_FOR_ERROR

    if (V == 0)
      GEN_ERROR("May only switch on a constant pool value");

    BasicBlock* tmpBB = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.JumpTable->push_back(std::make_pair(V, tmpBB)); 
  ;
    break;}
case 264:
#line 2680 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    // Is this definition named?? if so, assign the name...
    setValueName(yyvsp[0].InstVal, yyvsp[-1].StrVal);
    CHECK_FOR_ERROR
    InsertValue(yyvsp[0].InstVal);
    yyval.InstVal = yyvsp[0].InstVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 265:
#line 2690 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{    // Used for PHI nodes
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-5].TypeVal)->getDescription());
    yyval.PHIList = new std::list<std::pair<Value*, BasicBlock*> >();
    Value* tmpVal = getVal(*yyvsp[-5].TypeVal, yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBB = getBBVal(yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.PHIList->push_back(std::make_pair(tmpVal, tmpBB));
    delete yyvsp[-5].TypeVal;
  ;
    break;}
case 266:
#line 2701 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.PHIList = yyvsp[-6].PHIList;
    Value* tmpVal = getVal(yyvsp[-6].PHIList->front().first->getType(), yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBB = getBBVal(yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyvsp[-6].PHIList->push_back(std::make_pair(tmpVal, tmpBB));
  ;
    break;}
case 267:
#line 2711 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{    
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    // Used for call and invoke instructions
    yyval.ValueRefList = new ValueRefList();
    ValueRefListEntry E; E.Attrs = yyvsp[0].ParamAttrs; E.Val = getVal(yyvsp[-2].TypeVal->get(), yyvsp[-1].ValIDVal);
    yyval.ValueRefList->push_back(E);
    delete yyvsp[-2].TypeVal;
  ;
    break;}
case 268:
#line 2720 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    yyval.ValueRefList = yyvsp[-4].ValueRefList;
    ValueRefListEntry E; E.Attrs = yyvsp[0].ParamAttrs; E.Val = getVal(yyvsp[-2].TypeVal->get(), yyvsp[-1].ValIDVal);
    yyval.ValueRefList->push_back(E);
    delete yyvsp[-2].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 269:
#line 2729 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ValueRefList = new ValueRefList(); ;
    break;}
case 270:
#line 2732 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ValueList = new std::vector<Value*>(); ;
    break;}
case 271:
#line 2733 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValueList = yyvsp[-2].ValueList;
    yyval.ValueList->push_back(yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 272:
#line 2740 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = true;
    CHECK_FOR_ERROR
  ;
    break;}
case 273:
#line 2744 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = false;
    CHECK_FOR_ERROR
  ;
    break;}
case 274:
#line 2749 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    if (!(*yyvsp[-3].TypeVal)->isInteger() && !(*yyvsp[-3].TypeVal)->isFloatingPoint() && 
        !isa<VectorType>((*yyvsp[-3].TypeVal).get()))
      GEN_ERROR(
        "Arithmetic operator requires integer, FP, or packed operands");
    if (isa<VectorType>((*yyvsp[-3].TypeVal).get()) && 
        (yyvsp[-4].BinaryOpVal == Instruction::URem || 
         yyvsp[-4].BinaryOpVal == Instruction::SRem ||
         yyvsp[-4].BinaryOpVal == Instruction::FRem))
      GEN_ERROR("Remainder not supported on vector types");
    Value* val1 = getVal(*yyvsp[-3].TypeVal, yyvsp[-2].ValIDVal); 
    CHECK_FOR_ERROR
    Value* val2 = getVal(*yyvsp[-3].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = BinaryOperator::create(yyvsp[-4].BinaryOpVal, val1, val2);
    if (yyval.InstVal == 0)
      GEN_ERROR("binary operator returned null");
    delete yyvsp[-3].TypeVal;
  ;
    break;}
case 275:
#line 2770 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    if (!(*yyvsp[-3].TypeVal)->isInteger()) {
      if (Instruction::isShift(yyvsp[-4].BinaryOpVal) || !isa<VectorType>(yyvsp[-3].TypeVal->get()) ||
          !cast<VectorType>(yyvsp[-3].TypeVal->get())->getElementType()->isInteger())
        GEN_ERROR("Logical operator requires integral operands");
    }
    Value* tmpVal1 = getVal(*yyvsp[-3].TypeVal, yyvsp[-2].ValIDVal);
    CHECK_FOR_ERROR
    Value* tmpVal2 = getVal(*yyvsp[-3].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = BinaryOperator::create(yyvsp[-4].BinaryOpVal, tmpVal1, tmpVal2);
    if (yyval.InstVal == 0)
      GEN_ERROR("binary operator returned null");
    delete yyvsp[-3].TypeVal;
  ;
    break;}
case 276:
#line 2787 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    if (isa<VectorType>((*yyvsp[-3].TypeVal).get()))
      GEN_ERROR("Vector types not supported by icmp instruction");
    Value* tmpVal1 = getVal(*yyvsp[-3].TypeVal, yyvsp[-2].ValIDVal);
    CHECK_FOR_ERROR
    Value* tmpVal2 = getVal(*yyvsp[-3].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = CmpInst::create(yyvsp[-5].OtherOpVal, yyvsp[-4].IPredicate, tmpVal1, tmpVal2);
    if (yyval.InstVal == 0)
      GEN_ERROR("icmp operator returned null");
    delete yyvsp[-3].TypeVal;
  ;
    break;}
case 277:
#line 2801 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    if (isa<VectorType>((*yyvsp[-3].TypeVal).get()))
      GEN_ERROR("Vector types not supported by fcmp instruction");
    Value* tmpVal1 = getVal(*yyvsp[-3].TypeVal, yyvsp[-2].ValIDVal);
    CHECK_FOR_ERROR
    Value* tmpVal2 = getVal(*yyvsp[-3].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = CmpInst::create(yyvsp[-5].OtherOpVal, yyvsp[-4].FPredicate, tmpVal1, tmpVal2);
    if (yyval.InstVal == 0)
      GEN_ERROR("fcmp operator returned null");
    delete yyvsp[-3].TypeVal;
  ;
    break;}
case 278:
#line 2815 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    Value* Val = yyvsp[-2].ValueVal;
    const Type* DestTy = yyvsp[0].TypeVal->get();
    if (!CastInst::castIsValid(yyvsp[-3].CastOpVal, Val, DestTy))
      GEN_ERROR("invalid cast opcode for cast from '" +
                Val->getType()->getDescription() + "' to '" +
                DestTy->getDescription() + "'"); 
    yyval.InstVal = CastInst::create(yyvsp[-3].CastOpVal, Val, DestTy);
    delete yyvsp[0].TypeVal;
  ;
    break;}
case 279:
#line 2827 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-4].ValueVal->getType() != Type::Int1Ty)
      GEN_ERROR("select condition must be boolean");
    if (yyvsp[-2].ValueVal->getType() != yyvsp[0].ValueVal->getType())
      GEN_ERROR("select value types should match");
    yyval.InstVal = new SelectInst(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 280:
#line 2835 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    yyval.InstVal = new VAArgInst(yyvsp[-2].ValueVal, *yyvsp[0].TypeVal);
    delete yyvsp[0].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 281:
#line 2842 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!ExtractElementInst::isValidOperands(yyvsp[-2].ValueVal, yyvsp[0].ValueVal))
      GEN_ERROR("Invalid extractelement operands");
    yyval.InstVal = new ExtractElementInst(yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 282:
#line 2848 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!InsertElementInst::isValidOperands(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal))
      GEN_ERROR("Invalid insertelement operands");
    yyval.InstVal = new InsertElementInst(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 283:
#line 2854 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!ShuffleVectorInst::isValidOperands(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal))
      GEN_ERROR("Invalid shufflevector operands");
    yyval.InstVal = new ShuffleVectorInst(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 284:
#line 2860 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    const Type *Ty = yyvsp[0].PHIList->front().first->getType();
    if (!Ty->isFirstClassType())
      GEN_ERROR("PHI node operands must be of first class type");
    yyval.InstVal = new PHINode(Ty);
    ((PHINode*)yyval.InstVal)->reserveOperandSpace(yyvsp[0].PHIList->size());
    while (yyvsp[0].PHIList->begin() != yyvsp[0].PHIList->end()) {
      if (yyvsp[0].PHIList->front().first->getType() != Ty) 
        GEN_ERROR("All elements of a PHI node must be of the same type");
      cast<PHINode>(yyval.InstVal)->addIncoming(yyvsp[0].PHIList->front().first, yyvsp[0].PHIList->front().second);
      yyvsp[0].PHIList->pop_front();
    }
    delete yyvsp[0].PHIList;  // Free the list...
    CHECK_FOR_ERROR
  ;
    break;}
case 285:
#line 2876 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{

    // Handle the short syntax
    const PointerType *PFTy = 0;
    const FunctionType *Ty = 0;
    if (!(PFTy = dyn_cast<PointerType>(yyvsp[-5].TypeVal->get())) ||
        !(Ty = dyn_cast<FunctionType>(PFTy->getElementType()))) {
      // Pull out the types of all of the arguments...
      std::vector<const Type*> ParamTypes;
      ParamAttrsVector Attrs;
      if (yyvsp[0].ParamAttrs != ParamAttr::None) {
        ParamAttrsWithIndex PAWI; PAWI.index = 0; PAWI.attrs = yyvsp[0].ParamAttrs;
        Attrs.push_back(PAWI);
      }
      unsigned index = 1;
      ValueRefList::iterator I = yyvsp[-2].ValueRefList->begin(), E = yyvsp[-2].ValueRefList->end();
      for (; I != E; ++I, ++index) {
        const Type *Ty = I->Val->getType();
        if (Ty == Type::VoidTy)
          GEN_ERROR("Short call syntax cannot be used with varargs");
        ParamTypes.push_back(Ty);
        if (I->Attrs != ParamAttr::None) {
          ParamAttrsWithIndex PAWI; PAWI.index = index; PAWI.attrs = I->Attrs;
          Attrs.push_back(PAWI);
        }
      }

      ParamAttrsList *PAL = 0;
      if (!Attrs.empty())
        PAL = ParamAttrsList::get(Attrs);

      Ty = FunctionType::get(yyvsp[-5].TypeVal->get(), ParamTypes, false, PAL);
      PFTy = PointerType::get(Ty);
    }

    Value *V = getVal(PFTy, yyvsp[-4].ValIDVal);   // Get the function we're calling...
    CHECK_FOR_ERROR

    // Check for call to invalid intrinsic to avoid crashing later.
    if (Function *theF = dyn_cast<Function>(V)) {
      if (theF->hasName() && (theF->getValueName()->getKeyLength() >= 5) &&
          (0 == strncmp(theF->getValueName()->getKeyData(), "llvm.", 5)) &&
          !theF->getIntrinsicID(true))
        GEN_ERROR("Call to invalid LLVM intrinsic function '" +
                  theF->getName() + "'");
    }

    // Check the arguments 
    ValueList Args;
    if (yyvsp[-2].ValueRefList->empty()) {                                   // Has no arguments?
      // Make sure no arguments is a good thing!
      if (Ty->getNumParams() != 0)
        GEN_ERROR("No arguments passed to a function that "
                       "expects arguments");
    } else {                                     // Has arguments?
      // Loop through FunctionType's arguments and ensure they are specified
      // correctly!
      //
      FunctionType::param_iterator I = Ty->param_begin();
      FunctionType::param_iterator E = Ty->param_end();
      ValueRefList::iterator ArgI = yyvsp[-2].ValueRefList->begin(), ArgE = yyvsp[-2].ValueRefList->end();

      for (; ArgI != ArgE && I != E; ++ArgI, ++I) {
        if (ArgI->Val->getType() != *I)
          GEN_ERROR("Parameter " + ArgI->Val->getName()+ " is not of type '" +
                         (*I)->getDescription() + "'");
        Args.push_back(ArgI->Val);
      }
      if (Ty->isVarArg()) {
        if (I == E)
          for (; ArgI != ArgE; ++ArgI)
            Args.push_back(ArgI->Val); // push the remaining varargs
      } else if (I != E || ArgI != ArgE)
        GEN_ERROR("Invalid number of parameters detected");
    }
    // Create the call node
    CallInst *CI = new CallInst(V, &Args[0], Args.size());
    CI->setTailCall(yyvsp[-7].BoolVal);
    CI->setCallingConv(yyvsp[-6].UIntVal);
    yyval.InstVal = CI;
    delete yyvsp[-2].ValueRefList;
    delete yyvsp[-5].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 286:
#line 2960 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.InstVal = yyvsp[0].InstVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 287:
#line 2965 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = true;
    CHECK_FOR_ERROR
  ;
    break;}
case 288:
#line 2969 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = false;
    CHECK_FOR_ERROR
  ;
    break;}
case 289:
#line 2976 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    yyval.InstVal = new MallocInst(*yyvsp[-1].TypeVal, 0, yyvsp[0].UIntVal);
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 290:
#line 2983 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-4].TypeVal)->getDescription());
    Value* tmpVal = getVal(yyvsp[-2].PrimType, yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new MallocInst(*yyvsp[-4].TypeVal, tmpVal, yyvsp[0].UIntVal);
    delete yyvsp[-4].TypeVal;
  ;
    break;}
case 291:
#line 2991 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    yyval.InstVal = new AllocaInst(*yyvsp[-1].TypeVal, 0, yyvsp[0].UIntVal);
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 292:
#line 2998 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-4].TypeVal)->getDescription());
    Value* tmpVal = getVal(yyvsp[-2].PrimType, yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new AllocaInst(*yyvsp[-4].TypeVal, tmpVal, yyvsp[0].UIntVal);
    delete yyvsp[-4].TypeVal;
  ;
    break;}
case 293:
#line 3006 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!isa<PointerType>(yyvsp[0].ValueVal->getType()))
      GEN_ERROR("Trying to free nonpointer type " + 
                     yyvsp[0].ValueVal->getType()->getDescription() + "");
    yyval.InstVal = new FreeInst(yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 294:
#line 3014 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    if (!isa<PointerType>(yyvsp[-2].TypeVal->get()))
      GEN_ERROR("Can't load from nonpointer type: " +
                     (*yyvsp[-2].TypeVal)->getDescription());
    if (!cast<PointerType>(yyvsp[-2].TypeVal->get())->getElementType()->isFirstClassType())
      GEN_ERROR("Can't load from pointer of non-first-class type: " +
                     (*yyvsp[-2].TypeVal)->getDescription());
    Value* tmpVal = getVal(*yyvsp[-2].TypeVal, yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new LoadInst(tmpVal, "", yyvsp[-4].BoolVal, yyvsp[0].UIntVal);
    delete yyvsp[-2].TypeVal;
  ;
    break;}
case 295:
#line 3028 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    const PointerType *PT = dyn_cast<PointerType>(yyvsp[-2].TypeVal->get());
    if (!PT)
      GEN_ERROR("Can't store to a nonpointer type: " +
                     (*yyvsp[-2].TypeVal)->getDescription());
    const Type *ElTy = PT->getElementType();
    if (ElTy != yyvsp[-4].ValueVal->getType())
      GEN_ERROR("Can't store '" + yyvsp[-4].ValueVal->getType()->getDescription() +
                     "' into space of type '" + ElTy->getDescription() + "'");

    Value* tmpVal = getVal(*yyvsp[-2].TypeVal, yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new StoreInst(yyvsp[-4].ValueVal, tmpVal, yyvsp[-6].BoolVal, yyvsp[0].UIntVal);
    delete yyvsp[-2].TypeVal;
  ;
    break;}
case 296:
#line 3045 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    if (!isa<PointerType>(yyvsp[-2].TypeVal->get()))
      GEN_ERROR("getelementptr insn requires pointer operand");

    if (!GetElementPtrInst::getIndexedType(*yyvsp[-2].TypeVal, &(*yyvsp[0].ValueList)[0], yyvsp[0].ValueList->size(), true))
      GEN_ERROR("Invalid getelementptr indices for type '" +
                     (*yyvsp[-2].TypeVal)->getDescription()+ "'");
    Value* tmpVal = getVal(*yyvsp[-2].TypeVal, yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new GetElementPtrInst(tmpVal, &(*yyvsp[0].ValueList)[0], yyvsp[0].ValueList->size());
    delete yyvsp[-2].TypeVal; 
    delete yyvsp[0].ValueList;
  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3062 "/Users/sabre/cvs/llvm/lib/AsmParser/llvmAsmParser.y"


// common code from the two 'RunVMAsmParser' functions
static Module* RunParser(Module * M) {

  llvmAsmlineno = 1;      // Reset the current line number...
  CurModule.CurrentModule = M;
#if YYDEBUG
  yydebug = Debug;
#endif

  // Check to make sure the parser succeeded
  if (yyparse()) {
    if (ParserResult)
      delete ParserResult;
    return 0;
  }

  // Emit an error if there are any unresolved types left.
  if (!CurModule.LateResolveTypes.empty()) {
    const ValID &DID = CurModule.LateResolveTypes.begin()->first;
    if (DID.Type == ValID::LocalName) {
      GenerateError("Undefined type remains at eof: '"+DID.getName() + "'");
    } else {
      GenerateError("Undefined type remains at eof: #" + itostr(DID.Num));
    }
    if (ParserResult)
      delete ParserResult;
    return 0;
  }

  // Emit an error if there are any unresolved values left.
  if (!CurModule.LateResolveValues.empty()) {
    Value *V = CurModule.LateResolveValues.back();
    std::map<Value*, std::pair<ValID, int> >::iterator I =
      CurModule.PlaceHolderInfo.find(V);

    if (I != CurModule.PlaceHolderInfo.end()) {
      ValID &DID = I->second.first;
      if (DID.Type == ValID::LocalName) {
        GenerateError("Undefined value remains at eof: "+DID.getName() + "'");
      } else {
        GenerateError("Undefined value remains at eof: #" + itostr(DID.Num));
      }
      if (ParserResult)
        delete ParserResult;
      return 0;
    }
  }

  // Check to make sure that parsing produced a result
  if (!ParserResult)
    return 0;

  // Reset ParserResult variable while saving its value for the result.
  Module *Result = ParserResult;
  ParserResult = 0;

  return Result;
}

void llvm::GenerateError(const std::string &message, int LineNo) {
  if (LineNo == -1) LineNo = llvmAsmlineno;
  // TODO: column number in exception
  if (TheParseError)
    TheParseError->setError(CurFilename, message, LineNo);
  TriggerError = 1;
}

int yyerror(const char *ErrorMsg) {
  std::string where 
    = std::string((CurFilename == "-") ? std::string("<stdin>") : CurFilename)
                  + ":" + utostr((unsigned) llvmAsmlineno) + ": ";
  std::string errMsg = where + "error: " + std::string(ErrorMsg);
  if (yychar != YYEMPTY && yychar != 0)
    errMsg += " while reading token: '" + std::string(llvmAsmtext, llvmAsmleng)+
              "'";
  GenerateError(errMsg);
  return 0;
}
