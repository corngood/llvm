
/*  A Bison parser, made from /Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse llvmAsmparse
#define yylex llvmAsmlex
#define yyerror llvmAsmerror
#define yylval llvmAsmlval
#define yychar llvmAsmchar
#define yydebug llvmAsmdebug
#define yynerrs llvmAsmnerrs
#define	ESINT64VAL	257
#define	EUINT64VAL	258
#define	LOCALVAL_ID	259
#define	GLOBALVAL_ID	260
#define	FPVAL	261
#define	VOID	262
#define	INTTYPE	263
#define	FLOAT	264
#define	DOUBLE	265
#define	LABEL	266
#define	TYPE	267
#define	LOCALVAR	268
#define	GLOBALVAR	269
#define	LABELSTR	270
#define	STRINGCONSTANT	271
#define	ATSTRINGCONSTANT	272
#define	IMPLEMENTATION	273
#define	ZEROINITIALIZER	274
#define	TRUETOK	275
#define	FALSETOK	276
#define	BEGINTOK	277
#define	ENDTOK	278
#define	DECLARE	279
#define	DEFINE	280
#define	GLOBAL	281
#define	CONSTANT	282
#define	SECTION	283
#define	VOLATILE	284
#define	TO	285
#define	DOTDOTDOT	286
#define	NULL_TOK	287
#define	UNDEF	288
#define	INTERNAL	289
#define	LINKONCE	290
#define	WEAK	291
#define	APPENDING	292
#define	DLLIMPORT	293
#define	DLLEXPORT	294
#define	EXTERN_WEAK	295
#define	OPAQUE	296
#define	EXTERNAL	297
#define	TARGET	298
#define	TRIPLE	299
#define	ALIGN	300
#define	DEPLIBS	301
#define	CALL	302
#define	TAIL	303
#define	ASM_TOK	304
#define	MODULE	305
#define	SIDEEFFECT	306
#define	CC_TOK	307
#define	CCC_TOK	308
#define	FASTCC_TOK	309
#define	COLDCC_TOK	310
#define	X86_STDCALLCC_TOK	311
#define	X86_FASTCALLCC_TOK	312
#define	DATALAYOUT	313
#define	RET	314
#define	BR	315
#define	SWITCH	316
#define	INVOKE	317
#define	UNWIND	318
#define	UNREACHABLE	319
#define	ADD	320
#define	SUB	321
#define	MUL	322
#define	UDIV	323
#define	SDIV	324
#define	FDIV	325
#define	UREM	326
#define	SREM	327
#define	FREM	328
#define	AND	329
#define	OR	330
#define	XOR	331
#define	ICMP	332
#define	FCMP	333
#define	EQ	334
#define	NE	335
#define	SLT	336
#define	SGT	337
#define	SLE	338
#define	SGE	339
#define	ULT	340
#define	UGT	341
#define	ULE	342
#define	UGE	343
#define	OEQ	344
#define	ONE	345
#define	OLT	346
#define	OGT	347
#define	OLE	348
#define	OGE	349
#define	ORD	350
#define	UNO	351
#define	UEQ	352
#define	UNE	353
#define	MALLOC	354
#define	ALLOCA	355
#define	FREE	356
#define	LOAD	357
#define	STORE	358
#define	GETELEMENTPTR	359
#define	TRUNC	360
#define	ZEXT	361
#define	SEXT	362
#define	FPTRUNC	363
#define	FPEXT	364
#define	BITCAST	365
#define	UITOFP	366
#define	SITOFP	367
#define	FPTOUI	368
#define	FPTOSI	369
#define	INTTOPTR	370
#define	PTRTOINT	371
#define	PHI_TOK	372
#define	SELECT	373
#define	SHL	374
#define	LSHR	375
#define	ASHR	376
#define	VAARG	377
#define	EXTRACTELEMENT	378
#define	INSERTELEMENT	379
#define	SHUFFLEVECTOR	380
#define	NORETURN	381
#define	INREG	382
#define	SRET	383
#define	DEFAULT	384
#define	HIDDEN	385

#line 14 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"

#include "ParserInternals.h"
#include "llvm/CallingConv.h"
#include "llvm/InlineAsm.h"
#include "llvm/Instructions.h"
#include "llvm/Module.h"
#include "llvm/SymbolTable.h"
#include "llvm/Support/GetElementPtrTypeIterator.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/ADT/STLExtras.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/Streams.h"
#include <algorithm>
#include <list>
#include <utility>
#ifndef NDEBUG
#define YYDEBUG 1
#endif

// The following is a gross hack. In order to rid the libAsmParser library of
// exceptions, we have to have a way of getting the yyparse function to go into
// an error situation. So, whenever we want an error to occur, the GenerateError
// function (see bottom of file) sets TriggerError. Then, at the end of each 
// production in the grammer we use CHECK_FOR_ERROR which will invoke YYERROR 
// (a goto) to put YACC in error state. Furthermore, several calls to 
// GenerateError are made from inside productions and they must simulate the
// previous exception behavior by exiting the production immediately. We have
// replaced these with the GEN_ERROR macro which calls GeneratError and then
// immediately invokes YYERROR. This would be so much cleaner if it was a 
// recursive descent parser.
static bool TriggerError = false;
#define CHECK_FOR_ERROR { if (TriggerError) { TriggerError = false; YYABORT; } }
#define GEN_ERROR(msg) { GenerateError(msg); YYERROR; }

int yyerror(const char *ErrorMsg); // Forward declarations to prevent "implicit
int yylex();                       // declaration" of xxx warnings.
int yyparse();

namespace llvm {
  std::string CurFilename;
#if YYDEBUG
static cl::opt<bool>
Debug("debug-yacc", cl::desc("Print yacc debug state changes"), 
      cl::Hidden, cl::init(false));
#endif
}
using namespace llvm;

static Module *ParserResult;

// DEBUG_UPREFS - Define this symbol if you want to enable debugging output
// relating to upreferences in the input stream.
//
//#define DEBUG_UPREFS 1
#ifdef DEBUG_UPREFS
#define UR_OUT(X) cerr << X
#else
#define UR_OUT(X)
#endif

#define YYERROR_VERBOSE 1

static GlobalVariable *CurGV;


// This contains info used when building the body of a function.  It is
// destroyed when the function is completed.
//
typedef std::vector<Value *> ValueList;           // Numbered defs

static void 
ResolveDefinitions(std::map<const Type *,ValueList> &LateResolvers,
                   std::map<const Type *,ValueList> *FutureLateResolvers = 0);

static struct PerModuleInfo {
  Module *CurrentModule;
  std::map<const Type *, ValueList> Values; // Module level numbered definitions
  std::map<const Type *,ValueList> LateResolveValues;
  std::vector<PATypeHolder>    Types;
  std::map<ValID, PATypeHolder> LateResolveTypes;

  /// PlaceHolderInfo - When temporary placeholder objects are created, remember
  /// how they were referenced and on which line of the input they came from so
  /// that we can resolve them later and print error messages as appropriate.
  std::map<Value*, std::pair<ValID, int> > PlaceHolderInfo;

  // GlobalRefs - This maintains a mapping between <Type, ValID>'s and forward
  // references to global values.  Global values may be referenced before they
  // are defined, and if so, the temporary object that they represent is held
  // here.  This is used for forward references of GlobalValues.
  //
  typedef std::map<std::pair<const PointerType *,
                             ValID>, GlobalValue*> GlobalRefsType;
  GlobalRefsType GlobalRefs;

  void ModuleDone() {
    // If we could not resolve some functions at function compilation time
    // (calls to functions before they are defined), resolve them now...  Types
    // are resolved when the constant pool has been completely parsed.
    //
    ResolveDefinitions(LateResolveValues);
    if (TriggerError)
      return;

    // Check to make sure that all global value forward references have been
    // resolved!
    //
    if (!GlobalRefs.empty()) {
      std::string UndefinedReferences = "Unresolved global references exist:\n";

      for (GlobalRefsType::iterator I = GlobalRefs.begin(), E =GlobalRefs.end();
           I != E; ++I) {
        UndefinedReferences += "  " + I->first.first->getDescription() + " " +
                               I->first.second.getName() + "\n";
      }
      GenerateError(UndefinedReferences);
      return;
    }

    Values.clear();         // Clear out function local definitions
    Types.clear();
    CurrentModule = 0;
  }

  // GetForwardRefForGlobal - Check to see if there is a forward reference
  // for this global.  If so, remove it from the GlobalRefs map and return it.
  // If not, just return null.
  GlobalValue *GetForwardRefForGlobal(const PointerType *PTy, ValID ID) {
    // Check to see if there is a forward reference to this global variable...
    // if there is, eliminate it and patch the reference to use the new def'n.
    GlobalRefsType::iterator I = GlobalRefs.find(std::make_pair(PTy, ID));
    GlobalValue *Ret = 0;
    if (I != GlobalRefs.end()) {
      Ret = I->second;
      GlobalRefs.erase(I);
    }
    return Ret;
  }

  bool TypeIsUnresolved(PATypeHolder* PATy) {
    // If it isn't abstract, its resolved
    const Type* Ty = PATy->get();
    if (!Ty->isAbstract())
      return false;
    // Traverse the type looking for abstract types. If it isn't abstract then
    // we don't need to traverse that leg of the type. 
    std::vector<const Type*> WorkList, SeenList;
    WorkList.push_back(Ty);
    while (!WorkList.empty()) {
      const Type* Ty = WorkList.back();
      SeenList.push_back(Ty);
      WorkList.pop_back();
      if (const OpaqueType* OpTy = dyn_cast<OpaqueType>(Ty)) {
        // Check to see if this is an unresolved type
        std::map<ValID, PATypeHolder>::iterator I = LateResolveTypes.begin();
        std::map<ValID, PATypeHolder>::iterator E = LateResolveTypes.end();
        for ( ; I != E; ++I) {
          if (I->second.get() == OpTy)
            return true;
        }
      } else if (const SequentialType* SeqTy = dyn_cast<SequentialType>(Ty)) {
        const Type* TheTy = SeqTy->getElementType();
        if (TheTy->isAbstract() && TheTy != Ty) {
          std::vector<const Type*>::iterator I = SeenList.begin(), 
                                             E = SeenList.end();
          for ( ; I != E; ++I)
            if (*I == TheTy)
              break;
          if (I == E)
            WorkList.push_back(TheTy);
        }
      } else if (const StructType* StrTy = dyn_cast<StructType>(Ty)) {
        for (unsigned i = 0; i < StrTy->getNumElements(); ++i) {
          const Type* TheTy = StrTy->getElementType(i);
          if (TheTy->isAbstract() && TheTy != Ty) {
            std::vector<const Type*>::iterator I = SeenList.begin(), 
                                               E = SeenList.end();
            for ( ; I != E; ++I)
              if (*I == TheTy)
                break;
            if (I == E)
              WorkList.push_back(TheTy);
          }
        }
      }
    }
    return false;
  }


} CurModule;

static struct PerFunctionInfo {
  Function *CurrentFunction;     // Pointer to current function being created

  std::map<const Type*, ValueList> Values; // Keep track of #'d definitions
  std::map<const Type*, ValueList> LateResolveValues;
  bool isDeclare;                    // Is this function a forward declararation?
  GlobalValue::LinkageTypes Linkage; // Linkage for forward declaration.
  GlobalValue::VisibilityTypes Visibility;

  /// BBForwardRefs - When we see forward references to basic blocks, keep
  /// track of them here.
  std::map<BasicBlock*, std::pair<ValID, int> > BBForwardRefs;
  std::vector<BasicBlock*> NumberedBlocks;
  unsigned NextBBNum;

  inline PerFunctionInfo() {
    CurrentFunction = 0;
    isDeclare = false;
    Linkage = GlobalValue::ExternalLinkage;
    Visibility = GlobalValue::DefaultVisibility;
  }

  inline void FunctionStart(Function *M) {
    CurrentFunction = M;
    NextBBNum = 0;
  }

  void FunctionDone() {
    NumberedBlocks.clear();

    // Any forward referenced blocks left?
    if (!BBForwardRefs.empty()) {
      GenerateError("Undefined reference to label " +
                     BBForwardRefs.begin()->first->getName());
      return;
    }

    // Resolve all forward references now.
    ResolveDefinitions(LateResolveValues, &CurModule.LateResolveValues);

    Values.clear();         // Clear out function local definitions
    CurrentFunction = 0;
    isDeclare = false;
    Linkage = GlobalValue::ExternalLinkage;
    Visibility = GlobalValue::DefaultVisibility;
  }
} CurFun;  // Info for the current function...

static bool inFunctionScope() { return CurFun.CurrentFunction != 0; }


//===----------------------------------------------------------------------===//
//               Code to handle definitions of all the types
//===----------------------------------------------------------------------===//

static int InsertValue(Value *V,
                  std::map<const Type*,ValueList> &ValueTab = CurFun.Values) {
  if (V->hasName()) return -1;           // Is this a numbered definition?

  // Yes, insert the value into the value table...
  ValueList &List = ValueTab[V->getType()];
  List.push_back(V);
  return List.size()-1;
}

static const Type *getTypeVal(const ValID &D, bool DoNotImprovise = false) {
  switch (D.Type) {
  case ValID::LocalID:               // Is it a numbered definition?
    // Module constants occupy the lowest numbered slots...
    if (D.Num < CurModule.Types.size())
      return CurModule.Types[D.Num];
    break;
  case ValID::LocalName:                 // Is it a named definition?
    if (const Type *N = CurModule.CurrentModule->getTypeByName(D.Name)) {
      D.destroy();  // Free old strdup'd memory...
      return N;
    }
    break;
  default:
    GenerateError("Internal parser error: Invalid symbol type reference!");
    return 0;
  }

  // If we reached here, we referenced either a symbol that we don't know about
  // or an id number that hasn't been read yet.  We may be referencing something
  // forward, so just create an entry to be resolved later and get to it...
  //
  if (DoNotImprovise) return 0;  // Do we just want a null to be returned?


  if (inFunctionScope()) {
    if (D.Type == ValID::LocalName) {
      GenerateError("Reference to an undefined type: '" + D.getName() + "'");
      return 0;
    } else {
      GenerateError("Reference to an undefined type: #" + utostr(D.Num));
      return 0;
    }
  }

  std::map<ValID, PATypeHolder>::iterator I =CurModule.LateResolveTypes.find(D);
  if (I != CurModule.LateResolveTypes.end())
    return I->second;

  Type *Typ = OpaqueType::get();
  CurModule.LateResolveTypes.insert(std::make_pair(D, Typ));
  return Typ;
 }

// getValNonImprovising - Look up the value specified by the provided type and
// the provided ValID.  If the value exists and has already been defined, return
// it.  Otherwise return null.
//
static Value *getValNonImprovising(const Type *Ty, const ValID &D) {
  if (isa<FunctionType>(Ty)) {
    GenerateError("Functions are not values and "
                   "must be referenced as pointers");
    return 0;
  }

  switch (D.Type) {
  case ValID::LocalID: {                 // Is it a numbered definition?
    // Module constants occupy the lowest numbered slots.
    std::map<const Type*,ValueList>::iterator VI = CurFun.Values.find(Ty);
    // Make sure that our type is within bounds.
    if (VI == CurFun.Values.end()) return 0;

    // Check that the number is within bounds.
    if (D.Num >= VI->second.size()) return 0;

    return VI->second[D.Num];
  }
  case ValID::GlobalID: {                 // Is it a numbered definition?
    unsigned Num = D.Num;
    
    // Module constants occupy the lowest numbered slots...
    std::map<const Type*,ValueList>::iterator VI = CurModule.Values.find(Ty);
    if (VI == CurModule.Values.end()) return 0;
    if (D.Num >= VI->second.size()) return 0;
    return VI->second[Num];
  }
    
  case ValID::LocalName: {                // Is it a named definition?
    if (!inFunctionScope()) return 0;
    SymbolTable &SymTab = CurFun.CurrentFunction->getValueSymbolTable();
    Value *N = SymTab.lookup(Ty, D.Name);
    if (N == 0) return 0;
    
    D.destroy();  // Free old strdup'd memory...
    return N;
  }
  case ValID::GlobalName: {                // Is it a named definition?
    SymbolTable &SymTab = CurModule.CurrentModule->getValueSymbolTable();
    Value *N = SymTab.lookup(Ty, D.Name);
    if (N == 0) return 0;

    D.destroy();  // Free old strdup'd memory...
    return N;
  }

  // Check to make sure that "Ty" is an integral type, and that our
  // value will fit into the specified type...
  case ValID::ConstSIntVal:    // Is it a constant pool reference??
    if (!ConstantInt::isValueValidForType(Ty, D.ConstPool64)) {
      GenerateError("Signed integral constant '" +
                     itostr(D.ConstPool64) + "' is invalid for type '" +
                     Ty->getDescription() + "'!");
      return 0;
    }
    return ConstantInt::get(Ty, D.ConstPool64);

  case ValID::ConstUIntVal:     // Is it an unsigned const pool reference?
    if (!ConstantInt::isValueValidForType(Ty, D.UConstPool64)) {
      if (!ConstantInt::isValueValidForType(Ty, D.ConstPool64)) {
        GenerateError("Integral constant '" + utostr(D.UConstPool64) +
                       "' is invalid or out of range!");
        return 0;
      } else {     // This is really a signed reference.  Transmogrify.
        return ConstantInt::get(Ty, D.ConstPool64);
      }
    } else {
      return ConstantInt::get(Ty, D.UConstPool64);
    }

  case ValID::ConstFPVal:        // Is it a floating point const pool reference?
    if (!ConstantFP::isValueValidForType(Ty, D.ConstPoolFP)) {
      GenerateError("FP constant invalid for type!!");
      return 0;
    }
    return ConstantFP::get(Ty, D.ConstPoolFP);

  case ValID::ConstNullVal:      // Is it a null value?
    if (!isa<PointerType>(Ty)) {
      GenerateError("Cannot create a a non pointer null!");
      return 0;
    }
    return ConstantPointerNull::get(cast<PointerType>(Ty));

  case ValID::ConstUndefVal:      // Is it an undef value?
    return UndefValue::get(Ty);

  case ValID::ConstZeroVal:      // Is it a zero value?
    return Constant::getNullValue(Ty);
    
  case ValID::ConstantVal:       // Fully resolved constant?
    if (D.ConstantValue->getType() != Ty) {
      GenerateError("Constant expression type different from required type!");
      return 0;
    }
    return D.ConstantValue;

  case ValID::InlineAsmVal: {    // Inline asm expression
    const PointerType *PTy = dyn_cast<PointerType>(Ty);
    const FunctionType *FTy =
      PTy ? dyn_cast<FunctionType>(PTy->getElementType()) : 0;
    if (!FTy || !InlineAsm::Verify(FTy, D.IAD->Constraints)) {
      GenerateError("Invalid type for asm constraint string!");
      return 0;
    }
    InlineAsm *IA = InlineAsm::get(FTy, D.IAD->AsmString, D.IAD->Constraints,
                                   D.IAD->HasSideEffects);
    D.destroy();   // Free InlineAsmDescriptor.
    return IA;
  }
  default:
    assert(0 && "Unhandled case!");
    return 0;
  }   // End of switch

  assert(0 && "Unhandled case!");
  return 0;
}

// getVal - This function is identical to getValNonImprovising, except that if a
// value is not already defined, it "improvises" by creating a placeholder var
// that looks and acts just like the requested variable.  When the value is
// defined later, all uses of the placeholder variable are replaced with the
// real thing.
//
static Value *getVal(const Type *Ty, const ValID &ID) {
  if (Ty == Type::LabelTy) {
    GenerateError("Cannot use a basic block here");
    return 0;
  }

  // See if the value has already been defined.
  Value *V = getValNonImprovising(Ty, ID);
  if (V) return V;
  if (TriggerError) return 0;

  if (!Ty->isFirstClassType() && !isa<OpaqueType>(Ty)) {
    GenerateError("Invalid use of a composite type!");
    return 0;
  }

  // If we reached here, we referenced either a symbol that we don't know about
  // or an id number that hasn't been read yet.  We may be referencing something
  // forward, so just create an entry to be resolved later and get to it...
  //
  V = new Argument(Ty);

  // Remember where this forward reference came from.  FIXME, shouldn't we try
  // to recycle these things??
  CurModule.PlaceHolderInfo.insert(std::make_pair(V, std::make_pair(ID,
                                                               llvmAsmlineno)));

  if (inFunctionScope())
    InsertValue(V, CurFun.LateResolveValues);
  else
    InsertValue(V, CurModule.LateResolveValues);
  return V;
}

/// getBBVal - This is used for two purposes:
///  * If isDefinition is true, a new basic block with the specified ID is being
///    defined.
///  * If isDefinition is true, this is a reference to a basic block, which may
///    or may not be a forward reference.
///
static BasicBlock *getBBVal(const ValID &ID, bool isDefinition = false) {
  assert(inFunctionScope() && "Can't get basic block at global scope!");

  std::string Name;
  BasicBlock *BB = 0;
  switch (ID.Type) {
  default: 
    GenerateError("Illegal label reference " + ID.getName());
    return 0;
  case ValID::LocalID:                // Is it a numbered definition?
    if (ID.Num >= CurFun.NumberedBlocks.size())
      CurFun.NumberedBlocks.resize(ID.Num+1);
    BB = CurFun.NumberedBlocks[ID.Num];
    break;
  case ValID::LocalName:                  // Is it a named definition?
    Name = ID.Name;
    if (Value *N = CurFun.CurrentFunction->
                   getValueSymbolTable().lookup(Type::LabelTy, Name))
      BB = cast<BasicBlock>(N);
    break;
  }

  // See if the block has already been defined.
  if (BB) {
    // If this is the definition of the block, make sure the existing value was
    // just a forward reference.  If it was a forward reference, there will be
    // an entry for it in the PlaceHolderInfo map.
    if (isDefinition && !CurFun.BBForwardRefs.erase(BB)) {
      // The existing value was a definition, not a forward reference.
      GenerateError("Redefinition of label " + ID.getName());
      return 0;
    }

    ID.destroy();                       // Free strdup'd memory.
    return BB;
  }

  // Otherwise this block has not been seen before.
  BB = new BasicBlock("", CurFun.CurrentFunction);
  if (ID.Type == ValID::LocalName) {
    BB->setName(ID.Name);
  } else {
    CurFun.NumberedBlocks[ID.Num] = BB;
  }

  // If this is not a definition, keep track of it so we can use it as a forward
  // reference.
  if (!isDefinition) {
    // Remember where this forward reference came from.
    CurFun.BBForwardRefs[BB] = std::make_pair(ID, llvmAsmlineno);
  } else {
    // The forward declaration could have been inserted anywhere in the
    // function: insert it into the correct place now.
    CurFun.CurrentFunction->getBasicBlockList().remove(BB);
    CurFun.CurrentFunction->getBasicBlockList().push_back(BB);
  }
  ID.destroy();
  return BB;
}


//===----------------------------------------------------------------------===//
//              Code to handle forward references in instructions
//===----------------------------------------------------------------------===//
//
// This code handles the late binding needed with statements that reference
// values not defined yet... for example, a forward branch, or the PHI node for
// a loop body.
//
// This keeps a table (CurFun.LateResolveValues) of all such forward references
// and back patchs after we are done.
//

// ResolveDefinitions - If we could not resolve some defs at parsing
// time (forward branches, phi functions for loops, etc...) resolve the
// defs now...
//
static void 
ResolveDefinitions(std::map<const Type*,ValueList> &LateResolvers,
                   std::map<const Type*,ValueList> *FutureLateResolvers) {
  // Loop over LateResolveDefs fixing up stuff that couldn't be resolved
  for (std::map<const Type*,ValueList>::iterator LRI = LateResolvers.begin(),
         E = LateResolvers.end(); LRI != E; ++LRI) {
    ValueList &List = LRI->second;
    while (!List.empty()) {
      Value *V = List.back();
      List.pop_back();

      std::map<Value*, std::pair<ValID, int> >::iterator PHI =
        CurModule.PlaceHolderInfo.find(V);
      assert(PHI != CurModule.PlaceHolderInfo.end() && "Placeholder error!");

      ValID &DID = PHI->second.first;

      Value *TheRealValue = getValNonImprovising(LRI->first, DID);
      if (TriggerError)
        return;
      if (TheRealValue) {
        V->replaceAllUsesWith(TheRealValue);
        delete V;
        CurModule.PlaceHolderInfo.erase(PHI);
      } else if (FutureLateResolvers) {
        // Functions have their unresolved items forwarded to the module late
        // resolver table
        InsertValue(V, *FutureLateResolvers);
      } else {
        if (DID.Type == ValID::LocalName || DID.Type == ValID::GlobalName) {
          GenerateError("Reference to an invalid definition: '" +DID.getName()+
                         "' of type '" + V->getType()->getDescription() + "'",
                         PHI->second.second);
          return;
        } else {
          GenerateError("Reference to an invalid definition: #" +
                         itostr(DID.Num) + " of type '" +
                         V->getType()->getDescription() + "'",
                         PHI->second.second);
          return;
        }
      }
    }
  }

  LateResolvers.clear();
}

// ResolveTypeTo - A brand new type was just declared.  This means that (if
// name is not null) things referencing Name can be resolved.  Otherwise, things
// refering to the number can be resolved.  Do this now.
//
static void ResolveTypeTo(char *Name, const Type *ToTy) {
  ValID D;
  if (Name) D = ValID::createLocalName(Name);
  else      D = ValID::createLocalID(CurModule.Types.size());

  std::map<ValID, PATypeHolder>::iterator I =
    CurModule.LateResolveTypes.find(D);
  if (I != CurModule.LateResolveTypes.end()) {
    ((DerivedType*)I->second.get())->refineAbstractTypeTo(ToTy);
    CurModule.LateResolveTypes.erase(I);
  }
}

// setValueName - Set the specified value to the name given.  The name may be
// null potentially, in which case this is a noop.  The string passed in is
// assumed to be a malloc'd string buffer, and is free'd by this function.
//
static void setValueName(Value *V, char *NameStr) {
  if (!NameStr) return;
  std::string Name(NameStr);      // Copy string
  free(NameStr);                  // Free old string

  if (V->getType() == Type::VoidTy) {
    GenerateError("Can't assign name '" + Name+"' to value with void type!");
    return;
  }

  assert(inFunctionScope() && "Must be in function scope!");
  SymbolTable &ST = CurFun.CurrentFunction->getValueSymbolTable();
  if (ST.lookup(V->getType(), Name)) {
    GenerateError("Redefinition of value '" + Name + "' of type '" +
                   V->getType()->getDescription() + "'!");
    return;
  }

  // Set the name.
  V->setName(Name);
}

/// ParseGlobalVariable - Handle parsing of a global.  If Initializer is null,
/// this is a declaration, otherwise it is a definition.
static GlobalVariable *
ParseGlobalVariable(char *NameStr,
                    GlobalValue::LinkageTypes Linkage,
                    GlobalValue::VisibilityTypes Visibility,
                    bool isConstantGlobal, const Type *Ty,
                    Constant *Initializer) {
  if (isa<FunctionType>(Ty)) {
    GenerateError("Cannot declare global vars of function type!");
    return 0;
  }

  const PointerType *PTy = PointerType::get(Ty);

  std::string Name;
  if (NameStr) {
    Name = NameStr;      // Copy string
    free(NameStr);       // Free old string
  }

  // See if this global value was forward referenced.  If so, recycle the
  // object.
  ValID ID;
  if (!Name.empty()) {
    ID = ValID::createGlobalName((char*)Name.c_str());
  } else {
    ID = ValID::createGlobalID(CurModule.Values[PTy].size());
  }

  if (GlobalValue *FWGV = CurModule.GetForwardRefForGlobal(PTy, ID)) {
    // Move the global to the end of the list, from whereever it was
    // previously inserted.
    GlobalVariable *GV = cast<GlobalVariable>(FWGV);
    CurModule.CurrentModule->getGlobalList().remove(GV);
    CurModule.CurrentModule->getGlobalList().push_back(GV);
    GV->setInitializer(Initializer);
    GV->setLinkage(Linkage);
    GV->setVisibility(Visibility);
    GV->setConstant(isConstantGlobal);
    InsertValue(GV, CurModule.Values);
    return GV;
  }

  // If this global has a name, check to see if there is already a definition
  // of this global in the module.  If so, it is an error.
  if (!Name.empty()) {
    // We are a simple redefinition of a value, check to see if it is defined
    // the same as the old one.
    if (CurModule.CurrentModule->getGlobalVariable(Name, Ty)) {
      GenerateError("Redefinition of global variable named '" + Name +
                     "' of type '" + Ty->getDescription() + "'!");
      return 0;
    }
  }

  // Otherwise there is no existing GV to use, create one now.
  GlobalVariable *GV =
    new GlobalVariable(Ty, isConstantGlobal, Linkage, Initializer, Name,
                       CurModule.CurrentModule);
  GV->setVisibility(Visibility);
  InsertValue(GV, CurModule.Values);
  return GV;
}

// setTypeName - Set the specified type to the name given.  The name may be
// null potentially, in which case this is a noop.  The string passed in is
// assumed to be a malloc'd string buffer, and is freed by this function.
//
// This function returns true if the type has already been defined, but is
// allowed to be redefined in the specified context.  If the name is a new name
// for the type plane, it is inserted and false is returned.
static bool setTypeName(const Type *T, char *NameStr) {
  assert(!inFunctionScope() && "Can't give types function-local names!");
  if (NameStr == 0) return false;
 
  std::string Name(NameStr);      // Copy string
  free(NameStr);                  // Free old string

  // We don't allow assigning names to void type
  if (T == Type::VoidTy) {
    GenerateError("Can't assign name '" + Name + "' to the void type!");
    return false;
  }

  // Set the type name, checking for conflicts as we do so.
  bool AlreadyExists = CurModule.CurrentModule->addTypeName(Name, T);

  if (AlreadyExists) {   // Inserting a name that is already defined???
    const Type *Existing = CurModule.CurrentModule->getTypeByName(Name);
    assert(Existing && "Conflict but no matching type?");

    // There is only one case where this is allowed: when we are refining an
    // opaque type.  In this case, Existing will be an opaque type.
    if (const OpaqueType *OpTy = dyn_cast<OpaqueType>(Existing)) {
      // We ARE replacing an opaque type!
      const_cast<OpaqueType*>(OpTy)->refineAbstractTypeTo(T);
      return true;
    }

    // Otherwise, this is an attempt to redefine a type. That's okay if
    // the redefinition is identical to the original. This will be so if
    // Existing and T point to the same Type object. In this one case we
    // allow the equivalent redefinition.
    if (Existing == T) return true;  // Yes, it's equal.

    // Any other kind of (non-equivalent) redefinition is an error.
    GenerateError("Redefinition of type named '" + Name + "' of type '" +
                   T->getDescription() + "'!");
  }

  return false;
}

//===----------------------------------------------------------------------===//
// Code for handling upreferences in type names...
//

// TypeContains - Returns true if Ty directly contains E in it.
//
static bool TypeContains(const Type *Ty, const Type *E) {
  return std::find(Ty->subtype_begin(), Ty->subtype_end(),
                   E) != Ty->subtype_end();
}

namespace {
  struct UpRefRecord {
    // NestingLevel - The number of nesting levels that need to be popped before
    // this type is resolved.
    unsigned NestingLevel;

    // LastContainedTy - This is the type at the current binding level for the
    // type.  Every time we reduce the nesting level, this gets updated.
    const Type *LastContainedTy;

    // UpRefTy - This is the actual opaque type that the upreference is
    // represented with.
    OpaqueType *UpRefTy;

    UpRefRecord(unsigned NL, OpaqueType *URTy)
      : NestingLevel(NL), LastContainedTy(URTy), UpRefTy(URTy) {}
  };
}

// UpRefs - A list of the outstanding upreferences that need to be resolved.
static std::vector<UpRefRecord> UpRefs;

/// HandleUpRefs - Every time we finish a new layer of types, this function is
/// called.  It loops through the UpRefs vector, which is a list of the
/// currently active types.  For each type, if the up reference is contained in
/// the newly completed type, we decrement the level count.  When the level
/// count reaches zero, the upreferenced type is the type that is passed in:
/// thus we can complete the cycle.
///
static PATypeHolder HandleUpRefs(const Type *ty) {
  // If Ty isn't abstract, or if there are no up-references in it, then there is
  // nothing to resolve here.
  if (!ty->isAbstract() || UpRefs.empty()) return ty;
  
  PATypeHolder Ty(ty);
  UR_OUT("Type '" << Ty->getDescription() <<
         "' newly formed.  Resolving upreferences.\n" <<
         UpRefs.size() << " upreferences active!\n");

  // If we find any resolvable upreferences (i.e., those whose NestingLevel goes
  // to zero), we resolve them all together before we resolve them to Ty.  At
  // the end of the loop, if there is anything to resolve to Ty, it will be in
  // this variable.
  OpaqueType *TypeToResolve = 0;

  for (unsigned i = 0; i != UpRefs.size(); ++i) {
    UR_OUT("  UR#" << i << " - TypeContains(" << Ty->getDescription() << ", "
           << UpRefs[i].second->getDescription() << ") = "
           << (TypeContains(Ty, UpRefs[i].second) ? "true" : "false") << "\n");
    if (TypeContains(Ty, UpRefs[i].LastContainedTy)) {
      // Decrement level of upreference
      unsigned Level = --UpRefs[i].NestingLevel;
      UpRefs[i].LastContainedTy = Ty;
      UR_OUT("  Uplevel Ref Level = " << Level << "\n");
      if (Level == 0) {                     // Upreference should be resolved!
        if (!TypeToResolve) {
          TypeToResolve = UpRefs[i].UpRefTy;
        } else {
          UR_OUT("  * Resolving upreference for "
                 << UpRefs[i].second->getDescription() << "\n";
                 std::string OldName = UpRefs[i].UpRefTy->getDescription());
          UpRefs[i].UpRefTy->refineAbstractTypeTo(TypeToResolve);
          UR_OUT("  * Type '" << OldName << "' refined upreference to: "
                 << (const void*)Ty << ", " << Ty->getDescription() << "\n");
        }
        UpRefs.erase(UpRefs.begin()+i);     // Remove from upreference list...
        --i;                                // Do not skip the next element...
      }
    }
  }

  if (TypeToResolve) {
    UR_OUT("  * Resolving upreference for "
           << UpRefs[i].second->getDescription() << "\n";
           std::string OldName = TypeToResolve->getDescription());
    TypeToResolve->refineAbstractTypeTo(Ty);
  }

  return Ty;
}

//===----------------------------------------------------------------------===//
//            RunVMAsmParser - Define an interface to this parser
//===----------------------------------------------------------------------===//
//
static Module* RunParser(Module * M);

Module *llvm::RunVMAsmParser(const std::string &Filename, FILE *F) {
  set_scan_file(F);

  CurFilename = Filename;
  return RunParser(new Module(CurFilename));
}

Module *llvm::RunVMAsmParser(const char * AsmString, Module * M) {
  set_scan_string(AsmString);

  CurFilename = "from_memory";
  if (M == NULL) {
    return RunParser(new Module (CurFilename));
  } else {
    return RunParser(M);
  }
}


#line 886 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
typedef union {
  llvm::Module                           *ModuleVal;
  llvm::Function                         *FunctionVal;
  llvm::BasicBlock                       *BasicBlockVal;
  llvm::TerminatorInst                   *TermInstVal;
  llvm::Instruction                      *InstVal;
  llvm::Constant                         *ConstVal;

  const llvm::Type                       *PrimType;
  std::list<llvm::PATypeHolder>          *TypeList;
  llvm::PATypeHolder                     *TypeVal;
  llvm::Value                            *ValueVal;
  std::vector<llvm::Value*>              *ValueList;
  llvm::ArgListType                      *ArgList;
  llvm::TypeWithAttrs                     TypeWithAttrs;
  llvm::TypeWithAttrsList                *TypeWithAttrsList;
  llvm::ValueRefList                     *ValueRefList;

  // Represent the RHS of PHI node
  std::list<std::pair<llvm::Value*,
                      llvm::BasicBlock*> > *PHIList;
  std::vector<std::pair<llvm::Constant*, llvm::BasicBlock*> > *JumpTable;
  std::vector<llvm::Constant*>           *ConstVector;

  llvm::GlobalValue::LinkageTypes         Linkage;
  llvm::GlobalValue::VisibilityTypes      Visibility;
  llvm::FunctionType::ParameterAttributes ParamAttrs;
  int64_t                           SInt64Val;
  uint64_t                          UInt64Val;
  int                               SIntVal;
  unsigned                          UIntVal;
  double                            FPVal;
  bool                              BoolVal;

  char                             *StrVal;   // This memory is strdup'd!
  llvm::ValID                       ValIDVal; // strdup'd memory maybe!

  llvm::Instruction::BinaryOps      BinaryOpVal;
  llvm::Instruction::TermOps        TermOpVal;
  llvm::Instruction::MemoryOps      MemOpVal;
  llvm::Instruction::CastOps        CastOpVal;
  llvm::Instruction::OtherOps       OtherOpVal;
  llvm::ICmpInst::Predicate         IPredicate;
  llvm::FCmpInst::Predicate         FPredicate;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		567
#define	YYFLAG		-32768
#define	YYNTBASE	146

#define YYTRANSLATE(x) ((unsigned)(x) <= 385 ? yytranslate[x] : 224)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   136,
   137,   134,     2,   133,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   141,
   132,   142,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   138,   135,   140,     2,     2,     2,     2,     2,   145,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   139,
     2,     2,   143,     2,   144,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    22,    24,    26,    28,    30,    32,    34,    36,    38,
    40,    42,    44,    46,    48,    50,    52,    54,    56,    58,
    60,    62,    64,    66,    68,    70,    72,    74,    76,    78,
    80,    82,    84,    86,    88,    90,    92,    94,    96,    98,
   100,   102,   104,   106,   108,   110,   112,   114,   116,   118,
   119,   122,   123,   125,   127,   130,   131,   133,   135,   137,
   139,   141,   143,   145,   147,   148,   150,   151,   153,   155,
   156,   158,   160,   162,   164,   165,   167,   169,   171,   173,
   175,   178,   180,   182,   184,   186,   187,   190,   192,   194,
   195,   198,   199,   202,   203,   207,   210,   211,   213,   214,
   218,   220,   223,   225,   227,   229,   231,   233,   235,   238,
   240,   243,   249,   255,   261,   267,   271,   274,   280,   285,
   288,   290,   292,   294,   298,   300,   304,   306,   307,   309,
   313,   318,   322,   326,   331,   336,   340,   347,   353,   356,
   359,   362,   365,   368,   371,   374,   377,   380,   383,   390,
   396,   405,   412,   419,   427,   435,   442,   449,   458,   467,
   471,   473,   475,   477,   479,   480,   482,   485,   486,   490,
   491,   495,   499,   501,   505,   509,   510,   517,   518,   526,
   527,   535,   538,   542,   544,   548,   552,   556,   560,   562,
   563,   569,   573,   575,   579,   581,   582,   592,   594,   596,
   601,   603,   605,   608,   612,   613,   615,   617,   619,   621,
   623,   625,   627,   629,   631,   635,   637,   643,   645,   647,
   649,   651,   653,   655,   658,   661,   664,   668,   671,   672,
   674,   677,   680,   684,   694,   704,   713,   728,   730,   732,
   739,   745,   748,   755,   763,   767,   773,   774,   775,   779,
   782,   784,   790,   796,   803,   810,   815,   820,   827,   832,
   837,   844,   851,   854,   863,   865,   867,   868,   872,   879,
   883,   890,   893,   898,   905
};

static const short yyrhs[] = {    66,
     0,    67,     0,    68,     0,    69,     0,    70,     0,    71,
     0,    72,     0,    73,     0,    74,     0,    75,     0,    76,
     0,    77,     0,   106,     0,   107,     0,   108,     0,   109,
     0,   110,     0,   111,     0,   112,     0,   113,     0,   114,
     0,   115,     0,   116,     0,   117,     0,   120,     0,   121,
     0,   122,     0,    80,     0,    81,     0,    82,     0,    83,
     0,    84,     0,    85,     0,    86,     0,    87,     0,    88,
     0,    89,     0,    90,     0,    91,     0,    92,     0,    93,
     0,    94,     0,    95,     0,    96,     0,    97,     0,    98,
     0,    99,     0,    86,     0,    87,     0,    88,     0,    89,
     0,    21,     0,    22,     0,     9,     0,    10,     0,    11,
     0,    14,     0,    17,     0,   154,     0,     0,   154,   132,
     0,     0,    15,     0,    18,     0,   157,   132,     0,     0,
    35,     0,    37,     0,    36,     0,    38,     0,    40,     0,
    39,     0,    41,     0,    43,     0,     0,   131,     0,     0,
    39,     0,    41,     0,     0,    35,     0,    36,     0,    37,
     0,    40,     0,     0,    54,     0,    55,     0,    56,     0,
    57,     0,    58,     0,    53,     4,     0,   107,     0,   108,
     0,   128,     0,   129,     0,     0,   166,   165,     0,   127,
     0,   165,     0,     0,   168,   167,     0,     0,    46,     4,
     0,     0,   133,    46,     4,     0,    29,    17,     0,     0,
   171,     0,     0,   133,   174,   173,     0,   171,     0,    46,
     4,     0,     9,     0,    10,     0,    11,     0,    12,     0,
    42,     0,   175,     0,   176,   134,     0,   208,     0,   135,
     4,     0,   176,   136,   180,   137,   168,     0,     8,   136,
   180,   137,   168,     0,   138,     4,   139,   176,   140,     0,
   141,     4,   139,   176,   142,     0,   143,   181,   144,     0,
   143,   144,     0,   141,   143,   181,   144,   142,     0,   141,
   143,   144,   142,     0,   176,   166,     0,   176,     0,     8,
     0,   177,     0,   179,   133,   177,     0,   179,     0,   179,
   133,    32,     0,    32,     0,     0,   176,     0,   181,   133,
   176,     0,   176,   138,   184,   140,     0,   176,   138,   140,
     0,   176,   145,    17,     0,   176,   141,   184,   142,     0,
   176,   143,   184,   144,     0,   176,   143,   144,     0,   176,
   141,   143,   184,   144,   142,     0,   176,   141,   143,   144,
   142,     0,   176,    33,     0,   176,    34,     0,   176,   208,
     0,   176,   183,     0,   176,    20,     0,   152,     3,     0,
   152,     4,     0,     9,    21,     0,     9,    22,     0,   153,
     7,     0,   148,   136,   182,    31,   176,   137,     0,   105,
   136,   182,   219,   137,     0,   119,   136,   182,   133,   182,
   133,   182,   137,     0,   146,   136,   182,   133,   182,   137,
     0,   147,   136,   182,   133,   182,   137,     0,    78,   150,
   136,   182,   133,   182,   137,     0,    79,   151,   136,   182,
   133,   182,   137,     0,   149,   136,   182,   133,   182,   137,
     0,   124,   136,   182,   133,   182,   137,     0,   125,   136,
   182,   133,   182,   133,   182,   137,     0,   126,   136,   182,
   133,   182,   133,   182,   137,     0,   184,   133,   182,     0,
   182,     0,    27,     0,    28,     0,   187,     0,     0,   188,
     0,   187,   188,     0,     0,    26,   189,   204,     0,     0,
    25,   190,   205,     0,    51,    50,   194,     0,    19,     0,
   156,    13,   176,     0,   156,    13,     8,     0,     0,   158,
   161,   185,   182,   191,   173,     0,     0,   158,   159,   161,
   185,   182,   192,   173,     0,     0,   158,   160,   161,   185,
   176,   193,   173,     0,    44,   195,     0,    47,   132,   196,
     0,    17,     0,    45,   132,    17,     0,    59,   132,    17,
     0,   138,   197,   140,     0,   197,   133,    17,     0,    17,
     0,     0,   198,   133,   176,   166,   155,     0,   176,   166,
   155,     0,   198,     0,   198,   133,    32,     0,    32,     0,
     0,   164,   178,   157,   136,   199,   137,   168,   172,   169,
     0,    23,     0,   143,     0,   163,   161,   200,   201,     0,
    24,     0,   144,     0,   211,   203,     0,   162,   161,   200,
     0,     0,    52,     0,     3,     0,     4,     0,     7,     0,
    21,     0,    22,     0,    33,     0,    34,     0,    20,     0,
   141,   184,   142,     0,   183,     0,    50,   206,    17,   133,
    17,     0,     5,     0,     6,     0,   154,     0,   157,     0,
   208,     0,   207,     0,   176,   209,     0,   211,   212,     0,
   202,   212,     0,   213,   156,   214,     0,   213,   216,     0,
     0,    16,     0,    60,   210,     0,    60,     8,     0,    61,
    12,   209,     0,    61,     9,   209,   133,    12,   209,   133,
    12,   209,     0,    62,   152,   209,   133,    12,   209,   138,
   215,   140,     0,    62,   152,   209,   133,    12,   209,   138,
   140,     0,    63,   164,   178,   209,   136,   218,   137,   168,
    31,    12,   209,    64,    12,   209,     0,    64,     0,    65,
     0,   215,   152,   207,   133,    12,   209,     0,   152,   207,
   133,    12,   209,     0,   156,   221,     0,   176,   138,   209,
   133,   209,   140,     0,   217,   133,   138,   209,   133,   209,
   140,     0,   176,   209,   166,     0,   218,   133,   176,   209,
   166,     0,     0,     0,   219,   133,   210,     0,    49,    48,
     0,    48,     0,   146,   176,   209,   133,   209,     0,   147,
   176,   209,   133,   209,     0,    78,   150,   176,   209,   133,
   209,     0,    79,   151,   176,   209,   133,   209,     0,   149,
   210,   133,   210,     0,   148,   210,    31,   176,     0,   119,
   210,   133,   210,   133,   210,     0,   123,   210,   133,   176,
     0,   124,   210,   133,   210,     0,   125,   210,   133,   210,
   133,   210,     0,   126,   210,   133,   210,   133,   210,     0,
   118,   217,     0,   220,   164,   178,   209,   136,   218,   137,
   168,     0,   223,     0,    30,     0,     0,   100,   176,   170,
     0,   100,   176,   133,     9,   209,   170,     0,   101,   176,
   170,     0,   101,   176,   133,     9,   209,   170,     0,   102,
   210,     0,   222,   103,   176,   209,     0,   222,   104,   210,
   133,   176,   209,     0,   105,   176,   209,   219,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1033,
  1033,  1033,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1035,
  1035,  1035,  1035,  1035,  1036,  1036,  1036,  1038,  1038,  1039,
  1039,  1040,  1040,  1041,  1041,  1042,  1042,  1046,  1046,  1047,
  1047,  1048,  1048,  1049,  1049,  1050,  1050,  1051,  1051,  1052,
  1052,  1053,  1054,  1059,  1060,  1060,  1062,  1062,  1063,  1063,
  1067,  1071,  1076,  1076,  1078,  1082,  1088,  1089,  1090,  1091,
  1092,  1096,  1097,  1098,  1102,  1103,  1107,  1108,  1109,  1113,
  1114,  1115,  1116,  1117,  1120,  1120,  1121,  1122,  1123,  1124,
  1125,  1133,  1134,  1135,  1136,  1139,  1140,  1145,  1146,  1149,
  1150,  1157,  1157,  1164,  1164,  1173,  1181,  1181,  1187,  1187,
  1189,  1194,  1207,  1207,  1207,  1207,  1210,  1214,  1218,  1225,
  1230,  1238,  1256,  1274,  1279,  1291,  1301,  1305,  1315,  1322,
  1329,  1336,  1341,  1346,  1353,  1354,  1361,  1368,  1376,  1381,
  1392,  1420,  1436,  1465,  1493,  1518,  1537,  1562,  1581,  1593,
  1600,  1666,  1676,  1686,  1692,  1698,  1703,  1708,  1716,  1728,
  1749,  1757,  1763,  1774,  1779,  1784,  1793,  1799,  1805,  1814,
  1818,  1826,  1826,  1837,  1842,  1850,  1851,  1855,  1855,  1859,
  1859,  1862,  1865,  1877,  1901,  1912,  1919,  1922,  1927,  1930,
  1936,  1940,  1943,  1949,  1962,  1966,  1971,  1973,  1978,  1983,
  1992,  2002,  2013,  2017,  2026,  2035,  2040,  2146,  2146,  2148,
  2157,  2157,  2159,  2164,  2176,  2180,  2185,  2189,  2193,  2197,
  2201,  2205,  2209,  2213,  2217,  2242,  2246,  2260,  2264,  2268,
  2272,  2278,  2278,  2284,  2293,  2297,  2306,  2317,  2326,  2338,
  2351,  2355,  2359,  2364,  2374,  2393,  2402,  2469,  2473,  2480,
  2491,  2504,  2513,  2524,  2534,  2542,  2550,  2553,  2554,  2561,
  2565,  2570,  2591,  2608,  2621,  2634,  2643,  2655,  2663,  2670,
  2676,  2682,  2688,  2703,  2767,  2772,  2776,  2783,  2790,  2798,
  2805,  2813,  2821,  2835,  2852
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","ESINT64VAL",
"EUINT64VAL","LOCALVAL_ID","GLOBALVAL_ID","FPVAL","VOID","INTTYPE","FLOAT","DOUBLE",
"LABEL","TYPE","LOCALVAR","GLOBALVAR","LABELSTR","STRINGCONSTANT","ATSTRINGCONSTANT",
"IMPLEMENTATION","ZEROINITIALIZER","TRUETOK","FALSETOK","BEGINTOK","ENDTOK",
"DECLARE","DEFINE","GLOBAL","CONSTANT","SECTION","VOLATILE","TO","DOTDOTDOT",
"NULL_TOK","UNDEF","INTERNAL","LINKONCE","WEAK","APPENDING","DLLIMPORT","DLLEXPORT",
"EXTERN_WEAK","OPAQUE","EXTERNAL","TARGET","TRIPLE","ALIGN","DEPLIBS","CALL",
"TAIL","ASM_TOK","MODULE","SIDEEFFECT","CC_TOK","CCC_TOK","FASTCC_TOK","COLDCC_TOK",
"X86_STDCALLCC_TOK","X86_FASTCALLCC_TOK","DATALAYOUT","RET","BR","SWITCH","INVOKE",
"UNWIND","UNREACHABLE","ADD","SUB","MUL","UDIV","SDIV","FDIV","UREM","SREM",
"FREM","AND","OR","XOR","ICMP","FCMP","EQ","NE","SLT","SGT","SLE","SGE","ULT",
"UGT","ULE","UGE","OEQ","ONE","OLT","OGT","OLE","OGE","ORD","UNO","UEQ","UNE",
"MALLOC","ALLOCA","FREE","LOAD","STORE","GETELEMENTPTR","TRUNC","ZEXT","SEXT",
"FPTRUNC","FPEXT","BITCAST","UITOFP","SITOFP","FPTOUI","FPTOSI","INTTOPTR","PTRTOINT",
"PHI_TOK","SELECT","SHL","LSHR","ASHR","VAARG","EXTRACTELEMENT","INSERTELEMENT",
"SHUFFLEVECTOR","NORETURN","INREG","SRET","DEFAULT","HIDDEN","'='","','","'*'",
"'\\\\'","'('","')'","'['","'x'","']'","'<'","'>'","'{'","'}'","'c'","ArithmeticOps",
"LogicalOps","CastOps","ShiftOps","IPredicates","FPredicates","IntType","FPType",
"LocalName","OptLocalName","OptLocalAssign","GlobalName","OptGlobalAssign","GVInternalLinkage",
"GVExternalLinkage","GVVisibilityStyle","FunctionDeclareLinkage","FunctionDefineLinkage",
"OptCallingConv","ParamAttr","OptParamAttrs","FuncAttr","OptFuncAttrs","OptAlign",
"OptCAlign","SectionString","OptSection","GlobalVarAttributes","GlobalVarAttribute",
"PrimType","Types","ArgType","ResultTypes","ArgTypeList","ArgTypeListI","TypeListI",
"ConstVal","ConstExpr","ConstVector","GlobalType","Module","DefinitionList",
"Definition","@1","@2","@3","@4","@5","AsmBlock","TargetDefinition","LibrariesDefinition",
"LibList","ArgListH","ArgList","FunctionHeaderH","BEGIN","FunctionHeader","END",
"Function","FunctionProto","OptSideEffect","ConstValueRef","SymbolicValueRef",
"ValueRef","ResolvedVal","BasicBlockList","BasicBlock","InstructionList","BBTerminatorInst",
"JumpTable","Inst","PHIList","ValueRefList","IndexList","OptTailCall","InstVal",
"OptVolatile","MemoryInst", NULL
};
#endif

static const short yyr1[] = {     0,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   147,
   147,   147,   148,   148,   148,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   149,   149,   149,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   152,   153,   153,   154,   154,   155,   155,
   156,   156,   157,   157,   158,   158,   159,   159,   159,   159,
   159,   160,   160,   160,   161,   161,   162,   162,   162,   163,
   163,   163,   163,   163,   164,   164,   164,   164,   164,   164,
   164,   165,   165,   165,   165,   166,   166,   167,   167,   168,
   168,   169,   169,   170,   170,   171,   172,   172,   173,   173,
   174,   174,   175,   175,   175,   175,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   176,   176,   176,   177,
   178,   178,   179,   179,   180,   180,   180,   180,   181,   181,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   184,
   184,   185,   185,   186,   186,   187,   187,   189,   188,   190,
   188,   188,   188,   188,   188,   191,   188,   192,   188,   193,
   188,   188,   188,   194,   195,   195,   196,   197,   197,   197,
   198,   198,   199,   199,   199,   199,   200,   201,   201,   202,
   203,   203,   204,   205,   206,   206,   207,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   208,   208,   208,
   208,   209,   209,   210,   211,   211,   212,   213,   213,   213,
   214,   214,   214,   214,   214,   214,   214,   214,   214,   215,
   215,   216,   217,   217,   218,   218,   218,   219,   219,   220,
   220,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   222,   222,   223,   223,   223,
   223,   223,   223,   223,   223
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     2,     0,     1,     1,     2,     0,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     1,     0,     1,     1,     0,
     1,     1,     1,     1,     0,     1,     1,     1,     1,     1,
     2,     1,     1,     1,     1,     0,     2,     1,     1,     0,
     2,     0,     2,     0,     3,     2,     0,     1,     0,     3,
     1,     2,     1,     1,     1,     1,     1,     1,     2,     1,
     2,     5,     5,     5,     5,     3,     2,     5,     4,     2,
     1,     1,     1,     3,     1,     3,     1,     0,     1,     3,
     4,     3,     3,     4,     4,     3,     6,     5,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     6,     5,
     8,     6,     6,     7,     7,     6,     6,     8,     8,     3,
     1,     1,     1,     1,     0,     1,     2,     0,     3,     0,
     3,     3,     1,     3,     3,     0,     6,     0,     7,     0,
     7,     2,     3,     1,     3,     3,     3,     3,     1,     0,
     5,     3,     1,     3,     1,     0,     9,     1,     1,     4,
     1,     1,     2,     3,     0,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     1,     5,     1,     1,     1,
     1,     1,     1,     2,     2,     2,     3,     2,     0,     1,
     2,     2,     3,     9,     9,     8,    14,     1,     1,     6,
     5,     2,     6,     7,     3,     5,     0,     0,     3,     2,
     1,     5,     5,     6,     6,     4,     4,     6,     4,     4,
     6,     6,     2,     8,     1,     1,     0,     3,     6,     3,
     6,     2,     4,     6,     4
};

static const short yydefact[] = {    66,
    57,    63,    58,    64,   183,   180,   178,     0,     0,     0,
     0,     0,     0,    75,    66,   176,    77,    80,     0,     0,
   192,     0,     0,    61,     0,    65,    67,    69,    68,    70,
    72,    71,    73,    74,    76,    75,    75,     0,   177,    78,
    79,    75,   181,    81,    82,    83,    84,    75,   239,   179,
   239,     0,     0,   200,   193,   194,   182,   228,   229,   185,
   113,   114,   115,   116,   117,     0,     0,     0,     0,   230,
   231,   118,   184,   120,     0,     0,   172,   173,     0,    85,
    85,   240,   236,    62,   211,   212,   213,   235,   195,   196,
   199,     0,   138,   121,     0,     0,     0,     0,   127,   139,
     0,   119,   138,     0,     0,   113,   114,   115,     0,     0,
     0,   186,     0,    86,    87,    88,    89,    90,     0,   214,
     0,   277,   238,     0,   197,   137,    96,   133,   135,     0,
     0,     0,     0,     0,     0,   126,     0,   188,   190,   156,
   157,   154,   155,   158,   153,   149,   150,     1,     2,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,     0,
     0,     0,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,     0,    25,    26,    27,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   152,
   151,   109,    91,   132,   131,     0,   208,   209,   210,   276,
   261,     0,     0,     0,     0,    85,   248,   249,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   237,    85,   252,     0,   275,   198,
   130,     0,   100,     0,     0,   129,     0,   140,   100,   109,
   109,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,     0,    52,    53,    48,    49,    50,    51,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,     0,     0,
     0,     0,     0,     0,   142,   171,     0,     0,     0,   146,
     0,   143,     0,     0,     0,     0,     0,   187,     0,   260,
   242,     0,   241,     0,     0,    54,     0,     0,     0,     0,
   104,   104,   282,     0,     0,   273,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
    94,    95,    97,   136,   134,   123,   124,   125,   128,   122,
   189,   191,     0,     0,   258,     0,     0,     0,     0,     0,
   141,   127,   139,     0,   144,   145,     0,     0,     0,     0,
     0,     0,   111,   109,   206,   217,   218,   219,   224,   220,
   221,   222,   223,   215,     0,   226,   233,   232,   234,     0,
   243,     0,     0,     0,     0,     0,   278,     0,   280,   258,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    98,    99,   101,     0,     0,     0,
     0,     0,     0,     0,   170,   148,     0,     0,     0,     0,
     0,   106,   112,   110,   205,    96,   203,     0,   216,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   285,
     0,     0,     0,   269,   270,     0,     0,     0,     0,   267,
   266,     0,   283,     0,     0,     0,     0,   160,     0,     0,
     0,     0,   147,     0,     0,     0,     0,    60,     0,   100,
     0,   225,     0,     0,   257,     0,     0,   104,   105,   104,
     0,     0,     0,     0,     0,   262,   263,   257,     0,     0,
     0,   259,     0,   167,     0,     0,   162,   163,   159,   166,
    59,   202,   204,    96,   107,     0,     0,     0,     0,     0,
   264,   265,     0,   279,   281,     0,     0,   268,   271,   272,
     0,   284,   164,   165,     0,     0,     0,    60,   108,   102,
   227,     0,     0,    96,     0,   100,   253,     0,   100,   161,
   168,   169,   201,     0,   207,     0,   246,     0,     0,   255,
     0,     0,   254,   274,   103,   244,     0,   245,     0,    96,
     0,     0,     0,   256,     0,     0,     0,     0,   251,     0,
     0,   250,     0,   247,     0,     0,     0
};

static const short yydefgoto[] = {   186,
   187,   188,   189,   252,   269,   109,   110,    70,   492,    12,
    71,    14,    36,    37,    38,    42,    48,   119,   323,   231,
   397,   326,   535,   377,   353,   520,   288,   354,    72,   111,
   128,   196,   129,   130,   101,   276,   366,   277,    79,   565,
    15,    16,    18,    17,   192,   240,   241,    57,    21,    55,
    92,   417,   418,   120,   199,    49,    87,    50,    43,   420,
   367,    74,   369,   293,    51,    83,    84,   225,   539,   123,
   306,   500,   400,   226,   227,   228,   229
};

static const short yypact[] = {   356,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,     4,  -115,    -2,
   -52,    93,    -4,    51,   593,-32768,   195,   140,    41,    99,
-32768,    87,   141,-32768,   125,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   128,   128,    47,-32768,-32768,
-32768,   128,-32768,-32768,-32768,-32768,-32768,   128,   251,-32768,
    17,   262,   264,   269,-32768,-32768,-32768,-32768,-32768,   151,
-32768,-32768,-32768,-32768,-32768,   287,   292,     3,    13,-32768,
-32768,-32768,   113,-32768,    47,    47,-32768,-32768,   840,   290,
   290,-32768,-32768,    88,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -90,  1094,-32768,   158,   164,   107,   151,-32768,   113,
   -91,-32768,  1094,   840,  1054,    79,   295,   297,   208,   298,
   616,-32768,   302,-32768,-32768,-32768,-32768,-32768,  1197,-32768,
   -14,  1319,-32768,   291,-32768,-32768,   113,-32768,   179,   176,
  1054,  1054,   175,   -82,  1054,-32768,   200,-32768,   113,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   241,
   474,   202,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   205,-32768,-32768,-32768,   213,   214,
   215,   802,  1213,   460,   335,   218,   221,   232,   236,-32768,
-32768,   245,-32768,   151,   113,   163,-32768,-32768,-32768,-32768,
-32768,   331,  1235,   210,   371,   290,-32768,-32768,   241,   474,
  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,  1054,
  1054,  1054,  1054,  1054,-32768,   290,-32768,   181,-32768,-32768,
   -61,  1133,-32768,    26,   -64,-32768,   242,   113,-32768,   245,
   245,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   247,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   249,   840,
   840,   840,   840,   840,-32768,-32768,   -30,   517,   -10,-32768,
   -40,-32768,   840,   840,   840,   840,    10,-32768,   252,-32768,
   151,   759,-32768,   884,   884,-32768,   884,  1197,  1054,  1054,
    19,   144,-32768,   759,   119,   254,   258,   261,   263,   265,
   266,   759,   759,   364,   268,  1197,  1054,  1054,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -31,-32768,-32768,-32768,   -31,
-32768,-32768,   840,   840,-32768,   271,   273,   275,   276,   840,
-32768,   260,   616,    -6,-32768,-32768,   277,   278,   387,   286,
   404,   420,-32768,   245,  1149,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   374,   840,-32768,-32768,-32768,-32768,   294,
-32768,   296,   884,   759,   759,    20,-32768,    25,-32768,-32768,
   884,   299,  1054,  1054,  1054,  1054,  1054,   301,   303,  1054,
  1054,   884,   759,   305,-32768,-32768,-32768,   306,   307,    32,
   840,   840,   840,   840,-32768,-32768,   300,   840,   840,  1054,
   840,-32768,-32768,-32768,-32768,   113,   310,   308,-32768,   411,
     8,   432,   434,   311,   315,   319,   884,   428,   884,   320,
   322,   884,   323,   113,-32768,   324,   326,   884,   884,   113,
-32768,   325,-32768,  1054,   840,   840,  1054,-32768,   327,   336,
   330,   343,-32768,   342,   346,   136,   347,   154,  1168,-32768,
   352,-32768,   884,   884,  1054,   884,   884,   354,-32768,   354,
   884,   355,  1054,  1054,  1054,-32768,-32768,  1054,   759,   353,
   357,-32768,   840,-32768,   840,   840,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   113,    56,   447,   365,   359,   759,    73,
-32768,-32768,   454,-32768,-32768,   340,   884,-32768,-32768,-32768,
   100,-32768,-32768,-32768,   366,   367,   368,   154,-32768,   461,
-32768,   494,     5,-32768,  1054,-32768,-32768,   369,-32768,-32768,
-32768,-32768,-32768,   504,-32768,   884,-32768,  1008,     7,   -61,
   759,   182,-32768,   -31,-32768,-32768,   379,-32768,  1008,-32768,
   501,   502,   382,   -61,   884,   884,   505,   452,-32768,   884,
   507,-32768,   884,-32768,   520,   521,-32768
};

static const short yypgoto[] = {   402,
   408,   414,   415,   329,   332,  -203,-32768,     0,    15,   455,
    11,-32768,-32768,-32768,   204,-32768,-32768,  -174,  -286,  -380,
-32768,  -231,-32768,  -296,    45,-32768,  -228,-32768,-32768,   -24,
   309,  -278,-32768,   440,   449,   -69,  -108,  -179,   168,-32768,
-32768,   529,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   467,-32768,-32768,-32768,-32768,-32768,-32768,
  -429,   -74,   118,  -159,-32768,   498,-32768,-32768,-32768,-32768,
-32768,    74,   171,-32768,-32768,-32768,-32768
};


#define	YYLAST		1445


static const short yytable[] = {    11,
    73,   297,   190,   279,   281,   379,    96,   330,   197,   112,
    13,   331,   332,   296,    11,   296,    22,    58,    59,   373,
    98,    61,    62,    63,    64,    13,     1,     2,   427,     3,
     4,   298,    82,   429,   138,   458,   191,   392,   351,   396,
    85,   135,   124,   396,   100,   319,   320,    23,    19,   125,
   135,   316,   136,   303,    65,   352,   307,   308,   309,   310,
   311,   237,    20,   314,   315,   428,   321,   322,   127,   102,
   428,   103,   100,    77,    78,   319,   320,   328,   127,    24,
   139,   -54,   -54,    11,   351,    27,    28,    29,    30,    31,
    32,    33,   340,    34,   195,   395,   321,   322,   344,   140,
   141,     1,   340,   346,     3,    25,   234,   235,   547,   341,
   238,    58,    59,   518,    98,    61,    62,    63,    64,   553,
     1,     2,   340,     3,     4,   414,   340,    26,   198,    58,
    59,   345,    60,    61,    62,    63,    64,   407,     1,     2,
   340,     3,     4,   540,   537,    97,   548,    66,    65,   462,
    67,   376,   102,    68,   103,    69,    99,    56,   394,   102,
    86,   103,   319,   320,   447,   327,    65,     1,   448,   554,
     3,   504,    52,   505,    44,    45,    46,     2,   292,    47,
     4,    35,   395,   321,   322,   421,   301,   302,   292,   304,
   305,   292,   292,   292,   292,   292,   312,   313,   292,   292,
   335,   336,   337,   338,   339,   525,   289,   127,   396,   526,
   142,   143,   551,   347,   348,   349,   350,   368,   294,   368,
   368,   295,   368,   433,    54,   435,   436,   437,   495,   368,
    53,   441,   525,    40,   190,    41,   529,   368,   368,    75,
    76,    66,   104,   105,    67,    80,   102,    68,   103,    69,
   133,    81,   102,   343,   103,   396,   381,   396,    35,    66,
   319,   320,    67,   398,   399,    68,    82,    69,   191,   102,
   405,   103,   489,   195,   374,   375,   378,   102,    89,   103,
    90,   321,   322,   317,   318,    91,    93,   482,   319,   320,
    94,   195,   393,   292,   542,    95,   131,   544,   368,   368,
   368,   -55,   132,   -56,   144,   193,   368,   230,   395,   321,
   322,   232,   233,   508,   509,   510,   236,   368,   368,   538,
   242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   416,   449,   450,   451,   452,   549,   239,   270,   454,   455,
   271,   457,   113,   114,   115,   116,   117,   118,   272,   273,
   274,   282,   368,   283,   368,  -175,   284,   368,   292,   434,
   292,   292,   292,   368,   368,   440,   292,   285,   -62,     1,
     2,   286,     3,     4,     5,   480,   481,   287,   290,   296,
     6,     7,   333,   329,   334,   456,   382,   355,   368,   368,
   383,   368,   368,   384,   390,   385,   368,   386,   387,     8,
   391,   406,     9,   401,   368,   402,    10,   403,   404,   408,
   409,   370,   371,   515,   372,   516,   517,   410,   411,   479,
   412,   380,   292,   413,   368,   419,   422,   461,   423,   388,
   389,   469,   368,   438,   494,   439,   432,   444,   445,   446,
   499,   453,   459,   463,   460,   464,   465,   466,   292,   292,
   292,   467,   447,   499,   471,   473,   474,   491,   475,   483,
   478,   368,   485,   521,    58,    59,   368,    98,   106,   107,
   108,    64,   484,     1,     2,   486,     3,     4,   487,   527,
   368,   368,   488,   490,   496,   368,   503,   507,   368,   513,
   424,   425,   426,   514,   253,   254,   523,   522,   431,   428,
   541,    65,   530,   531,   532,   536,   534,   545,   543,   442,
   443,   552,   555,   556,   557,   561,   560,   491,   563,   566,
   567,    58,    59,   221,    98,   106,   107,   108,    64,   222,
     1,     2,   533,     3,     4,   223,   224,   299,   122,   519,
   325,   300,   137,    39,   468,   134,   470,   121,    88,   472,
   430,   511,     0,     0,     0,   476,   477,     0,    65,   255,
   256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,     0,     0,     0,     0,     0,     0,     0,
   497,   498,     0,   501,   502,     0,     0,     0,   506,     0,
     0,     0,  -174,     0,    66,     0,   512,    67,     0,     0,
    68,     0,    69,   280,     0,   -62,     1,     2,     0,     3,
     4,     5,     0,     0,     0,     0,   524,     6,     7,     0,
    58,    59,     0,     0,   528,     0,     0,     0,     0,     1,
     2,     0,     3,     4,     0,   145,     8,     0,     0,     9,
     0,     0,     0,    10,     0,     0,     0,     0,   146,   147,
     0,    66,     0,   546,    67,     0,     0,    68,   550,    69,
   342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   558,   559,     0,     0,     0,   562,     0,     0,
   564,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,     0,   175,   176,   177,   178,     0,   179,
   180,   181,     0,     0,     0,     0,     0,     0,     0,   102,
     0,   103,     0,   182,     0,     0,   183,     0,   184,     0,
   185,   356,   357,    58,    59,   358,     0,     0,     0,     0,
     0,     0,     1,     2,     0,     3,     4,     0,   359,   360,
   361,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   362,   363,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    58,    59,   364,    98,
   106,   107,   108,    64,     0,     1,     2,     0,     3,     4,
     0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,     0,     0,
     0,     0,     0,    65,    58,    59,     0,    98,   106,   107,
   108,    64,     0,     1,     2,     0,     3,     4,     0,     0,
     0,     0,     0,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
   178,    65,   179,   180,   181,     0,   356,   357,    58,    59,
   358,     0,   102,     0,   103,     0,     0,     1,     2,   365,
     3,     4,     0,   359,   360,   361,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   362,   363,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   364,     0,     0,    66,     0,     0,    67,
     0,   275,    68,     0,    69,     0,     0,     0,     0,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    66,     0,     0,    67,     0,     0,
    68,     0,    69,     0,     0,     0,     0,     0,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,     0,   175,   176,   177,   178,     0,   179,   180,   181,
   356,   357,     0,     0,   358,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   365,     0,     0,   359,   360,   361,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   362,   363,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   364,    58,    59,
     0,    98,    61,    62,    63,    64,     0,     1,     2,     0,
     3,     4,     0,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,     0,     0,     0,
     0,     0,     0,     0,     0,    65,     0,     0,    58,    59,
     0,    98,    61,    62,    63,    64,     0,     1,     2,     0,
     3,     4,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   126,   175,   176,   177,   178,
     0,   179,   180,   181,     0,    65,     0,    58,    59,     0,
    98,    61,    62,    63,    64,     0,     1,     2,   365,     3,
     4,     0,     0,    58,    59,     0,    98,    61,    62,    63,
    64,     0,     1,     2,   324,     3,     4,     0,     0,     0,
     0,     0,    58,    59,    65,    98,    61,    62,    63,    64,
   415,     1,     2,     0,     3,     4,     0,     0,    66,     0,
    65,    67,     0,     0,    68,     0,    69,     0,     0,   493,
     0,    58,    59,     0,   194,    61,    62,    63,    64,    65,
     1,     2,     0,     3,     4,     0,     0,    58,    59,     0,
    98,   106,   107,   108,    64,     0,     1,     2,    66,     3,
     4,    67,     0,     0,    68,     0,    69,     0,    65,    58,
    59,     0,   291,    61,    62,    63,    64,     0,     1,     2,
     0,     3,     4,     0,    65,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    66,     0,     0,
    67,     0,     0,    68,     0,    69,    65,     0,     0,     0,
     0,     0,     0,    66,     0,     0,    67,     0,     0,    68,
     0,    69,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    66,     0,     0,    67,     0,     0,    68,     0,
    69,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    66,     0,     0,    67,     0,     0,    68,     0,    69,
     0,     0,     0,     0,     0,     0,     0,    66,   200,     0,
    67,     0,     0,    68,     0,   278,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   201,   202,     0,    66,
     0,     0,    67,     0,     0,    68,     0,    69,   203,   204,
   205,   206,   207,   208,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   209,   210,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   211,   212,
   213,     0,     0,   214,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   215,   216,   176,   177,
   178,   217,   218,   219,   220
};

static const short yycheck[] = {     0,
    25,   205,   111,   183,   184,   302,     4,   239,    23,    79,
     0,   240,   241,     9,    15,     9,   132,     5,     6,   298,
     8,     9,    10,    11,    12,    15,    14,    15,     9,    17,
    18,   206,    16,     9,   104,   416,   111,   316,    29,   326,
    24,   133,   133,   330,    69,   107,   108,    50,    45,   140,
   133,   226,   144,   213,    42,    46,   216,   217,   218,   219,
   220,   144,    59,   223,   224,    46,   128,   129,    93,   134,
    46,   136,    97,    27,    28,   107,   108,   142,   103,   132,
   105,     3,     4,    84,    29,    35,    36,    37,    38,    39,
    40,    41,   133,    43,   119,   127,   128,   129,   278,    21,
    22,    14,   133,   144,    17,    13,   131,   132,   538,   140,
   135,     5,     6,   494,     8,     9,    10,    11,    12,   549,
    14,    15,   133,    17,    18,   354,   133,   132,   143,     5,
     6,   142,     8,     9,    10,    11,    12,   144,    14,    15,
   133,    17,    18,   524,   140,   143,   140,   135,    42,   142,
   138,   133,   134,   141,   136,   143,   144,    17,   318,   134,
   144,   136,   107,   108,   133,   140,    42,    14,   137,   550,
    17,   468,   132,   470,    35,    36,    37,    15,   203,    40,
    18,   131,   127,   128,   129,   365,   211,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   270,   271,   272,   273,   274,   133,   196,   232,   495,   137,
     3,     4,    31,   283,   284,   285,   286,   292,     9,   294,
   295,    12,   297,   383,   138,   385,   386,   387,   460,   304,
   132,   391,   133,    39,   343,    41,   137,   312,   313,    36,
    37,   135,    75,    76,   138,    42,   134,   141,   136,   143,
   144,    48,   134,   278,   136,   542,   138,   544,   131,   135,
   107,   108,   138,   333,   334,   141,    16,   143,   343,   134,
   340,   136,   137,   298,   299,   300,   133,   134,    17,   136,
    17,   128,   129,   103,   104,    17,   136,   447,   107,   108,
     4,   316,   317,   318,   526,     4,   139,   529,   373,   374,
   375,     7,   139,     7,     7,     4,   381,    17,   127,   128,
   129,   133,   137,   473,   474,   475,   142,   392,   393,   523,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
   355,   401,   402,   403,   404,   539,   137,   136,   408,   409,
   136,   411,    53,    54,    55,    56,    57,    58,   136,   136,
   136,    17,   427,   136,   429,     0,   136,   432,   383,   384,
   385,   386,   387,   438,   439,   390,   391,   136,    13,    14,
    15,   136,    17,    18,    19,   445,   446,   133,    48,     9,
    25,    26,   136,   142,   136,   410,   133,   136,   463,   464,
   133,   466,   467,   133,    31,   133,   471,   133,   133,    44,
   133,   142,    47,   133,   479,   133,    51,   133,   133,   133,
   133,   294,   295,   483,   297,   485,   486,    31,   133,   444,
    17,   304,   447,     4,   499,    52,   133,    17,   133,   312,
   313,     4,   507,   133,   459,   133,   138,   133,   133,   133,
   465,   142,   133,    12,   137,    12,   136,   133,   473,   474,
   475,   133,   133,   478,   133,   133,   133,   458,   133,   133,
   136,   536,   133,    17,     5,     6,   541,     8,     9,    10,
    11,    12,   137,    14,    15,   133,    17,    18,   137,   140,
   555,   556,   137,   137,   133,   560,   133,   133,   563,   137,
   373,   374,   375,   137,    21,    22,   138,   133,   381,    46,
   525,    42,   137,   137,   137,    12,    46,     4,   140,   392,
   393,   133,    12,    12,   133,    64,    12,   518,    12,     0,
     0,     5,     6,   122,     8,     9,    10,    11,    12,   122,
    14,    15,   518,    17,    18,   122,   122,   209,    84,   495,
   232,   210,   103,    15,   427,    97,   429,    81,    51,   432,
   380,   478,    -1,    -1,    -1,   438,   439,    -1,    42,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,    -1,
    -1,    -1,     0,    -1,   135,    -1,   479,   138,    -1,    -1,
   141,    -1,   143,   144,    -1,    13,    14,    15,    -1,    17,
    18,    19,    -1,    -1,    -1,    -1,   499,    25,    26,    -1,
     5,     6,    -1,    -1,   507,    -1,    -1,    -1,    -1,    14,
    15,    -1,    17,    18,    -1,    20,    44,    -1,    -1,    47,
    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    33,    34,
    -1,   135,    -1,   536,   138,    -1,    -1,   141,   541,   143,
   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   555,   556,    -1,    -1,    -1,   560,    -1,    -1,
   563,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,    -1,   119,   120,   121,   122,    -1,   124,
   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,    -1,
   145,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    14,    15,    -1,    17,    18,    -1,    20,    21,
    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,    50,     8,
     9,    10,    11,    12,    -1,    14,    15,    -1,    17,    18,
    -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
    -1,    -1,    -1,    42,     5,     6,    -1,     8,     9,    10,
    11,    12,    -1,    14,    15,    -1,    17,    18,    -1,    -1,
    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
   122,    42,   124,   125,   126,    -1,     3,     4,     5,     6,
     7,    -1,   134,    -1,   136,    -1,    -1,    14,    15,   141,
    17,    18,    -1,    20,    21,    22,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    50,    -1,    -1,   135,    -1,    -1,   138,
    -1,   140,   141,    -1,   143,    -1,    -1,    -1,    -1,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   135,    -1,    -1,   138,    -1,    -1,
   141,    -1,   143,    -1,    -1,    -1,    -1,    -1,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,    -1,   119,   120,   121,   122,    -1,   124,   125,   126,
     3,     4,    -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   141,    -1,    -1,    20,    21,    22,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,     5,     6,
    -1,     8,     9,    10,    11,    12,    -1,    14,    15,    -1,
    17,    18,    -1,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,     5,     6,
    -1,     8,     9,    10,    11,    12,    -1,    14,    15,    -1,
    17,    18,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,    32,   119,   120,   121,   122,
    -1,   124,   125,   126,    -1,    42,    -1,     5,     6,    -1,
     8,     9,    10,    11,    12,    -1,    14,    15,   141,    17,
    18,    -1,    -1,     5,     6,    -1,     8,     9,    10,    11,
    12,    -1,    14,    15,    32,    17,    18,    -1,    -1,    -1,
    -1,    -1,     5,     6,    42,     8,     9,    10,    11,    12,
    32,    14,    15,    -1,    17,    18,    -1,    -1,   135,    -1,
    42,   138,    -1,    -1,   141,    -1,   143,    -1,    -1,    32,
    -1,     5,     6,    -1,     8,     9,    10,    11,    12,    42,
    14,    15,    -1,    17,    18,    -1,    -1,     5,     6,    -1,
     8,     9,    10,    11,    12,    -1,    14,    15,   135,    17,
    18,   138,    -1,    -1,   141,    -1,   143,    -1,    42,     5,
     6,    -1,     8,     9,    10,    11,    12,    -1,    14,    15,
    -1,    17,    18,    -1,    42,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
   138,    -1,    -1,   141,    -1,   143,    42,    -1,    -1,    -1,
    -1,    -1,    -1,   135,    -1,    -1,   138,    -1,    -1,   141,
    -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   135,    -1,    -1,   138,    -1,    -1,   141,    -1,
   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   135,    -1,    -1,   138,    -1,    -1,   141,    -1,   143,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    30,    -1,
   138,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,   135,
    -1,    -1,   138,    -1,    -1,   141,    -1,   143,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,
   102,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 28:
#line 1038 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_EQ; ;
    break;}
case 29:
#line 1038 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_NE; ;
    break;}
case 30:
#line 1039 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_SLT; ;
    break;}
case 31:
#line 1039 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_SGT; ;
    break;}
case 32:
#line 1040 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_SLE; ;
    break;}
case 33:
#line 1040 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_SGE; ;
    break;}
case 34:
#line 1041 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_ULT; ;
    break;}
case 35:
#line 1041 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_UGT; ;
    break;}
case 36:
#line 1042 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_ULE; ;
    break;}
case 37:
#line 1042 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.IPredicate = ICmpInst::ICMP_UGE; ;
    break;}
case 38:
#line 1046 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OEQ; ;
    break;}
case 39:
#line 1046 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_ONE; ;
    break;}
case 40:
#line 1047 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OLT; ;
    break;}
case 41:
#line 1047 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OGT; ;
    break;}
case 42:
#line 1048 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OLE; ;
    break;}
case 43:
#line 1048 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_OGE; ;
    break;}
case 44:
#line 1049 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_ORD; ;
    break;}
case 45:
#line 1049 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UNO; ;
    break;}
case 46:
#line 1050 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UEQ; ;
    break;}
case 47:
#line 1050 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UNE; ;
    break;}
case 48:
#line 1051 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_ULT; ;
    break;}
case 49:
#line 1051 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UGT; ;
    break;}
case 50:
#line 1052 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_ULE; ;
    break;}
case 51:
#line 1052 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_UGE; ;
    break;}
case 52:
#line 1053 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_TRUE; ;
    break;}
case 53:
#line 1054 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.FPredicate = FCmpInst::FCMP_FALSE; ;
    break;}
case 60:
#line 1063 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.StrVal = 0; ;
    break;}
case 61:
#line 1067 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.StrVal = yyvsp[-1].StrVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 62:
#line 1071 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.StrVal = 0;
    CHECK_FOR_ERROR
  ;
    break;}
case 65:
#line 1078 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.StrVal = yyvsp[-1].StrVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 66:
#line 1082 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.StrVal = 0;
    CHECK_FOR_ERROR
  ;
    break;}
case 67:
#line 1088 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::InternalLinkage; ;
    break;}
case 68:
#line 1089 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::WeakLinkage; ;
    break;}
case 69:
#line 1090 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::LinkOnceLinkage; ;
    break;}
case 70:
#line 1091 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::AppendingLinkage; ;
    break;}
case 71:
#line 1092 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::DLLExportLinkage; ;
    break;}
case 72:
#line 1096 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::DLLImportLinkage; ;
    break;}
case 73:
#line 1097 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalWeakLinkage; ;
    break;}
case 74:
#line 1098 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalLinkage; ;
    break;}
case 75:
#line 1102 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Visibility = GlobalValue::DefaultVisibility; ;
    break;}
case 76:
#line 1103 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Visibility = GlobalValue::HiddenVisibility;  ;
    break;}
case 77:
#line 1107 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalLinkage; ;
    break;}
case 78:
#line 1108 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::DLLImportLinkage; ;
    break;}
case 79:
#line 1109 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalWeakLinkage; ;
    break;}
case 80:
#line 1113 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::ExternalLinkage; ;
    break;}
case 81:
#line 1114 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::InternalLinkage; ;
    break;}
case 82:
#line 1115 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::LinkOnceLinkage; ;
    break;}
case 83:
#line 1116 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::WeakLinkage; ;
    break;}
case 84:
#line 1117 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.Linkage = GlobalValue::DLLExportLinkage; ;
    break;}
case 85:
#line 1120 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::C; ;
    break;}
case 86:
#line 1121 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::C; ;
    break;}
case 87:
#line 1122 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::Fast; ;
    break;}
case 88:
#line 1123 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::Cold; ;
    break;}
case 89:
#line 1124 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::X86_StdCall; ;
    break;}
case 90:
#line 1125 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = CallingConv::X86_FastCall; ;
    break;}
case 91:
#line 1126 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
                   if ((unsigned)yyvsp[0].UInt64Val != yyvsp[0].UInt64Val)
                     GEN_ERROR("Calling conv too large!");
                   yyval.UIntVal = yyvsp[0].UInt64Val;
                  CHECK_FOR_ERROR
                 ;
    break;}
case 92:
#line 1133 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = FunctionType::ZExtAttribute;      ;
    break;}
case 93:
#line 1134 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = FunctionType::SExtAttribute;      ;
    break;}
case 94:
#line 1135 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = FunctionType::InRegAttribute;     ;
    break;}
case 95:
#line 1136 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = FunctionType::StructRetAttribute; ;
    break;}
case 96:
#line 1139 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = FunctionType::NoAttributeSet; ;
    break;}
case 97:
#line 1140 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
                yyval.ParamAttrs = FunctionType::ParameterAttributes(yyvsp[-1].ParamAttrs | yyvsp[0].ParamAttrs);
              ;
    break;}
case 98:
#line 1145 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = FunctionType::NoReturnAttribute; ;
    break;}
case 100:
#line 1149 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ParamAttrs = FunctionType::NoAttributeSet; ;
    break;}
case 101:
#line 1150 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
                yyval.ParamAttrs = FunctionType::ParameterAttributes(yyvsp[-1].ParamAttrs | yyvsp[0].ParamAttrs);
              ;
    break;}
case 102:
#line 1157 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = 0; ;
    break;}
case 103:
#line 1158 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  yyval.UIntVal = yyvsp[0].UInt64Val;
  if (yyval.UIntVal != 0 && !isPowerOf2_32(yyval.UIntVal))
    GEN_ERROR("Alignment must be a power of two!");
  CHECK_FOR_ERROR
;
    break;}
case 104:
#line 1164 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.UIntVal = 0; ;
    break;}
case 105:
#line 1165 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  yyval.UIntVal = yyvsp[0].UInt64Val;
  if (yyval.UIntVal != 0 && !isPowerOf2_32(yyval.UIntVal))
    GEN_ERROR("Alignment must be a power of two!");
  CHECK_FOR_ERROR
;
    break;}
case 106:
#line 1173 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  for (unsigned i = 0, e = strlen(yyvsp[0].StrVal); i != e; ++i)
    if (yyvsp[0].StrVal[i] == '"' || yyvsp[0].StrVal[i] == '\\')
      GEN_ERROR("Invalid character in section name!");
  yyval.StrVal = yyvsp[0].StrVal;
  CHECK_FOR_ERROR
;
    break;}
case 107:
#line 1181 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.StrVal = 0; ;
    break;}
case 108:
#line 1182 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.StrVal = yyvsp[0].StrVal; ;
    break;}
case 109:
#line 1187 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{;
    break;}
case 110:
#line 1188 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{;
    break;}
case 111:
#line 1189 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurGV->setSection(yyvsp[0].StrVal);
    free(yyvsp[0].StrVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 112:
#line 1194 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[0].UInt64Val != 0 && !isPowerOf2_32(yyvsp[0].UInt64Val))
      GEN_ERROR("Alignment must be a power of two!");
    CurGV->setAlignment(yyvsp[0].UInt64Val);
    CHECK_FOR_ERROR
  ;
    break;}
case 117:
#line 1210 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeVal = new PATypeHolder(OpaqueType::get());
    CHECK_FOR_ERROR
  ;
    break;}
case 118:
#line 1214 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeVal = new PATypeHolder(yyvsp[0].PrimType);
    CHECK_FOR_ERROR
  ;
    break;}
case 119:
#line 1218 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                             // Pointer type?
    if (*yyvsp[-1].TypeVal == Type::LabelTy)
      GEN_ERROR("Cannot form a pointer to a basic block");
    yyval.TypeVal = new PATypeHolder(HandleUpRefs(PointerType::get(*yyvsp[-1].TypeVal)));
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 120:
#line 1225 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{            // Named types are also simple types...
    const Type* tmp = getTypeVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.TypeVal = new PATypeHolder(tmp);
  ;
    break;}
case 121:
#line 1230 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                   // Type UpReference
    if (yyvsp[0].UInt64Val > (uint64_t)~0U) GEN_ERROR("Value out of range!");
    OpaqueType *OT = OpaqueType::get();        // Use temporary placeholder
    UpRefs.push_back(UpRefRecord((unsigned)yyvsp[0].UInt64Val, OT));  // Add to vector...
    yyval.TypeVal = new PATypeHolder(OT);
    UR_OUT("New Upreference!\n");
    CHECK_FOR_ERROR
  ;
    break;}
case 122:
#line 1238 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    std::vector<const Type*> Params;
    std::vector<FunctionType::ParameterAttributes> Attrs;
    Attrs.push_back(yyvsp[0].ParamAttrs);
    for (TypeWithAttrsList::iterator I=yyvsp[-2].TypeWithAttrsList->begin(), E=yyvsp[-2].TypeWithAttrsList->end(); I != E; ++I) {
      Params.push_back(I->Ty->get());
      if (I->Ty->get() != Type::VoidTy)
        Attrs.push_back(I->Attrs);
    }
    bool isVarArg = Params.size() && Params.back() == Type::VoidTy;
    if (isVarArg) Params.pop_back();

    FunctionType *FT = FunctionType::get(*yyvsp[-4].TypeVal, Params, isVarArg, Attrs);
    delete yyvsp[-2].TypeWithAttrsList;   // Delete the argument list
    delete yyvsp[-4].TypeVal;   // Delete the return type handle
    yyval.TypeVal = new PATypeHolder(HandleUpRefs(FT)); 
    CHECK_FOR_ERROR
  ;
    break;}
case 123:
#line 1256 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    std::vector<const Type*> Params;
    std::vector<FunctionType::ParameterAttributes> Attrs;
    Attrs.push_back(yyvsp[0].ParamAttrs);
    for (TypeWithAttrsList::iterator I=yyvsp[-2].TypeWithAttrsList->begin(), E=yyvsp[-2].TypeWithAttrsList->end(); I != E; ++I) {
      Params.push_back(I->Ty->get());
      if (I->Ty->get() != Type::VoidTy)
        Attrs.push_back(I->Attrs);
    }
    bool isVarArg = Params.size() && Params.back() == Type::VoidTy;
    if (isVarArg) Params.pop_back();

    FunctionType *FT = FunctionType::get(yyvsp[-4].PrimType, Params, isVarArg, Attrs);
    delete yyvsp[-2].TypeWithAttrsList;      // Delete the argument list
    yyval.TypeVal = new PATypeHolder(HandleUpRefs(FT)); 
    CHECK_FOR_ERROR
  ;
    break;}
case 124:
#line 1274 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{          // Sized array type?
    yyval.TypeVal = new PATypeHolder(HandleUpRefs(ArrayType::get(*yyvsp[-1].TypeVal, (unsigned)yyvsp[-3].UInt64Val)));
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 125:
#line 1279 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{          // Packed array type?
     const llvm::Type* ElemTy = yyvsp[-1].TypeVal->get();
     if ((unsigned)yyvsp[-3].UInt64Val != yyvsp[-3].UInt64Val)
        GEN_ERROR("Unsigned result not equal to signed result");
     if (!ElemTy->isFloatingPoint() && !ElemTy->isInteger())
        GEN_ERROR("Element type of a PackedType must be primitive");
     if (!isPowerOf2_32(yyvsp[-3].UInt64Val))
       GEN_ERROR("Vector length should be a power of 2!");
     yyval.TypeVal = new PATypeHolder(HandleUpRefs(PackedType::get(*yyvsp[-1].TypeVal, (unsigned)yyvsp[-3].UInt64Val)));
     delete yyvsp[-1].TypeVal;
     CHECK_FOR_ERROR
  ;
    break;}
case 126:
#line 1291 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                        // Structure type?
    std::vector<const Type*> Elements;
    for (std::list<llvm::PATypeHolder>::iterator I = yyvsp[-1].TypeList->begin(),
           E = yyvsp[-1].TypeList->end(); I != E; ++I)
      Elements.push_back(*I);

    yyval.TypeVal = new PATypeHolder(HandleUpRefs(StructType::get(Elements)));
    delete yyvsp[-1].TypeList;
    CHECK_FOR_ERROR
  ;
    break;}
case 127:
#line 1301 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                                  // Empty structure type?
    yyval.TypeVal = new PATypeHolder(StructType::get(std::vector<const Type*>()));
    CHECK_FOR_ERROR
  ;
    break;}
case 128:
#line 1305 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    std::vector<const Type*> Elements;
    for (std::list<llvm::PATypeHolder>::iterator I = yyvsp[-2].TypeList->begin(),
           E = yyvsp[-2].TypeList->end(); I != E; ++I)
      Elements.push_back(*I);

    yyval.TypeVal = new PATypeHolder(HandleUpRefs(StructType::get(Elements, true)));
    delete yyvsp[-2].TypeList;
    CHECK_FOR_ERROR
  ;
    break;}
case 129:
#line 1315 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                         // Empty structure type?
    yyval.TypeVal = new PATypeHolder(StructType::get(std::vector<const Type*>(), true));
    CHECK_FOR_ERROR
  ;
    break;}
case 130:
#line 1322 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ 
    yyval.TypeWithAttrs.Ty = yyvsp[-1].TypeVal; 
    yyval.TypeWithAttrs.Attrs = yyvsp[0].ParamAttrs; 
  ;
    break;}
case 131:
#line 1329 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    if (!(*yyvsp[0].TypeVal)->isFirstClassType())
      GEN_ERROR("LLVM functions cannot return aggregate types!");
    yyval.TypeVal = yyvsp[0].TypeVal;
  ;
    break;}
case 132:
#line 1336 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeVal = new PATypeHolder(Type::VoidTy);
  ;
    break;}
case 133:
#line 1341 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeWithAttrsList = new TypeWithAttrsList();
    yyval.TypeWithAttrsList->push_back(yyvsp[0].TypeWithAttrs);
    CHECK_FOR_ERROR
  ;
    break;}
case 134:
#line 1346 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    (yyval.TypeWithAttrsList=yyvsp[-2].TypeWithAttrsList)->push_back(yyvsp[0].TypeWithAttrs);
    CHECK_FOR_ERROR
  ;
    break;}
case 136:
#line 1354 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeWithAttrsList=yyvsp[-2].TypeWithAttrsList;
    TypeWithAttrs TWA; TWA.Attrs = FunctionType::NoAttributeSet;
    TWA.Ty = new PATypeHolder(Type::VoidTy);
    yyval.TypeWithAttrsList->push_back(TWA);
    CHECK_FOR_ERROR
  ;
    break;}
case 137:
#line 1361 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeWithAttrsList = new TypeWithAttrsList;
    TypeWithAttrs TWA; TWA.Attrs = FunctionType::NoAttributeSet;
    TWA.Ty = new PATypeHolder(Type::VoidTy);
    yyval.TypeWithAttrsList->push_back(TWA);
    CHECK_FOR_ERROR
  ;
    break;}
case 138:
#line 1368 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeWithAttrsList = new TypeWithAttrsList();
    CHECK_FOR_ERROR
  ;
    break;}
case 139:
#line 1376 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TypeList = new std::list<PATypeHolder>();
    yyval.TypeList->push_back(*yyvsp[0].TypeVal); delete yyvsp[0].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 140:
#line 1381 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    (yyval.TypeList=yyvsp[-2].TypeList)->push_back(*yyvsp[0].TypeVal); delete yyvsp[0].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 141:
#line 1392 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ // Nonempty unsized arr
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    const ArrayType *ATy = dyn_cast<ArrayType>(yyvsp[-3].TypeVal->get());
    if (ATy == 0)
      GEN_ERROR("Cannot make array constant with type: '" + 
                     (*yyvsp[-3].TypeVal)->getDescription() + "'!");
    const Type *ETy = ATy->getElementType();
    int NumElements = ATy->getNumElements();

    // Verify that we have the correct size...
    if (NumElements != -1 && NumElements != (int)yyvsp[-1].ConstVector->size())
      GEN_ERROR("Type mismatch: constant sized array initialized with " +
                     utostr(yyvsp[-1].ConstVector->size()) +  " arguments, but has size of " + 
                     itostr(NumElements) + "!");

    // Verify all elements are correct type!
    for (unsigned i = 0; i < yyvsp[-1].ConstVector->size(); i++) {
      if (ETy != (*yyvsp[-1].ConstVector)[i]->getType())
        GEN_ERROR("Element #" + utostr(i) + " is not of type '" + 
                       ETy->getDescription() +"' as required!\nIt is of type '"+
                       (*yyvsp[-1].ConstVector)[i]->getType()->getDescription() + "'.");
    }

    yyval.ConstVal = ConstantArray::get(ATy, *yyvsp[-1].ConstVector);
    delete yyvsp[-3].TypeVal; delete yyvsp[-1].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 142:
#line 1420 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    const ArrayType *ATy = dyn_cast<ArrayType>(yyvsp[-2].TypeVal->get());
    if (ATy == 0)
      GEN_ERROR("Cannot make array constant with type: '" + 
                     (*yyvsp[-2].TypeVal)->getDescription() + "'!");

    int NumElements = ATy->getNumElements();
    if (NumElements != -1 && NumElements != 0) 
      GEN_ERROR("Type mismatch: constant sized array initialized with 0"
                     " arguments, but has size of " + itostr(NumElements) +"!");
    yyval.ConstVal = ConstantArray::get(ATy, std::vector<Constant*>());
    delete yyvsp[-2].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 143:
#line 1436 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    const ArrayType *ATy = dyn_cast<ArrayType>(yyvsp[-2].TypeVal->get());
    if (ATy == 0)
      GEN_ERROR("Cannot make array constant with type: '" + 
                     (*yyvsp[-2].TypeVal)->getDescription() + "'!");

    int NumElements = ATy->getNumElements();
    const Type *ETy = ATy->getElementType();
    char *EndStr = UnEscapeLexed(yyvsp[0].StrVal, true);
    if (NumElements != -1 && NumElements != (EndStr-yyvsp[0].StrVal))
      GEN_ERROR("Can't build string constant of size " + 
                     itostr((int)(EndStr-yyvsp[0].StrVal)) +
                     " when array has size " + itostr(NumElements) + "!");
    std::vector<Constant*> Vals;
    if (ETy == Type::Int8Ty) {
      for (unsigned char *C = (unsigned char *)yyvsp[0].StrVal; 
        C != (unsigned char*)EndStr; ++C)
      Vals.push_back(ConstantInt::get(ETy, *C));
    } else {
      free(yyvsp[0].StrVal);
      GEN_ERROR("Cannot build string arrays of non byte sized elements!");
    }
    free(yyvsp[0].StrVal);
    yyval.ConstVal = ConstantArray::get(ATy, Vals);
    delete yyvsp[-2].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 144:
#line 1465 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ // Nonempty unsized arr
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    const PackedType *PTy = dyn_cast<PackedType>(yyvsp[-3].TypeVal->get());
    if (PTy == 0)
      GEN_ERROR("Cannot make packed constant with type: '" + 
                     (*yyvsp[-3].TypeVal)->getDescription() + "'!");
    const Type *ETy = PTy->getElementType();
    int NumElements = PTy->getNumElements();

    // Verify that we have the correct size...
    if (NumElements != -1 && NumElements != (int)yyvsp[-1].ConstVector->size())
      GEN_ERROR("Type mismatch: constant sized packed initialized with " +
                     utostr(yyvsp[-1].ConstVector->size()) +  " arguments, but has size of " + 
                     itostr(NumElements) + "!");

    // Verify all elements are correct type!
    for (unsigned i = 0; i < yyvsp[-1].ConstVector->size(); i++) {
      if (ETy != (*yyvsp[-1].ConstVector)[i]->getType())
        GEN_ERROR("Element #" + utostr(i) + " is not of type '" + 
           ETy->getDescription() +"' as required!\nIt is of type '"+
           (*yyvsp[-1].ConstVector)[i]->getType()->getDescription() + "'.");
    }

    yyval.ConstVal = ConstantPacked::get(PTy, *yyvsp[-1].ConstVector);
    delete yyvsp[-3].TypeVal; delete yyvsp[-1].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 145:
#line 1493 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    const StructType *STy = dyn_cast<StructType>(yyvsp[-3].TypeVal->get());
    if (STy == 0)
      GEN_ERROR("Cannot make struct constant with type: '" + 
                     (*yyvsp[-3].TypeVal)->getDescription() + "'!");

    if (yyvsp[-1].ConstVector->size() != STy->getNumContainedTypes())
      GEN_ERROR("Illegal number of initializers for structure type!");

    // Check to ensure that constants are compatible with the type initializer!
    for (unsigned i = 0, e = yyvsp[-1].ConstVector->size(); i != e; ++i)
      if ((*yyvsp[-1].ConstVector)[i]->getType() != STy->getElementType(i))
        GEN_ERROR("Expected type '" +
                       STy->getElementType(i)->getDescription() +
                       "' for element #" + utostr(i) +
                       " of structure initializer!");

    // Check to ensure that Type is not packed
    if (STy->isPacked())
      GEN_ERROR("Unpacked Initializer to packed type '" + STy->getDescription() + "'");

    yyval.ConstVal = ConstantStruct::get(STy, *yyvsp[-1].ConstVector);
    delete yyvsp[-3].TypeVal; delete yyvsp[-1].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 146:
#line 1518 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    const StructType *STy = dyn_cast<StructType>(yyvsp[-2].TypeVal->get());
    if (STy == 0)
      GEN_ERROR("Cannot make struct constant with type: '" + 
                     (*yyvsp[-2].TypeVal)->getDescription() + "'!");

    if (STy->getNumContainedTypes() != 0)
      GEN_ERROR("Illegal number of initializers for structure type!");

    // Check to ensure that Type is not packed
    if (STy->isPacked())
      GEN_ERROR("Unpacked Initializer to packed type '" + STy->getDescription() + "'");

    yyval.ConstVal = ConstantStruct::get(STy, std::vector<Constant*>());
    delete yyvsp[-2].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 147:
#line 1537 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    const StructType *STy = dyn_cast<StructType>(yyvsp[-5].TypeVal->get());
    if (STy == 0)
      GEN_ERROR("Cannot make struct constant with type: '" + 
                     (*yyvsp[-5].TypeVal)->getDescription() + "'!");

    if (yyvsp[-2].ConstVector->size() != STy->getNumContainedTypes())
      GEN_ERROR("Illegal number of initializers for structure type!");

    // Check to ensure that constants are compatible with the type initializer!
    for (unsigned i = 0, e = yyvsp[-2].ConstVector->size(); i != e; ++i)
      if ((*yyvsp[-2].ConstVector)[i]->getType() != STy->getElementType(i))
        GEN_ERROR("Expected type '" +
                       STy->getElementType(i)->getDescription() +
                       "' for element #" + utostr(i) +
                       " of structure initializer!");

    // Check to ensure that Type is packed
    if (!STy->isPacked())
      GEN_ERROR("Packed Initializer to unpacked type '" + STy->getDescription() + "'");

    yyval.ConstVal = ConstantStruct::get(STy, *yyvsp[-2].ConstVector);
    delete yyvsp[-5].TypeVal; delete yyvsp[-2].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 148:
#line 1562 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-4].TypeVal)->getDescription());
    const StructType *STy = dyn_cast<StructType>(yyvsp[-4].TypeVal->get());
    if (STy == 0)
      GEN_ERROR("Cannot make struct constant with type: '" + 
                     (*yyvsp[-4].TypeVal)->getDescription() + "'!");

    if (STy->getNumContainedTypes() != 0)
      GEN_ERROR("Illegal number of initializers for structure type!");

    // Check to ensure that Type is packed
    if (!STy->isPacked())
      GEN_ERROR("Packed Initializer to unpacked type '" + STy->getDescription() + "'");

    yyval.ConstVal = ConstantStruct::get(STy, std::vector<Constant*>());
    delete yyvsp[-4].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 149:
#line 1581 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    const PointerType *PTy = dyn_cast<PointerType>(yyvsp[-1].TypeVal->get());
    if (PTy == 0)
      GEN_ERROR("Cannot make null pointer constant with type: '" + 
                     (*yyvsp[-1].TypeVal)->getDescription() + "'!");

    yyval.ConstVal = ConstantPointerNull::get(PTy);
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 150:
#line 1593 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    yyval.ConstVal = UndefValue::get(yyvsp[-1].TypeVal->get());
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 151:
#line 1600 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    const PointerType *Ty = dyn_cast<PointerType>(yyvsp[-1].TypeVal->get());
    if (Ty == 0)
      GEN_ERROR("Global const reference must be a pointer type!");

    // ConstExprs can exist in the body of a function, thus creating
    // GlobalValues whenever they refer to a variable.  Because we are in
    // the context of a function, getValNonImprovising will search the functions
    // symbol table instead of the module symbol table for the global symbol,
    // which throws things all off.  To get around this, we just tell
    // getValNonImprovising that we are at global scope here.
    //
    Function *SavedCurFn = CurFun.CurrentFunction;
    CurFun.CurrentFunction = 0;

    Value *V = getValNonImprovising(Ty, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR

    CurFun.CurrentFunction = SavedCurFn;

    // If this is an initializer for a constant pointer, which is referencing a
    // (currently) undefined variable, create a stub now that shall be replaced
    // in the future with the right type of variable.
    //
    if (V == 0) {
      assert(isa<PointerType>(Ty) && "Globals may only be used as pointers!");
      const PointerType *PT = cast<PointerType>(Ty);

      // First check to see if the forward references value is already created!
      PerModuleInfo::GlobalRefsType::iterator I =
        CurModule.GlobalRefs.find(std::make_pair(PT, yyvsp[0].ValIDVal));
    
      if (I != CurModule.GlobalRefs.end()) {
        V = I->second;             // Placeholder already exists, use it...
        yyvsp[0].ValIDVal.destroy();
      } else {
        std::string Name;
        if (yyvsp[0].ValIDVal.Type == ValID::GlobalName)
          Name = yyvsp[0].ValIDVal.Name;
        else if (yyvsp[0].ValIDVal.Type != ValID::GlobalID)
          GEN_ERROR("Invalid reference to global");

        // Create the forward referenced global.
        GlobalValue *GV;
        if (const FunctionType *FTy = 
                 dyn_cast<FunctionType>(PT->getElementType())) {
          GV = new Function(FTy, GlobalValue::ExternalLinkage, Name,
                            CurModule.CurrentModule);
        } else {
          GV = new GlobalVariable(PT->getElementType(), false,
                                  GlobalValue::ExternalLinkage, 0,
                                  Name, CurModule.CurrentModule);
        }

        // Keep track of the fact that we have a forward ref to recycle it
        CurModule.GlobalRefs.insert(std::make_pair(std::make_pair(PT, yyvsp[0].ValIDVal), GV));
        V = GV;
      }
    }

    yyval.ConstVal = cast<GlobalValue>(V);
    delete yyvsp[-1].TypeVal;            // Free the type handle
    CHECK_FOR_ERROR
  ;
    break;}
case 152:
#line 1666 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    if (yyvsp[-1].TypeVal->get() != yyvsp[0].ConstVal->getType())
      GEN_ERROR("Mismatched types for constant expression: " + 
        (*yyvsp[-1].TypeVal)->getDescription() + " and " + yyvsp[0].ConstVal->getType()->getDescription());
    yyval.ConstVal = yyvsp[0].ConstVal;
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 153:
#line 1676 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    const Type *Ty = yyvsp[-1].TypeVal->get();
    if (isa<FunctionType>(Ty) || Ty == Type::LabelTy || isa<OpaqueType>(Ty))
      GEN_ERROR("Cannot create a null initialized value of this type!");
    yyval.ConstVal = Constant::getNullValue(Ty);
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 154:
#line 1686 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{      // integral constants
    if (!ConstantInt::isValueValidForType(yyvsp[-1].PrimType, yyvsp[0].SInt64Val))
      GEN_ERROR("Constant value doesn't fit in type!");
    yyval.ConstVal = ConstantInt::get(yyvsp[-1].PrimType, yyvsp[0].SInt64Val);
    CHECK_FOR_ERROR
  ;
    break;}
case 155:
#line 1692 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{      // integral constants
    if (!ConstantInt::isValueValidForType(yyvsp[-1].PrimType, yyvsp[0].UInt64Val))
      GEN_ERROR("Constant value doesn't fit in type!");
    yyval.ConstVal = ConstantInt::get(yyvsp[-1].PrimType, yyvsp[0].UInt64Val);
    CHECK_FOR_ERROR
  ;
    break;}
case 156:
#line 1698 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                      // Boolean constants
    assert(cast<IntegerType>(yyvsp[-1].PrimType)->getBitWidth() == 1 && "Not Bool?");
    yyval.ConstVal = ConstantInt::getTrue();
    CHECK_FOR_ERROR
  ;
    break;}
case 157:
#line 1703 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                     // Boolean constants
    assert(cast<IntegerType>(yyvsp[-1].PrimType)->getBitWidth() == 1 && "Not Bool?");
    yyval.ConstVal = ConstantInt::getFalse();
    CHECK_FOR_ERROR
  ;
    break;}
case 158:
#line 1708 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                   // Float & Double constants
    if (!ConstantFP::isValueValidForType(yyvsp[-1].PrimType, yyvsp[0].FPVal))
      GEN_ERROR("Floating point constant invalid for type!!");
    yyval.ConstVal = ConstantFP::get(yyvsp[-1].PrimType, yyvsp[0].FPVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 159:
#line 1716 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    Constant *Val = yyvsp[-3].ConstVal;
    const Type *DestTy = yyvsp[-1].TypeVal->get();
    if (!CastInst::castIsValid(yyvsp[-5].CastOpVal, yyvsp[-3].ConstVal, DestTy))
      GEN_ERROR("invalid cast opcode for cast from '" +
                Val->getType()->getDescription() + "' to '" +
                DestTy->getDescription() + "'!"); 
    yyval.ConstVal = ConstantExpr::getCast(yyvsp[-5].CastOpVal, yyvsp[-3].ConstVal, DestTy);
    delete yyvsp[-1].TypeVal;
  ;
    break;}
case 160:
#line 1728 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!isa<PointerType>(yyvsp[-2].ConstVal->getType()))
      GEN_ERROR("GetElementPtr requires a pointer operand!");

    const Type *IdxTy =
      GetElementPtrInst::getIndexedType(yyvsp[-2].ConstVal->getType(), *yyvsp[-1].ValueList, true);
    if (!IdxTy)
      GEN_ERROR("Index list invalid for constant getelementptr!");

    SmallVector<Constant*, 8> IdxVec;
    for (unsigned i = 0, e = yyvsp[-1].ValueList->size(); i != e; ++i)
      if (Constant *C = dyn_cast<Constant>((*yyvsp[-1].ValueList)[i]))
        IdxVec.push_back(C);
      else
        GEN_ERROR("Indices to constant getelementptr must be constants!");

    delete yyvsp[-1].ValueList;

    yyval.ConstVal = ConstantExpr::getGetElementPtr(yyvsp[-2].ConstVal, &IdxVec[0], IdxVec.size());
    CHECK_FOR_ERROR
  ;
    break;}
case 161:
#line 1749 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-5].ConstVal->getType() != Type::Int1Ty)
      GEN_ERROR("Select condition must be of boolean type!");
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("Select operand types must match!");
    yyval.ConstVal = ConstantExpr::getSelect(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 162:
#line 1757 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("Binary operator types must match!");
    CHECK_FOR_ERROR;
    yyval.ConstVal = ConstantExpr::get(yyvsp[-5].BinaryOpVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
  ;
    break;}
case 163:
#line 1763 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("Logical operator types must match!");
    if (!yyvsp[-3].ConstVal->getType()->isInteger()) {
      if (!isa<PackedType>(yyvsp[-3].ConstVal->getType()) || 
          !cast<PackedType>(yyvsp[-3].ConstVal->getType())->getElementType()->isInteger())
        GEN_ERROR("Logical operator requires integral operands!");
    }
    yyval.ConstVal = ConstantExpr::get(yyvsp[-5].BinaryOpVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 164:
#line 1774 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("icmp operand types must match!");
    yyval.ConstVal = ConstantExpr::getICmp(yyvsp[-5].IPredicate, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
  ;
    break;}
case 165:
#line 1779 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-3].ConstVal->getType() != yyvsp[-1].ConstVal->getType())
      GEN_ERROR("fcmp operand types must match!");
    yyval.ConstVal = ConstantExpr::getFCmp(yyvsp[-5].FPredicate, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
  ;
    break;}
case 166:
#line 1784 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-1].ConstVal->getType() != Type::Int8Ty)
      GEN_ERROR("Shift count for shift constant must be i8 type!");
    if (!yyvsp[-3].ConstVal->getType()->isInteger())
      GEN_ERROR("Shift constant expression requires integer operand!");
    CHECK_FOR_ERROR;
    yyval.ConstVal = ConstantExpr::get(yyvsp[-5].OtherOpVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 167:
#line 1793 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!ExtractElementInst::isValidOperands(yyvsp[-3].ConstVal, yyvsp[-1].ConstVal))
      GEN_ERROR("Invalid extractelement operands!");
    yyval.ConstVal = ConstantExpr::getExtractElement(yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 168:
#line 1799 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!InsertElementInst::isValidOperands(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal))
      GEN_ERROR("Invalid insertelement operands!");
    yyval.ConstVal = ConstantExpr::getInsertElement(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 169:
#line 1805 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!ShuffleVectorInst::isValidOperands(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal))
      GEN_ERROR("Invalid shufflevector operands!");
    yyval.ConstVal = ConstantExpr::getShuffleVector(yyvsp[-5].ConstVal, yyvsp[-3].ConstVal, yyvsp[-1].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 170:
#line 1814 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    (yyval.ConstVector = yyvsp[-2].ConstVector)->push_back(yyvsp[0].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 171:
#line 1818 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ConstVector = new std::vector<Constant*>();
    yyval.ConstVector->push_back(yyvsp[0].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 172:
#line 1826 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.BoolVal = false; ;
    break;}
case 173:
#line 1826 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.BoolVal = true; ;
    break;}
case 174:
#line 1837 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ModuleVal = ParserResult = CurModule.CurrentModule;
    CurModule.ModuleDone();
    CHECK_FOR_ERROR;
  ;
    break;}
case 175:
#line 1842 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ModuleVal = ParserResult = CurModule.CurrentModule;
    CurModule.ModuleDone();
    CHECK_FOR_ERROR;
  ;
    break;}
case 178:
#line 1855 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ CurFun.isDeclare = false; ;
    break;}
case 179:
#line 1855 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurFun.FunctionDone();
    CHECK_FOR_ERROR
  ;
    break;}
case 180:
#line 1859 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ CurFun.isDeclare = true; ;
    break;}
case 181:
#line 1859 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CHECK_FOR_ERROR
  ;
    break;}
case 182:
#line 1862 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CHECK_FOR_ERROR
  ;
    break;}
case 183:
#line 1865 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    // Emit an error if there are any unresolved types left.
    if (!CurModule.LateResolveTypes.empty()) {
      const ValID &DID = CurModule.LateResolveTypes.begin()->first;
      if (DID.Type == ValID::LocalName) {
        GEN_ERROR("Reference to an undefined type: '"+DID.getName() + "'");
      } else {
        GEN_ERROR("Reference to an undefined type: #" + itostr(DID.Num));
      }
    }
    CHECK_FOR_ERROR
  ;
    break;}
case 184:
#line 1877 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    // Eagerly resolve types.  This is not an optimization, this is a
    // requirement that is due to the fact that we could have this:
    //
    // %list = type { %list * }
    // %list = type { %list * }    ; repeated type decl
    //
    // If types are not resolved eagerly, then the two types will not be
    // determined to be the same type!
    //
    ResolveTypeTo(yyvsp[-2].StrVal, *yyvsp[0].TypeVal);

    if (!setTypeName(*yyvsp[0].TypeVal, yyvsp[-2].StrVal) && !yyvsp[-2].StrVal) {
      CHECK_FOR_ERROR
      // If this is a named type that is not a redefinition, add it to the slot
      // table.
      CurModule.Types.push_back(*yyvsp[0].TypeVal);
    }

    delete yyvsp[0].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 185:
#line 1901 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    ResolveTypeTo(yyvsp[-2].StrVal, yyvsp[0].PrimType);

    if (!setTypeName(yyvsp[0].PrimType, yyvsp[-2].StrVal) && !yyvsp[-2].StrVal) {
      CHECK_FOR_ERROR
      // If this is a named type that is not a redefinition, add it to the slot
      // table.
      CurModule.Types.push_back(yyvsp[0].PrimType);
    }
    CHECK_FOR_ERROR
  ;
    break;}
case 186:
#line 1912 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ 
    /* "Externally Visible" Linkage */
    if (yyvsp[0].ConstVal == 0) 
      GEN_ERROR("Global value initializer is not a constant!");
    CurGV = ParseGlobalVariable(yyvsp[-3].StrVal, GlobalValue::ExternalLinkage,
                                yyvsp[-2].Visibility, yyvsp[-1].BoolVal, yyvsp[0].ConstVal->getType(), yyvsp[0].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 187:
#line 1919 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurGV = 0;
  ;
    break;}
case 188:
#line 1922 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[0].ConstVal == 0) 
      GEN_ERROR("Global value initializer is not a constant!");
    CurGV = ParseGlobalVariable(yyvsp[-4].StrVal, yyvsp[-3].Linkage, yyvsp[-2].Visibility, yyvsp[-1].BoolVal, yyvsp[0].ConstVal->getType(), yyvsp[0].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 189:
#line 1927 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurGV = 0;
  ;
    break;}
case 190:
#line 1930 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    CurGV = ParseGlobalVariable(yyvsp[-4].StrVal, yyvsp[-3].Linkage, yyvsp[-2].Visibility, yyvsp[-1].BoolVal, *yyvsp[0].TypeVal, 0);
    CHECK_FOR_ERROR
    delete yyvsp[0].TypeVal;
  ;
    break;}
case 191:
#line 1936 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurGV = 0;
    CHECK_FOR_ERROR
  ;
    break;}
case 192:
#line 1940 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ 
    CHECK_FOR_ERROR
  ;
    break;}
case 193:
#line 1943 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CHECK_FOR_ERROR
  ;
    break;}
case 194:
#line 1949 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  const std::string &AsmSoFar = CurModule.CurrentModule->getModuleInlineAsm();
  char *EndStr = UnEscapeLexed(yyvsp[0].StrVal, true);
  std::string NewAsm(yyvsp[0].StrVal, EndStr);
  free(yyvsp[0].StrVal);

  if (AsmSoFar.empty())
    CurModule.CurrentModule->setModuleInlineAsm(NewAsm);
  else
    CurModule.CurrentModule->setModuleInlineAsm(AsmSoFar+"\n"+NewAsm);
  CHECK_FOR_ERROR
;
    break;}
case 195:
#line 1962 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurModule.CurrentModule->setTargetTriple(yyvsp[0].StrVal);
    free(yyvsp[0].StrVal);
  ;
    break;}
case 196:
#line 1966 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurModule.CurrentModule->setDataLayout(yyvsp[0].StrVal);
    free(yyvsp[0].StrVal);
  ;
    break;}
case 198:
#line 1973 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
          CurModule.CurrentModule->addLibrary(yyvsp[0].StrVal);
          free(yyvsp[0].StrVal);
          CHECK_FOR_ERROR
        ;
    break;}
case 199:
#line 1978 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
          CurModule.CurrentModule->addLibrary(yyvsp[0].StrVal);
          free(yyvsp[0].StrVal);
          CHECK_FOR_ERROR
        ;
    break;}
case 200:
#line 1983 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
          CHECK_FOR_ERROR
        ;
    break;}
case 201:
#line 1992 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    if (*yyvsp[-2].TypeVal == Type::VoidTy)
      GEN_ERROR("void typed arguments are invalid!");
    ArgListEntry E; E.Attrs = yyvsp[-1].ParamAttrs; E.Ty = yyvsp[-2].TypeVal; E.Name = yyvsp[0].StrVal;
    yyval.ArgList = yyvsp[-4].ArgList;
    yyvsp[-4].ArgList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 202:
#line 2002 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    if (*yyvsp[-2].TypeVal == Type::VoidTy)
      GEN_ERROR("void typed arguments are invalid!");
    ArgListEntry E; E.Attrs = yyvsp[-1].ParamAttrs; E.Ty = yyvsp[-2].TypeVal; E.Name = yyvsp[0].StrVal;
    yyval.ArgList = new ArgListType;
    yyval.ArgList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 203:
#line 2013 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ArgList = yyvsp[0].ArgList;
    CHECK_FOR_ERROR
  ;
    break;}
case 204:
#line 2017 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ArgList = yyvsp[-2].ArgList;
    struct ArgListEntry E;
    E.Ty = new PATypeHolder(Type::VoidTy);
    E.Name = 0;
    E.Attrs = FunctionType::NoAttributeSet;
    yyval.ArgList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 205:
#line 2026 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ArgList = new ArgListType;
    struct ArgListEntry E;
    E.Ty = new PATypeHolder(Type::VoidTy);
    E.Name = 0;
    E.Attrs = FunctionType::NoAttributeSet;
    yyval.ArgList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 206:
#line 2035 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ArgList = 0;
    CHECK_FOR_ERROR
  ;
    break;}
case 207:
#line 2041 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  UnEscapeLexed(yyvsp[-6].StrVal);
  std::string FunctionName(yyvsp[-6].StrVal);
  free(yyvsp[-6].StrVal);  // Free strdup'd memory!
  
  // Check the function result for abstractness if this is a define. We should
  // have no abstract types at this point
  if (!CurFun.isDeclare && CurModule.TypeIsUnresolved(yyvsp[-7].TypeVal))
    GEN_ERROR("Reference to abstract result: "+ yyvsp[-7].TypeVal->get()->getDescription());

  std::vector<const Type*> ParamTypeList;
  std::vector<FunctionType::ParameterAttributes> ParamAttrs;
  ParamAttrs.push_back(yyvsp[-2].ParamAttrs);
  if (yyvsp[-4].ArgList) {   // If there are arguments...
    for (ArgListType::iterator I = yyvsp[-4].ArgList->begin(); I != yyvsp[-4].ArgList->end(); ++I) {
      const Type* Ty = I->Ty->get();
      if (!CurFun.isDeclare && CurModule.TypeIsUnresolved(I->Ty))
        GEN_ERROR("Reference to abstract argument: " + Ty->getDescription());
      ParamTypeList.push_back(Ty);
      if (Ty != Type::VoidTy)
        ParamAttrs.push_back(I->Attrs);
    }
  }

  bool isVarArg = ParamTypeList.size() && ParamTypeList.back() == Type::VoidTy;
  if (isVarArg) ParamTypeList.pop_back();

  FunctionType *FT = FunctionType::get(*yyvsp[-7].TypeVal, ParamTypeList, isVarArg,
                                       ParamAttrs);
  const PointerType *PFT = PointerType::get(FT);
  delete yyvsp[-7].TypeVal;

  ValID ID;
  if (!FunctionName.empty()) {
    ID = ValID::createGlobalName((char*)FunctionName.c_str());
  } else {
    ID = ValID::createGlobalID(CurModule.Values[PFT].size());
  }

  Function *Fn = 0;
  // See if this function was forward referenced.  If so, recycle the object.
  if (GlobalValue *FWRef = CurModule.GetForwardRefForGlobal(PFT, ID)) {
    // Move the function to the end of the list, from whereever it was 
    // previously inserted.
    Fn = cast<Function>(FWRef);
    CurModule.CurrentModule->getFunctionList().remove(Fn);
    CurModule.CurrentModule->getFunctionList().push_back(Fn);
  } else if (!FunctionName.empty() &&     // Merge with an earlier prototype?
             (Fn = CurModule.CurrentModule->getFunction(FunctionName, FT))) {
    // If this is the case, either we need to be a forward decl, or it needs 
    // to be.
    if (!CurFun.isDeclare && !Fn->isDeclaration())
      GEN_ERROR("Redefinition of function '" + FunctionName + "'!");
    
    // Make sure to strip off any argument names so we can't get conflicts.
    if (Fn->isDeclaration())
      for (Function::arg_iterator AI = Fn->arg_begin(), AE = Fn->arg_end();
           AI != AE; ++AI)
        AI->setName("");
  } else  {  // Not already defined?
    Fn = new Function(FT, GlobalValue::ExternalLinkage, FunctionName,
                      CurModule.CurrentModule);

    InsertValue(Fn, CurModule.Values);
  }

  CurFun.FunctionStart(Fn);

  if (CurFun.isDeclare) {
    // If we have declaration, always overwrite linkage.  This will allow us to
    // correctly handle cases, when pointer to function is passed as argument to
    // another function.
    Fn->setLinkage(CurFun.Linkage);
    Fn->setVisibility(CurFun.Visibility);
  }
  Fn->setCallingConv(yyvsp[-8].UIntVal);
  Fn->setAlignment(yyvsp[0].UIntVal);
  if (yyvsp[-1].StrVal) {
    Fn->setSection(yyvsp[-1].StrVal);
    free(yyvsp[-1].StrVal);
  }

  // Add all of the arguments we parsed to the function...
  if (yyvsp[-4].ArgList) {                     // Is null if empty...
    if (isVarArg) {  // Nuke the last entry
      assert(yyvsp[-4].ArgList->back().Ty->get() == Type::VoidTy && yyvsp[-4].ArgList->back().Name == 0&&
             "Not a varargs marker!");
      delete yyvsp[-4].ArgList->back().Ty;
      yyvsp[-4].ArgList->pop_back();  // Delete the last entry
    }
    Function::arg_iterator ArgIt = Fn->arg_begin();
    unsigned Idx = 1;
    for (ArgListType::iterator I = yyvsp[-4].ArgList->begin(); I != yyvsp[-4].ArgList->end(); ++I, ++ArgIt) {
      delete I->Ty;                          // Delete the typeholder...
      setValueName(ArgIt, I->Name);           // Insert arg into symtab...
      CHECK_FOR_ERROR
      InsertValue(ArgIt);
      Idx++;
    }

    delete yyvsp[-4].ArgList;                     // We're now done with the argument list
  }
  CHECK_FOR_ERROR
;
    break;}
case 210:
#line 2148 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  yyval.FunctionVal = CurFun.CurrentFunction;

  // Make sure that we keep track of the linkage type even if there was a
  // previous "declare".
  yyval.FunctionVal->setLinkage(yyvsp[-3].Linkage);
  yyval.FunctionVal->setVisibility(yyvsp[-2].Visibility);
;
    break;}
case 213:
#line 2159 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  yyval.FunctionVal = yyvsp[-1].FunctionVal;
  CHECK_FOR_ERROR
;
    break;}
case 214:
#line 2164 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    CurFun.CurrentFunction->setLinkage(yyvsp[-2].Linkage);
    CurFun.CurrentFunction->setVisibility(yyvsp[-1].Visibility);
    yyval.FunctionVal = CurFun.CurrentFunction;
    CurFun.FunctionDone();
    CHECK_FOR_ERROR
  ;
    break;}
case 215:
#line 2176 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = false;
    CHECK_FOR_ERROR
  ;
    break;}
case 216:
#line 2180 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = true;
    CHECK_FOR_ERROR
  ;
    break;}
case 217:
#line 2185 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{    // A reference to a direct constant
    yyval.ValIDVal = ValID::create(yyvsp[0].SInt64Val);
    CHECK_FOR_ERROR
  ;
    break;}
case 218:
#line 2189 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::create(yyvsp[0].UInt64Val);
    CHECK_FOR_ERROR
  ;
    break;}
case 219:
#line 2193 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                     // Perhaps it's an FP constant?
    yyval.ValIDVal = ValID::create(yyvsp[0].FPVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 220:
#line 2197 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::create(ConstantInt::getTrue());
    CHECK_FOR_ERROR
  ;
    break;}
case 221:
#line 2201 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::create(ConstantInt::getFalse());
    CHECK_FOR_ERROR
  ;
    break;}
case 222:
#line 2205 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::createNull();
    CHECK_FOR_ERROR
  ;
    break;}
case 223:
#line 2209 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::createUndef();
    CHECK_FOR_ERROR
  ;
    break;}
case 224:
#line 2213 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{     // A vector zero constant.
    yyval.ValIDVal = ValID::createZeroInit();
    CHECK_FOR_ERROR
  ;
    break;}
case 225:
#line 2217 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ // Nonempty unsized packed vector
    const Type *ETy = (*yyvsp[-1].ConstVector)[0]->getType();
    int NumElements = yyvsp[-1].ConstVector->size(); 
    
    PackedType* pt = PackedType::get(ETy, NumElements);
    PATypeHolder* PTy = new PATypeHolder(
                                         HandleUpRefs(
                                            PackedType::get(
                                                ETy, 
                                                NumElements)
                                            )
                                         );
    
    // Verify all elements are correct type!
    for (unsigned i = 0; i < yyvsp[-1].ConstVector->size(); i++) {
      if (ETy != (*yyvsp[-1].ConstVector)[i]->getType())
        GEN_ERROR("Element #" + utostr(i) + " is not of type '" + 
                     ETy->getDescription() +"' as required!\nIt is of type '" +
                     (*yyvsp[-1].ConstVector)[i]->getType()->getDescription() + "'.");
    }

    yyval.ValIDVal = ValID::create(ConstantPacked::get(pt, *yyvsp[-1].ConstVector));
    delete PTy; delete yyvsp[-1].ConstVector;
    CHECK_FOR_ERROR
  ;
    break;}
case 226:
#line 2242 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::create(yyvsp[0].ConstVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 227:
#line 2246 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    char *End = UnEscapeLexed(yyvsp[-2].StrVal, true);
    std::string AsmStr = std::string(yyvsp[-2].StrVal, End);
    End = UnEscapeLexed(yyvsp[0].StrVal, true);
    std::string Constraints = std::string(yyvsp[0].StrVal, End);
    yyval.ValIDVal = ValID::createInlineAsm(AsmStr, Constraints, yyvsp[-3].BoolVal);
    free(yyvsp[-2].StrVal);
    free(yyvsp[0].StrVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 228:
#line 2260 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{  // Is it an integer reference...?
    yyval.ValIDVal = ValID::createLocalID(yyvsp[0].UIntVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 229:
#line 2264 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValIDVal = ValID::createGlobalID(yyvsp[0].UIntVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 230:
#line 2268 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                   // Is it a named reference...?
    yyval.ValIDVal = ValID::createLocalName(yyvsp[0].StrVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 231:
#line 2272 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                   // Is it a named reference...?
    yyval.ValIDVal = ValID::createGlobalName(yyvsp[0].StrVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 234:
#line 2284 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    yyval.ValueVal = getVal(*yyvsp[-1].TypeVal, yyvsp[0].ValIDVal); 
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 235:
#line 2293 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.FunctionVal = yyvsp[-1].FunctionVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 236:
#line 2297 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ // Do not allow functions with 0 basic blocks   
    yyval.FunctionVal = yyvsp[-1].FunctionVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 237:
#line 2306 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    setValueName(yyvsp[0].TermInstVal, yyvsp[-1].StrVal);
    CHECK_FOR_ERROR
    InsertValue(yyvsp[0].TermInstVal);

    yyvsp[-2].BasicBlockVal->getInstList().push_back(yyvsp[0].TermInstVal);
    InsertValue(yyvsp[-2].BasicBlockVal);
    yyval.BasicBlockVal = yyvsp[-2].BasicBlockVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 238:
#line 2317 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (CastInst *CI1 = dyn_cast<CastInst>(yyvsp[0].InstVal))
      if (CastInst *CI2 = dyn_cast<CastInst>(CI1->getOperand(0)))
        if (CI2->getParent() == 0)
          yyvsp[-1].BasicBlockVal->getInstList().push_back(CI2);
    yyvsp[-1].BasicBlockVal->getInstList().push_back(yyvsp[0].InstVal);
    yyval.BasicBlockVal = yyvsp[-1].BasicBlockVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 239:
#line 2326 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BasicBlockVal = getBBVal(ValID::createLocalID(CurFun.NextBBNum++), true);
    CHECK_FOR_ERROR

    // Make sure to move the basic block to the correct location in the
    // function, instead of leaving it inserted wherever it was first
    // referenced.
    Function::BasicBlockListType &BBL = 
      CurFun.CurrentFunction->getBasicBlockList();
    BBL.splice(BBL.end(), BBL, yyval.BasicBlockVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 240:
#line 2338 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BasicBlockVal = getBBVal(ValID::createLocalName(yyvsp[0].StrVal), true);
    CHECK_FOR_ERROR

    // Make sure to move the basic block to the correct location in the
    // function, instead of leaving it inserted wherever it was first
    // referenced.
    Function::BasicBlockListType &BBL = 
      CurFun.CurrentFunction->getBasicBlockList();
    BBL.splice(BBL.end(), BBL, yyval.BasicBlockVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 241:
#line 2351 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{              // Return with a result...
    yyval.TermInstVal = new ReturnInst(yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 242:
#line 2355 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                                       // Return with no result...
    yyval.TermInstVal = new ReturnInst();
    CHECK_FOR_ERROR
  ;
    break;}
case 243:
#line 2359 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{                         // Unconditional Branch...
    BasicBlock* tmpBB = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.TermInstVal = new BranchInst(tmpBB);
  ;
    break;}
case 244:
#line 2364 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{  
    assert(cast<IntegerType>(yyvsp[-7].PrimType)->getBitWidth() == 1 && "Not Bool?");
    BasicBlock* tmpBBA = getBBVal(yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBBB = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    Value* tmpVal = getVal(Type::Int1Ty, yyvsp[-6].ValIDVal);
    CHECK_FOR_ERROR
    yyval.TermInstVal = new BranchInst(tmpBBA, tmpBBB, tmpVal);
  ;
    break;}
case 245:
#line 2374 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    Value* tmpVal = getVal(yyvsp[-7].PrimType, yyvsp[-6].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBB = getBBVal(yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    SwitchInst *S = new SwitchInst(tmpVal, tmpBB, yyvsp[-1].JumpTable->size());
    yyval.TermInstVal = S;

    std::vector<std::pair<Constant*,BasicBlock*> >::iterator I = yyvsp[-1].JumpTable->begin(),
      E = yyvsp[-1].JumpTable->end();
    for (; I != E; ++I) {
      if (ConstantInt *CI = dyn_cast<ConstantInt>(I->first))
          S->addCase(CI, I->second);
      else
        GEN_ERROR("Switch case is constant, but not a simple integer!");
    }
    delete yyvsp[-1].JumpTable;
    CHECK_FOR_ERROR
  ;
    break;}
case 246:
#line 2393 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    Value* tmpVal = getVal(yyvsp[-6].PrimType, yyvsp[-5].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBB = getBBVal(yyvsp[-2].ValIDVal);
    CHECK_FOR_ERROR
    SwitchInst *S = new SwitchInst(tmpVal, tmpBB, 0);
    yyval.TermInstVal = S;
    CHECK_FOR_ERROR
  ;
    break;}
case 247:
#line 2403 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{

    // Handle the short syntax
    const PointerType *PFTy = 0;
    const FunctionType *Ty = 0;
    if (!(PFTy = dyn_cast<PointerType>(yyvsp[-11].TypeVal->get())) ||
        !(Ty = dyn_cast<FunctionType>(PFTy->getElementType()))) {
      // Pull out the types of all of the arguments...
      std::vector<const Type*> ParamTypes;
      FunctionType::ParamAttrsList ParamAttrs;
      ParamAttrs.push_back(yyvsp[-6].ParamAttrs);
      for (ValueRefList::iterator I = yyvsp[-8].ValueRefList->begin(), E = yyvsp[-8].ValueRefList->end(); I != E; ++I) {
        const Type *Ty = I->Val->getType();
        if (Ty == Type::VoidTy)
          GEN_ERROR("Short call syntax cannot be used with varargs");
        ParamTypes.push_back(Ty);
        ParamAttrs.push_back(I->Attrs);
      }

      Ty = FunctionType::get(yyvsp[-11].TypeVal->get(), ParamTypes, false, ParamAttrs);
      PFTy = PointerType::get(Ty);
    }

    Value *V = getVal(PFTy, yyvsp[-10].ValIDVal);   // Get the function we're calling...
    CHECK_FOR_ERROR
    BasicBlock *Normal = getBBVal(yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock *Except = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR

    // Check the arguments
    ValueList Args;
    if (yyvsp[-8].ValueRefList->empty()) {                                   // Has no arguments?
      // Make sure no arguments is a good thing!
      if (Ty->getNumParams() != 0)
        GEN_ERROR("No arguments passed to a function that "
                       "expects arguments!");
    } else {                                     // Has arguments?
      // Loop through FunctionType's arguments and ensure they are specified
      // correctly!
      FunctionType::param_iterator I = Ty->param_begin();
      FunctionType::param_iterator E = Ty->param_end();
      ValueRefList::iterator ArgI = yyvsp[-8].ValueRefList->begin(), ArgE = yyvsp[-8].ValueRefList->end();

      for (; ArgI != ArgE && I != E; ++ArgI, ++I) {
        if (ArgI->Val->getType() != *I)
          GEN_ERROR("Parameter " + ArgI->Val->getName()+ " is not of type '" +
                         (*I)->getDescription() + "'!");
        Args.push_back(ArgI->Val);
      }

      if (Ty->isVarArg()) {
        if (I == E)
          for (; ArgI != ArgE; ++ArgI)
            Args.push_back(ArgI->Val); // push the remaining varargs
      } else if (I != E || ArgI != ArgE)
        GEN_ERROR("Invalid number of parameters detected!");
    }

    // Create the InvokeInst
    InvokeInst *II = new InvokeInst(V, Normal, Except, Args);
    II->setCallingConv(yyvsp[-12].UIntVal);
    yyval.TermInstVal = II;
    delete yyvsp[-8].ValueRefList;
    CHECK_FOR_ERROR
  ;
    break;}
case 248:
#line 2469 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TermInstVal = new UnwindInst();
    CHECK_FOR_ERROR
  ;
    break;}
case 249:
#line 2473 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.TermInstVal = new UnreachableInst();
    CHECK_FOR_ERROR
  ;
    break;}
case 250:
#line 2480 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.JumpTable = yyvsp[-5].JumpTable;
    Constant *V = cast<Constant>(getValNonImprovising(yyvsp[-4].PrimType, yyvsp[-3].ValIDVal));
    CHECK_FOR_ERROR
    if (V == 0)
      GEN_ERROR("May only switch on a constant pool value!");

    BasicBlock* tmpBB = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.JumpTable->push_back(std::make_pair(V, tmpBB));
  ;
    break;}
case 251:
#line 2491 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.JumpTable = new std::vector<std::pair<Constant*, BasicBlock*> >();
    Constant *V = cast<Constant>(getValNonImprovising(yyvsp[-4].PrimType, yyvsp[-3].ValIDVal));
    CHECK_FOR_ERROR

    if (V == 0)
      GEN_ERROR("May only switch on a constant pool value!");

    BasicBlock* tmpBB = getBBVal(yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.JumpTable->push_back(std::make_pair(V, tmpBB)); 
  ;
    break;}
case 252:
#line 2504 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
  // Is this definition named?? if so, assign the name...
  setValueName(yyvsp[0].InstVal, yyvsp[-1].StrVal);
  CHECK_FOR_ERROR
  InsertValue(yyvsp[0].InstVal);
  yyval.InstVal = yyvsp[0].InstVal;
  CHECK_FOR_ERROR
;
    break;}
case 253:
#line 2513 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{    // Used for PHI nodes
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-5].TypeVal)->getDescription());
    yyval.PHIList = new std::list<std::pair<Value*, BasicBlock*> >();
    Value* tmpVal = getVal(*yyvsp[-5].TypeVal, yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBB = getBBVal(yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.PHIList->push_back(std::make_pair(tmpVal, tmpBB));
    delete yyvsp[-5].TypeVal;
  ;
    break;}
case 254:
#line 2524 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.PHIList = yyvsp[-6].PHIList;
    Value* tmpVal = getVal(yyvsp[-6].PHIList->front().first->getType(), yyvsp[-3].ValIDVal);
    CHECK_FOR_ERROR
    BasicBlock* tmpBB = getBBVal(yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyvsp[-6].PHIList->push_back(std::make_pair(tmpVal, tmpBB));
  ;
    break;}
case 255:
#line 2534 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{    
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    // Used for call and invoke instructions
    yyval.ValueRefList = new ValueRefList();
    ValueRefListEntry E; E.Attrs = yyvsp[0].ParamAttrs; E.Val = getVal(yyvsp[-2].TypeVal->get(), yyvsp[-1].ValIDVal);
    yyval.ValueRefList->push_back(E);
  ;
    break;}
case 256:
#line 2542 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    yyval.ValueRefList = yyvsp[-4].ValueRefList;
    ValueRefListEntry E; E.Attrs = yyvsp[0].ParamAttrs; E.Val = getVal(yyvsp[-2].TypeVal->get(), yyvsp[-1].ValIDVal);
    yyval.ValueRefList->push_back(E);
    CHECK_FOR_ERROR
  ;
    break;}
case 257:
#line 2550 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ValueRefList = new ValueRefList(); ;
    break;}
case 258:
#line 2553 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{ yyval.ValueList = new std::vector<Value*>(); ;
    break;}
case 259:
#line 2554 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.ValueList = yyvsp[-2].ValueList;
    yyval.ValueList->push_back(yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 260:
#line 2561 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = true;
    CHECK_FOR_ERROR
  ;
    break;}
case 261:
#line 2565 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = false;
    CHECK_FOR_ERROR
  ;
    break;}
case 262:
#line 2570 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    if (!(*yyvsp[-3].TypeVal)->isInteger() && !(*yyvsp[-3].TypeVal)->isFloatingPoint() && 
        !isa<PackedType>((*yyvsp[-3].TypeVal).get()))
      GEN_ERROR(
        "Arithmetic operator requires integer, FP, or packed operands!");
    if (isa<PackedType>((*yyvsp[-3].TypeVal).get()) && 
        (yyvsp[-4].BinaryOpVal == Instruction::URem || 
         yyvsp[-4].BinaryOpVal == Instruction::SRem ||
         yyvsp[-4].BinaryOpVal == Instruction::FRem))
      GEN_ERROR("U/S/FRem not supported on packed types!");
    Value* val1 = getVal(*yyvsp[-3].TypeVal, yyvsp[-2].ValIDVal); 
    CHECK_FOR_ERROR
    Value* val2 = getVal(*yyvsp[-3].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = BinaryOperator::create(yyvsp[-4].BinaryOpVal, val1, val2);
    if (yyval.InstVal == 0)
      GEN_ERROR("binary operator returned null!");
    delete yyvsp[-3].TypeVal;
  ;
    break;}
case 263:
#line 2591 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    if (!(*yyvsp[-3].TypeVal)->isInteger()) {
      if (!isa<PackedType>(yyvsp[-3].TypeVal->get()) ||
          !cast<PackedType>(yyvsp[-3].TypeVal->get())->getElementType()->isInteger())
        GEN_ERROR("Logical operator requires integral operands!");
    }
    Value* tmpVal1 = getVal(*yyvsp[-3].TypeVal, yyvsp[-2].ValIDVal);
    CHECK_FOR_ERROR
    Value* tmpVal2 = getVal(*yyvsp[-3].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = BinaryOperator::create(yyvsp[-4].BinaryOpVal, tmpVal1, tmpVal2);
    if (yyval.InstVal == 0)
      GEN_ERROR("binary operator returned null!");
    delete yyvsp[-3].TypeVal;
  ;
    break;}
case 264:
#line 2608 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    if (isa<PackedType>((*yyvsp[-3].TypeVal).get()))
      GEN_ERROR("Packed types not supported by icmp instruction");
    Value* tmpVal1 = getVal(*yyvsp[-3].TypeVal, yyvsp[-2].ValIDVal);
    CHECK_FOR_ERROR
    Value* tmpVal2 = getVal(*yyvsp[-3].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = CmpInst::create(yyvsp[-5].OtherOpVal, yyvsp[-4].IPredicate, tmpVal1, tmpVal2);
    if (yyval.InstVal == 0)
      GEN_ERROR("icmp operator returned null!");
  ;
    break;}
case 265:
#line 2621 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-3].TypeVal)->getDescription());
    if (isa<PackedType>((*yyvsp[-3].TypeVal).get()))
      GEN_ERROR("Packed types not supported by fcmp instruction");
    Value* tmpVal1 = getVal(*yyvsp[-3].TypeVal, yyvsp[-2].ValIDVal);
    CHECK_FOR_ERROR
    Value* tmpVal2 = getVal(*yyvsp[-3].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = CmpInst::create(yyvsp[-5].OtherOpVal, yyvsp[-4].FPredicate, tmpVal1, tmpVal2);
    if (yyval.InstVal == 0)
      GEN_ERROR("fcmp operator returned null!");
  ;
    break;}
case 266:
#line 2634 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[0].ValueVal->getType() != Type::Int8Ty)
      GEN_ERROR("Shift amount must be i8 type!");
    if (!yyvsp[-2].ValueVal->getType()->isInteger())
      GEN_ERROR("Shift constant expression requires integer operand!");
    CHECK_FOR_ERROR;
    yyval.InstVal = new ShiftInst(yyvsp[-3].OtherOpVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 267:
#line 2643 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    Value* Val = yyvsp[-2].ValueVal;
    const Type* DestTy = yyvsp[0].TypeVal->get();
    if (!CastInst::castIsValid(yyvsp[-3].CastOpVal, Val, DestTy))
      GEN_ERROR("invalid cast opcode for cast from '" +
                Val->getType()->getDescription() + "' to '" +
                DestTy->getDescription() + "'!"); 
    yyval.InstVal = CastInst::create(yyvsp[-3].CastOpVal, Val, DestTy);
    delete yyvsp[0].TypeVal;
  ;
    break;}
case 268:
#line 2655 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (yyvsp[-4].ValueVal->getType() != Type::Int1Ty)
      GEN_ERROR("select condition must be boolean!");
    if (yyvsp[-2].ValueVal->getType() != yyvsp[0].ValueVal->getType())
      GEN_ERROR("select value types should match!");
    yyval.InstVal = new SelectInst(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 269:
#line 2663 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[0].TypeVal)->getDescription());
    yyval.InstVal = new VAArgInst(yyvsp[-2].ValueVal, *yyvsp[0].TypeVal);
    delete yyvsp[0].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 270:
#line 2670 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!ExtractElementInst::isValidOperands(yyvsp[-2].ValueVal, yyvsp[0].ValueVal))
      GEN_ERROR("Invalid extractelement operands!");
    yyval.InstVal = new ExtractElementInst(yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 271:
#line 2676 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!InsertElementInst::isValidOperands(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal))
      GEN_ERROR("Invalid insertelement operands!");
    yyval.InstVal = new InsertElementInst(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 272:
#line 2682 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!ShuffleVectorInst::isValidOperands(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal))
      GEN_ERROR("Invalid shufflevector operands!");
    yyval.InstVal = new ShuffleVectorInst(yyvsp[-4].ValueVal, yyvsp[-2].ValueVal, yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 273:
#line 2688 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    const Type *Ty = yyvsp[0].PHIList->front().first->getType();
    if (!Ty->isFirstClassType())
      GEN_ERROR("PHI node operands must be of first class type!");
    yyval.InstVal = new PHINode(Ty);
    ((PHINode*)yyval.InstVal)->reserveOperandSpace(yyvsp[0].PHIList->size());
    while (yyvsp[0].PHIList->begin() != yyvsp[0].PHIList->end()) {
      if (yyvsp[0].PHIList->front().first->getType() != Ty) 
        GEN_ERROR("All elements of a PHI node must be of the same type!");
      cast<PHINode>(yyval.InstVal)->addIncoming(yyvsp[0].PHIList->front().first, yyvsp[0].PHIList->front().second);
      yyvsp[0].PHIList->pop_front();
    }
    delete yyvsp[0].PHIList;  // Free the list...
    CHECK_FOR_ERROR
  ;
    break;}
case 274:
#line 2704 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{

    // Handle the short syntax
    const PointerType *PFTy = 0;
    const FunctionType *Ty = 0;
    if (!(PFTy = dyn_cast<PointerType>(yyvsp[-5].TypeVal->get())) ||
        !(Ty = dyn_cast<FunctionType>(PFTy->getElementType()))) {
      // Pull out the types of all of the arguments...
      std::vector<const Type*> ParamTypes;
      FunctionType::ParamAttrsList ParamAttrs;
      ParamAttrs.push_back(yyvsp[0].ParamAttrs);
      for (ValueRefList::iterator I = yyvsp[-2].ValueRefList->begin(), E = yyvsp[-2].ValueRefList->end(); I != E; ++I) {
        const Type *Ty = I->Val->getType();
        if (Ty == Type::VoidTy)
          GEN_ERROR("Short call syntax cannot be used with varargs");
        ParamTypes.push_back(Ty);
        ParamAttrs.push_back(I->Attrs);
      }

      Ty = FunctionType::get(yyvsp[-5].TypeVal->get(), ParamTypes, false, ParamAttrs);
      PFTy = PointerType::get(Ty);
    }

    Value *V = getVal(PFTy, yyvsp[-4].ValIDVal);   // Get the function we're calling...
    CHECK_FOR_ERROR

    // Check the arguments 
    ValueList Args;
    if (yyvsp[-2].ValueRefList->empty()) {                                   // Has no arguments?
      // Make sure no arguments is a good thing!
      if (Ty->getNumParams() != 0)
        GEN_ERROR("No arguments passed to a function that "
                       "expects arguments!");
    } else {                                     // Has arguments?
      // Loop through FunctionType's arguments and ensure they are specified
      // correctly!
      //
      FunctionType::param_iterator I = Ty->param_begin();
      FunctionType::param_iterator E = Ty->param_end();
      ValueRefList::iterator ArgI = yyvsp[-2].ValueRefList->begin(), ArgE = yyvsp[-2].ValueRefList->end();

      for (; ArgI != ArgE && I != E; ++ArgI, ++I) {
        if (ArgI->Val->getType() != *I)
          GEN_ERROR("Parameter " + ArgI->Val->getName()+ " is not of type '" +
                         (*I)->getDescription() + "'!");
        Args.push_back(ArgI->Val);
      }
      if (Ty->isVarArg()) {
        if (I == E)
          for (; ArgI != ArgE; ++ArgI)
            Args.push_back(ArgI->Val); // push the remaining varargs
      } else if (I != E || ArgI != ArgE)
        GEN_ERROR("Invalid number of parameters detected!");
    }
    // Create the call node
    CallInst *CI = new CallInst(V, Args);
    CI->setTailCall(yyvsp[-7].BoolVal);
    CI->setCallingConv(yyvsp[-6].UIntVal);
    yyval.InstVal = CI;
    delete yyvsp[-2].ValueRefList;
    delete yyvsp[-5].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 275:
#line 2767 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.InstVal = yyvsp[0].InstVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 276:
#line 2772 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = true;
    CHECK_FOR_ERROR
  ;
    break;}
case 277:
#line 2776 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    yyval.BoolVal = false;
    CHECK_FOR_ERROR
  ;
    break;}
case 278:
#line 2783 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    yyval.InstVal = new MallocInst(*yyvsp[-1].TypeVal, 0, yyvsp[0].UIntVal);
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 279:
#line 2790 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-4].TypeVal)->getDescription());
    Value* tmpVal = getVal(yyvsp[-2].PrimType, yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new MallocInst(*yyvsp[-4].TypeVal, tmpVal, yyvsp[0].UIntVal);
    delete yyvsp[-4].TypeVal;
  ;
    break;}
case 280:
#line 2798 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    yyval.InstVal = new AllocaInst(*yyvsp[-1].TypeVal, 0, yyvsp[0].UIntVal);
    delete yyvsp[-1].TypeVal;
    CHECK_FOR_ERROR
  ;
    break;}
case 281:
#line 2805 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-4].TypeVal)->getDescription());
    Value* tmpVal = getVal(yyvsp[-2].PrimType, yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new AllocaInst(*yyvsp[-4].TypeVal, tmpVal, yyvsp[0].UIntVal);
    delete yyvsp[-4].TypeVal;
  ;
    break;}
case 282:
#line 2813 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!isa<PointerType>(yyvsp[0].ValueVal->getType()))
      GEN_ERROR("Trying to free nonpointer type " + 
                     yyvsp[0].ValueVal->getType()->getDescription() + "!");
    yyval.InstVal = new FreeInst(yyvsp[0].ValueVal);
    CHECK_FOR_ERROR
  ;
    break;}
case 283:
#line 2821 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    if (!isa<PointerType>(yyvsp[-1].TypeVal->get()))
      GEN_ERROR("Can't load from nonpointer type: " +
                     (*yyvsp[-1].TypeVal)->getDescription());
    if (!cast<PointerType>(yyvsp[-1].TypeVal->get())->getElementType()->isFirstClassType())
      GEN_ERROR("Can't load from pointer of non-first-class type: " +
                     (*yyvsp[-1].TypeVal)->getDescription());
    Value* tmpVal = getVal(*yyvsp[-1].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new LoadInst(tmpVal, "", yyvsp[-3].BoolVal);
    delete yyvsp[-1].TypeVal;
  ;
    break;}
case 284:
#line 2835 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-1].TypeVal)->getDescription());
    const PointerType *PT = dyn_cast<PointerType>(yyvsp[-1].TypeVal->get());
    if (!PT)
      GEN_ERROR("Can't store to a nonpointer type: " +
                     (*yyvsp[-1].TypeVal)->getDescription());
    const Type *ElTy = PT->getElementType();
    if (ElTy != yyvsp[-3].ValueVal->getType())
      GEN_ERROR("Can't store '" + yyvsp[-3].ValueVal->getType()->getDescription() +
                     "' into space of type '" + ElTy->getDescription() + "'!");

    Value* tmpVal = getVal(*yyvsp[-1].TypeVal, yyvsp[0].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new StoreInst(yyvsp[-3].ValueVal, tmpVal, yyvsp[-5].BoolVal);
    delete yyvsp[-1].TypeVal;
  ;
    break;}
case 285:
#line 2852 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"
{
    if (!UpRefs.empty())
      GEN_ERROR("Invalid upreference in type: " + (*yyvsp[-2].TypeVal)->getDescription());
    if (!isa<PointerType>(yyvsp[-2].TypeVal->get()))
      GEN_ERROR("getelementptr insn requires pointer operand!");

    if (!GetElementPtrInst::getIndexedType(*yyvsp[-2].TypeVal, *yyvsp[0].ValueList, true))
      GEN_ERROR("Invalid getelementptr indices for type '" +
                     (*yyvsp[-2].TypeVal)->getDescription()+ "'!");
    Value* tmpVal = getVal(*yyvsp[-2].TypeVal, yyvsp[-1].ValIDVal);
    CHECK_FOR_ERROR
    yyval.InstVal = new GetElementPtrInst(tmpVal, *yyvsp[0].ValueList);
    delete yyvsp[-2].TypeVal; 
    delete yyvsp[0].ValueList;
  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2869 "/Volumes/ProjectsDisk/cvs/llvm/lib/AsmParser/llvmAsmParser.y"


// common code from the two 'RunVMAsmParser' functions
static Module* RunParser(Module * M) {

  llvmAsmlineno = 1;      // Reset the current line number...
  CurModule.CurrentModule = M;
#if YYDEBUG
  yydebug = Debug;
#endif

  // Check to make sure the parser succeeded
  if (yyparse()) {
    if (ParserResult)
      delete ParserResult;
    return 0;
  }

  // Check to make sure that parsing produced a result
  if (!ParserResult)
    return 0;

  // Reset ParserResult variable while saving its value for the result.
  Module *Result = ParserResult;
  ParserResult = 0;

  return Result;
}

void llvm::GenerateError(const std::string &message, int LineNo) {
  if (LineNo == -1) LineNo = llvmAsmlineno;
  // TODO: column number in exception
  if (TheParseError)
    TheParseError->setError(CurFilename, message, LineNo);
  TriggerError = 1;
}

int yyerror(const char *ErrorMsg) {
  std::string where 
    = std::string((CurFilename == "-") ? std::string("<stdin>") : CurFilename)
                  + ":" + utostr((unsigned) llvmAsmlineno) + ": ";
  std::string errMsg = std::string(ErrorMsg) + "\n" + where + " while reading ";
  if (yychar == YYEMPTY || yychar == 0)
    errMsg += "end-of-file.";
  else
    errMsg += "token: '" + std::string(llvmAsmtext, llvmAsmleng) + "'";
  GenerateError(errMsg);
  return 0;
}
