; RUN: llvm-upgrade < %s | llvm-as | opt -instcombine | llvm-dis | \
; RUN:   grep select | not grep {i32\\*}

; This testcase corresponds to PR362, which notices that this horrible code
; is generated by the C++ front-end and LLVM optimizers, which has lots of
; loads and other stuff that are unneeded.
;
; Instcombine should propagate the load through the select instructions to
; allow elimination of the extra stuff by the mem2reg pass.

implementation   ; Functions:

void %_Z5test1RiS_(int* %x, int* %y) {
entry:
	%tmp.1.i = load int* %y		; <int> [#uses=1]
	%tmp.3.i = load int* %x		; <int> [#uses=1]
	%tmp.4.i = setlt int %tmp.1.i, %tmp.3.i		; <bool> [#uses=1]
	%retval.i = select bool %tmp.4.i, int* %y, int* %x		; <int*> [#uses=1]
	%tmp.4 = load int* %retval.i		; <int> [#uses=1]
	store int %tmp.4, int* %x
	ret void
}

void %_Z5test2RiS_(int* %x, int* %y) {
entry:
	%tmp.0 = alloca int		; <int*> [#uses=2]
	%tmp.2 = load int* %x		; <int> [#uses=2]
	store int %tmp.2, int* %tmp.0
	%tmp.3.i = load int* %y		; <int> [#uses=1]
	%tmp.4.i = setlt int %tmp.2, %tmp.3.i		; <bool> [#uses=1]
	%retval.i = select bool %tmp.4.i, int* %y, int* %tmp.0		; <int*> [#uses=1]
	%tmp.6 = load int* %retval.i		; <int> [#uses=1]
	store int %tmp.6, int* %y
	ret void
}
