proc execOneLine { test outcome lineno line } {
  set status 0
  set resultmsg ""
  set retval [ catch { eval exec -keepnewline -- $line } errmsg ]
  if { $retval != 0 } {
    set code [lindex $::errorCode 0]
    set lineno [expr $lineno + 1]
    set errmsg " at RUN: line $lineno\nwhile running: $line\n$errmsg"
    switch "$code" {
      CHILDSTATUS {
        set status [lindex $::errorCode 2]
        if { $status ne 0 } {
          set resultmsg "$test: exit($status)$errmsg"
        }
      }
      CHILDKILLED {
        set signal [lindex $::errorCode 2]
        set resultmsg "$test: signal($signal)$errmsg"
      }
      CHILDSUSP {
        set signal [lindex $::errorCode 2]
        set resultmsg "$test: suspend($signal)$errmsg"
      }
      POSIX {
        set posixNum [lindex $::errorCode 1]
        set posixMsg [lindex $::errorCode 2]
        set resultmsg "$test: posix($posixNum,$posixMsg)$errmsg"
      }
      NONE {
      }
      default {
      }
    }
  } 
  return $resultmsg
}

proc substitute { line test tmpFile } {
  global srcroot objroot srcdir objdir subdir target_triplet prcontext 
  global llvmgcc llvmgxx global llvmgcc_version llvmgccmajvers 
  global gccpath gxxpath compile_c compile_cxx link shlibext llvmlibsdir

  set new_line $line
  #replace %prcontext with prcontext.tcl (Must replace before %p)
  regsub -all {%prcontext} $new_line $prcontext new_line
  #replace %llvmgcc with actual path to llvmgcc
  regsub -all {%llvmgcc} $new_line "$llvmgcc -emit-llvm" new_line
  #replace %llvmgxx with actual path to llvmg++
  regsub -all {%llvmgxx} $new_line "$llvmgxx -emit-llvm" new_line
  #replace %compile_c with C compilation command
  regsub -all {%compile_c} $new_line "$compile_c" new_line
  #replace %compile_cxx with C++ compilation command
  regsub -all {%compile_cxx} $new_line "$compile_cxx" new_line
  #replace %link with C++ link command
  regsub -all {%link} $new_line "$link" new_line
  #replace %shlibext with shared library extension
  regsub -all {%shlibext} $new_line "$shlibext" new_line
  #replace %llvmlibsdir with configure library directory
  regsub -all {%llvmlibsdir} $new_line "$llvmlibsdir" new_line
  #replace %p with path to source, 
  regsub -all {%p} $new_line [file join $srcdir $subdir] new_line
  #replace %s with filename
  regsub -all {%s} $new_line $test new_line
  #replace %t with temp filenames
  regsub -all {%t} $new_line [file join Output $tmpFile] new_line
  return $new_line
}

proc llvm-runtest { programs } {
  global srcroot objroot srcdir objdir subdir target_triplet
  set timeout 60

  set path [file join $objdir $subdir]
  
  #Make Output Directory if it does not exist already
  if { [file exists path] } {
    cd $path
  } else {
    file mkdir $path
    cd $path
  }
  
  file mkdir Output

  foreach test $programs {
    #Should figure out best way to set the timeout
    #set timeout 40
    
    set filename [file tail $test]
    set outcome PASS
    set tmpFile "$filename.tmp"

    #set hasRunline bool to check if testcase has a runline
    set numLines 0

    # Open the test file and start reading lines
    set testFileId [ open $test r]
    set runline ""
    foreach line [split [read $testFileId] \n] {

      #see if this is our run line
      if {[regexp {END.[ *]$} $line match endofscript]} {
        break
      } elseif {[regexp {RUN: *([^\\]+)(\\)} $line match oneline suffix]} {
        set runline "$runline$oneline "
      } elseif {[regexp {RUN: *([^&]+)(&&)?} $line match oneline suffix]} {
        set runline "$runline$oneline"
        set runline [ substitute $runline $test $tmpFile ]
        set lines($numLines) $runline
        set numLines [expr $numLines + 1]
        set runline ""
      } elseif {[regexp {XFAIL:[ *](.+)} $line match targets]} {
        set targets

        #split up target if more then 1 specified
        foreach target [split $targets ,] {
          if { [regexp {\*} $target match] } {
              set outcome XFAIL
          } elseif { [regexp $target $target_triplet match] } {
              set outcome XFAIL
          } elseif { [regexp {llvmgcc(([0-9]+)|([0-9]+[.][0-9]+))} $target match submatch submatch2]  } {
            if { [regexp ^($submatch)$|^(($submatch)(\.)) $llvmgcc_version match] } {
              set outcome XFAIL
            }
          }
        }
      }
    }
    
    # Done reading the script
    close $testFileId
    
    
    if { $numLines == 0 } {
      fail "$test: \nDoes not have a RUN line\n"
    } else {
      set failed 0
      for { set i 0 } { $i < $numLines } { set i [ expr $i + 1 ] } {
        regsub ^.*RUN:(.*) $lines($i) \1 theLine
        set theLine [subst $theLine ]
        set resultmsg [execOneLine $test $outcome $i $theLine ]
        if { $resultmsg != "" } {
          if { $outcome == "XFAIL" } {
            xfail "$resultmsg"
          } else {
            fail "$resultmsg"
          }
          set failed 1
          break
        }
      }
      if { !$failed } {
        if { $outcome == "XFAIL" } {
          xpass "$test"
        } else {
          pass "$resultmsg"
        }
      }
    }
  }
}
